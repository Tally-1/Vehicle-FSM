/*%FSM<COMPILE "C:\Program Files (x86)\Steam\steamapps\common\Arma 3 Tools\FSMEditor\scriptedFSM.cfg, Veh_FSM">*/
/*%FSM<HEAD>*/
/*
item0[] = {"Init_FSM",0,4346,-436.614563,-1259.584595,-346.614624,-1209.584473,0.000000,"Init FSM"};
item1[] = {"FSM_not_running",4,218,-450.142822,-1144.447144,-335.270630,-1073.305664,0.000000,"FSM not running"};
item2[] = {"Declaring_all_functions",2,250,-509.914093,-776.690063,-272.368530,-693.902222,0.000000,"Declaring all functions needed"};
item3[] = {"sleep",4,218,-434.686584,-456.030518,-344.686584,-406.030579,0.000000,"sleep"};
item4[] = {"sleep",4,218,-26.469467,-288.876068,63.530533,-238.875946,0.000000,"sleep"};
item5[] = {"",7,210,14.034729,-141.697815,22.034729,-133.697815,0.000000,""};
item6[] = {"Executing_FSM_functions",2,250,-575.858948,-346.724121,-197.401642,-180.637512,0.000000,"Executing FSM functions for all eligble vehicles" \n "" \n "Checkout 'Devfile.sqf' To see all functions / code used."};
item7[] = {"FSM_already_runn",4,218,-219.828339,-1169.373657,-83.845428,-1093.434448,0.000000,"FSM already running"};
item8[] = {"exit",1,250,116.966492,-1156.514160,206.966522,-1106.514282,0.000000,"exit"};
item9[] = {"Declare_state",2,250,-438.308624,-999.929077,-348.308624,-949.929077,0.000000,"Declare state"};
item10[] = {"sleep",4,218,-437.688751,-879.131104,-347.688751,-829.131104,0.000000,"sleep"};
item11[] = {"true",8,218,-434.722595,-638.593079,-344.722595,-588.593079,0.000000,"true"};
item12[] = {"PostInit",2,250,-482.944977,-556.055786,-306.401611,-482.616943,0.000000,"PostInit"};
item13[] = {"EndCondition",4,218,116.574257,-510.365356,206.574249,-427.530273,0.000000,"EndCondition"};
item14[] = {"Feedback",2,250,116.823433,-742.144836,206.823456,-692.144836,0.000000,"Feedback"};
item15[] = {"true",8,218,117.289719,-956.827026,207.289719,-906.827087,0.000000,"true"};
item16[] = {"",7,210,-391.297516,-140.677734,-383.297516,-132.677734,0.000000,""};
item17[] = {"MIght_need_Multiplayer",-1,250,-1072.988037,-314.517761,-606.910828,-189.184326,0.000000,"MIght need Multiplayer compatibility. Locality might be a issue"};
item18[] = {"Author___Leo_Hartgen",-1,250,95.052429,-265.517151,366.967041,-108.478088,0.000000,"Author:  Leo Hartgen *[P] Tally*" \n "" \n "Github:  https://github.com/Tally-1" \n "" \n "Discord Tally#8779" \n "" \n "Written on behalf of Dragon Company" \n ""};
item19[] = {"",7,210,158.355835,-614.620667,166.355835,-606.620667,0.000000,""};
item20[] = {"Produced_by_Dragon",-1,250,-589.265137,-1570.737061,-135.809814,-1285.335571,0.000000,"Produced by Dragon Company." \n "" \n "Join our discord and let us know what" \n "you would like to see next!" \n "" \n "https://discord.gg/bRTqWJzeza" \n ""};
version=1;
class LayoutItems
{
	class Item17
	{
		class ItemInfo
		{
			FontFace="Arial";
			FontHeight=10;
			lStyle=1;
		};
		BgColor=12254960;
	};
	class Item18
	{
		class ItemInfo
		{
			FontFace="Arial";
			FontHeight=12;
			lStyle=1;
			Align=0;
		};
		BgColor=15465915;
	};
	class Item20
	{
		class ItemInfo
		{
			FontFace="Arial";
			FontHeight=20;
			lStyle=1;
			Align=0;
		};
		BgColor=15465915;
	};
};
link0[] = {0,1};
link1[] = {0,7};
link2[] = {1,9};
link3[] = {2,11};
link4[] = {3,6};
link5[] = {4,5};
link6[] = {5,16};
link7[] = {6,4};
link8[] = {6,13};
link9[] = {7,8};
link10[] = {9,10};
link11[] = {10,2};
link12[] = {11,12};
link13[] = {12,3};
link14[] = {13,19};
link15[] = {14,15};
link16[] = {15,8};
link17[] = {16,6};
link18[] = {19,14};
globals[] = {0.000000,0,0,0,0,640,480,1,41,6316128,1,-1433.603271,791.283325,-52.553467,-1646.394409,1234,884,1};
window[] = {2,-1,-1,-1,-1,895,156,1180,156,3,1252};
*//*%FSM</HEAD>*/
class FSM
{
        fsmName = "Veh_FSM";
        class States
        {
                /*%FSM<STATE "Init_FSM">*/
                class Init_FSM
                {
                        name = "Init_FSM";
                        itemno = 0;
                        init = /*%FSM<STATEINIT""">*/"_Minimum_Distance = 350;" \n
                         "_DeBug = false;" \n
                         "_VehicleAutoRepair 	= true;" \n
                         "iterationTimer		   = 2;" \n
                         "Params [""_Minimum_Distance"", ""_DeBug"", ""_VehicleAutoRepair""];" \n
                         "_time = time;" \n
                         "_Running = (MissionNamespace GetVariable ""Tally_FSM_RUnning"");" \n
                         "EndVehicleFSM_now = false;" \n
                         "" \n
                         "VehMinimumDistance 		= _Minimum_Distance;" \n
                         "FSMD3Bugger					= _DeBug;" \n
                         "VehicleAutoRepair			= _VehicleAutoRepair;" \n
                         ""/*%FSM</STATEINIT""">*/;
                        precondition = /*%FSM<STATEPRECONDITION""">*/""/*%FSM</STATEPRECONDITION""">*/;
                        class Links
                        {
                                /*%FSM<LINK "FSM_already_runn">*/
                                class FSM_already_runn
                                {
                                        itemno = 7;
                                        priority = 0.000000;
                                        to="exit";
                                        precondition = /*%FSM<CONDPRECONDITION""">*/""/*%FSM</CONDPRECONDITION""">*/;
                                        condition=/*%FSM<CONDITION""">*/"_Running"/*%FSM</CONDITION""">*/;
                                        action=/*%FSM<ACTION""">*/""/*%FSM</ACTION""">*/;
                                };
                                /*%FSM</LINK>*/
                                /*%FSM<LINK "FSM_not_running">*/
                                class FSM_not_running
                                {
                                        itemno = 1;
                                        priority = 0.000000;
                                        to="Declare_state";
                                        precondition = /*%FSM<CONDPRECONDITION""">*/""/*%FSM</CONDPRECONDITION""">*/;
                                        condition=/*%FSM<CONDITION""">*/"IsNil ""_Running"""/*%FSM</CONDITION""">*/;
                                        action=/*%FSM<ACTION""">*/""/*%FSM</ACTION""">*/;
                                };
                                /*%FSM</LINK>*/
                        };
                };
                /*%FSM</STATE>*/
                /*%FSM<STATE "Declaring_all_functions">*/
                class Declaring_all_functions
                {
                        name = "Declaring_all_functions";
                        itemno = 2;
                        init = /*%FSM<STATEINIT""">*/"" \n
                         "Tally_Fnc_AssignFlankPositions = {" \n
                         "params[""_Vehicle"", ""_EnAvgPos"", ""_Initiator""];" \n
                         "" \n
                         "private _Timer = time;" \n
                         "if (IsNil ""_Initiator"")" \n
                         "then{" \n
                         "		private _script = [_Vehicle, _EnAvgPos] spawn Tally_Fnc_FlankPositions;" \n
                         "		Waituntil {sleep 0.02; " \n
                         "						((ScriptDone _Script)" \n
                         "						or(time - _Timer > 3))" \n
                         "					 };" \n
                         "	}" \n
                         "else{" \n
                         "		waituntil{" \n
                         "					sleep 0.1;" \n
                         "					private _Loaded 	= (_Initiator GetVariable ""FlankPosLoaded"");" \n
                         "					private _TimedOut 	= (time - _Timer > 4);" \n
                         "					" \n
                         "					if(IsNil ""_Loaded"")exitWith{true};" \n
                         "					" \n
                         "					if(_TimedOut" \n
                         "					or _Loaded)" \n
                         "					exitWith{true};" \n
                         "					false" \n
                         "				  };" \n
                         "					 " \n
                         "		private _FlankPositions = (_Initiator GetVariable ""Positions"");" \n
                         "				if(IsNil ""_FlankPositions"")" \n
                         "				then{" \n
                         "						_FlankPositions = [];" \n
                         "					};" \n
                         "		" \n
                         "			if (count _FlankPositions > 4)then" \n
                         "			{" \n
                         "				_Vehicle SetVariable [""Positions"", _FlankPositions, true];" \n
                         "				_Vehicle SetVariable [""FlankPosLoaded"", true, 		true];" \n
                         "			}" \n
                         "		" \n
                         "		else{" \n
                         "				private _script = [_Vehicle, _EnAvgPos] spawn Tally_Fnc_FlankPositions;" \n
                         "				Waituntil 	{" \n
                         "							sleep 0.02; " \n
                         "							((ScriptDone _Script)" \n
                         "							or(time - _Timer > 3))" \n
                         "							};" \n
                         "			};" \n
                         "		" \n
                         "		" \n
                         "	};" \n
                         "" \n
                         "" \n
                         "};" \n
                         "" \n
                         "" \n
                         "" \n
                         "" \n
                         "" \n
                         "" \n
                         "" \n
                         "Tally_Fnc_FlankPositions = {" \n
                         "params [""_Vehicle"", ""_EnAvgPos""];" \n
                         "private _Timer = time;" \n
                         "		{" \n
                         "			Private _arr = _x;" \n
                         "			private _Script =  _arr spawn Tally_Fnc_Scan_Area; diag_log format [""arr %1"", (_arr)];" \n
                         "	" \n
                         "			Waituntil {	" \n
                         "						sleep 0.02; " \n
                         "						((ScriptDone _Script)" \n
                         "						or(time - _Timer > 3))" \n
                         "					  };" \n
                         "		} ForEach (_Vehicle GetVariable ""Areas"");" \n
                         "		" \n
                         "		_Script = [_Vehicle, _EnAvgPos] Spawn Tally_Fnc_FilterPos;" \n
                         "		Waituntil {	" \n
                         "						sleep 0.02; " \n
                         "						((ScriptDone _Script)" \n
                         "						or(time - _Timer > 3))" \n
                         "					  };" \n
                         "		[""Flank positions loaded in seconds:"", (time-_Timer)] call debugMessage;" \n
                         "		_Vehicle SetVariable [""FlankPosLoaded"", true, true];" \n
                         "};" \n
                         "" \n
                         "" \n
                         "" \n
                         "" \n
                         "" \n
                         "" \n
                         "" \n
                         "" \n
                         "Tally_Fnc_BackUp = {" \n
                         "params [""_Vehicle"", ""_Area""];" \n
                         "_Vehicle sendSimpleCommand ""STOP"";" \n
                         "" \n
                         "for ""_I"" from 1 to 10 do" \n
                         "{" \n
                         "	_Vehicle SetVariable [""ready"", false, true];" \n
                         "	_Vehicle sendSimpleCommand ""BACK"";" \n
                         "	if(count (crew _Vehicle) < 2)exitWith{};" \n
                         "	sleep 1;" \n
                         "};" \n
                         "" \n
                         "" \n
                         "_Vehicle SetVariable [""ready"", true, true];" \n
                         "[_Vehicle, _Area] spawn Tally_Fnc_SoftMove;" \n
                         "};" \n
                         "" \n
                         "" \n
                         "" \n
                         "" \n
                         "Tally_Fnc_QuickDecision = {" \n
                         "params [""_Vehicle"", ""_EnAvgPos""];" \n
                         "" \n
                         "private _NextAction	= [_Vehicle] call Tally_Fnc_Flank_Hide_Push;" \n
                         "" \n
                         "" \n
                         "switch (_NextAction) do" \n
                         "{" \n
                         "	case ""push"";	{ " \n
                         "						[_Vehicle, _EnAvgPos] call Tally_Fnc_SoftMove;" \n
                         "						_Vehicle setVariable [""currentAction"", 	""Attempting to push"", true];" \n
                         "						_Vehicle SetVariable [""EvadePos"", _EnAvgPos, true];" \n
                         "					};" \n
                         "	case ""flank"": 	{ " \n
                         "						private _Area = ((_Vehicle GetVariable ""Areas"") select (selectRandom [1,2]) select 0);" \n
                         "						[_Vehicle, _Area] call Tally_Fnc_SoftMove;" \n
                         "						[_Vehicle] spawn Tally_Fnc_DeploySmoke;" \n
                         "						_Vehicle setVariable [""currentAction"", 	""Attempting to flank"", true];" \n
                         "						_Vehicle SetVariable [""EvadePos"", _Area, true];" \n
                         "					};" \n
                         "	case ""hide"";	{ " \n
                         "						private _Area = (((_Vehicle GetVariable ""Areas"") select 0) select 0);" \n
                         "						[_Vehicle, _Area] call Tally_Fnc_SoftMove;" \n
                         "						[_Vehicle] spawn Tally_Fnc_DeploySmoke;" \n
                         "						_Vehicle setVariable [""currentAction"", 	""Attempting to hide"", true];" \n
                         "						_Vehicle SetVariable [""EvadePos"", _Area, true];" \n
                         "					};" \n
                         "	default 		{};" \n
                         "};" \n
                         "" \n
                         "};" \n
                         "Tally_Fnc_EvadeVEh = {" \n
                         "" \n
                         "Private _Minimum_Distance 		= 400; " \n
                         "Private _DeBug 					= false;" \n
                         "Private _Enemy 					= nil;" \n
                         "" \n
                         "Params [""_Vehicle"", ""_Minimum_Distance"", ""_DeBug"", ""_Enemy"", ""_Initiator""];" \n
                         "" \n
                         "" \n
                         "Private _Driver 				= (driver _Vehicle);" \n
                         "Private _Evading 				= (_Vehicle getVariable ""Evading"");" \n
                         "Private _Group					= (Group _Driver);" \n
                         "private _Side					= (Side _Driver);" \n
                         "Private _Timer					= (Time + 3);" \n
                         "private _DataChecked			= _Vehicle GetVariable ""Viable"";" \n
                         "Private _Repairing				= (_Vehicle GetVariable ""repairing"");" \n
                         "" \n
                         "if(_Minimum_Distance == VehMinimumDistance)" \n
                         "then{" \n
                         "		_Minimum_Distance		= [_Vehicle, _Minimum_Distance] call Tally_Fnc_MinDistMultiplier;" \n
                         "	};" \n
                         "" \n
                         "if(isnil ""_Enemy"")" \n
                         "then{" \n
                         "		_Enemy	= [_Minimum_Distance, _Driver] call Tally_Fnc_GetNearestEnemy;" \n
                         "	};" \n
                         "" \n
                         "missionNameSpace setVariable [""FSMD3Bugger"", _DeBug, true];" \n
                         "" \n
                         "" \n
                         "If (!IsNil ""_Repairing""" \n
                         "&& {_Repairing})			ExitWith {};" \n
                         "If (Isnil ""_Vehicle"")	ExitWith {};" \n
                         "If (Isnil ""_Enemy"")		ExitWith {};" \n
                         "If (!Isnil ""_Evading"")	ExitWith {};" \n
                         "If (Isnull _Enemy)		ExitWith {};" \n
                         "if([_Vehicle] call Tally_Fnc_PlayerInVeh) exitwith{};" \n
                         "" \n
                         "diag_log format [""side Vehicle %1 Has %2 TargetKnowledge"", _Vehicle, (_Side knowsAbout _Enemy)];" \n
                         "If ((!((_Side knowsAbout _Enemy) > 0)) " \n
                         "&& (!((_Group knowsAbout _Enemy) > 0))) ExitWith {" \n
                         "													diag_log format [""Side for Vehicle %1 does not know about near enemy"", _Vehicle];" \n
                         "													If (FSMD3Bugger) then 	{" \n
                         "																				SystemChat format [""neither Side or group for Vehicle %1 knows about near enemy"", _Vehicle];" \n
                         "																			};" \n
                         "												 };" \n
                         "private _EnemyDist	= (_Vehicle Distance2D _Enemy);" \n
                         "If (!Alive _Enemy) ExitWith {diag_log format [""Vehicle %1 Has DEAD enemies"", _Vehicle];};" \n
                         "[_Vehicle] call Tally_Fnc_AddEh;" \n
                         "" \n
                         "" \n
                         "" \n
                         "Private _EnAvgPos			= ([_Enemy, (Round(_Minimum_Distance * 0.5))] call Tally_Fnc_AVGclusterPOS);" \n
                         "Private _EnemyCluster		= ([_Enemy, (Round(_Minimum_Distance * 0.5))] call Tally_Fnc_ClusterMembers);" \n
                         "private _KnownEnemies		= [_Enemy];" \n
                         "private _enemyPositions		= [];" \n
                         "private _Crew 				= [];" \n
                         "private _Gunner_2			= """";" \n
                         "" \n
                         "{" \n
                         "	if	((_Side knowsAbout _x > 0)" \n
                         "	or 	(_Group knowsAbout _x > 0)" \n
                         "	or	(_Driver knowsAbout _x > 0))" \n
                         "	then{" \n
                         "			_KnownEnemies pushBackUnique _x;" \n
                         "			_enemyPositions pushBackUnique (getpos _x);" \n
                         "		}" \n
                         "} ForEach _EnemyCluster;" \n
                         "" \n
                         "if (!IsNull driver _Vehicle) then{" \n
                         "	_Crew pushBackUnique driver _Vehicle;" \n
                         "};" \n
                         "" \n
                         "if (!IsNull gunner _Vehicle) then{" \n
                         "	_Crew pushBackUnique gunner _Vehicle;" \n
                         "};" \n
                         "" \n
                         "if (!IsNull commander _Vehicle) then{" \n
                         "	_Crew pushBackUnique commander _Vehicle;" \n
                         "};" \n
                         "" \n
                         "for ""_i"" from 0 to ((count (allTurrets _Vehicle))-1) do {" \n
                         "private _unit = _Vehicle turretUnit (allTurrets _Vehicle select _I);" \n
                         "" \n
                         "if (!isnil ""_unit"" &&{!isNull _unit}) then {" \n
                         "_Crew pushBackUnique _unit;" \n
                         "if !(_unit == commander _Vehicle or _unit == gunner _Vehicle or _unit == driver _Vehicle)then{_Gunner_2 = _unit};" \n
                         "};" \n
                         "};" \n
                         "" \n
                         "" \n
                         "Private _EnemyDir 			= ((_Vehicle getRelDir _Enemy) + (Getdir _Vehicle));" \n
                         "Private _evasionDir 			= ((_EnemyDir - 180) + 0);" \n
                         "Private _GoDistance 			= ((_Minimum_Distance - (_Vehicle Distance2D _Enemy)) + (_Minimum_Distance / 5)); " \n
                         "private _VehicleType 		= ([_Vehicle] call Tally_Fnc_GetVehicleType);" \n
                         "private _VehPos		 		= (GetPos _Vehicle);" \n
                         "private _AvgEnemyAltitude 	= [_enemyPositions] call Tally_Fnc_GetAVGheight;" \n
                         "private _Timer				= (round((time) + (_Minimum_Distance / ([_Vehicle] call Tally_Fnc_Timer_divisor))));" \n
                         "private _LastSmoke			= (_Vehicle getVariable ""LastSmoke"");" \n
                         "" \n
                         "private _HidePos 			=  [_VehPos select 0, " \n
                         "								_VehPos select 1, " \n
                         "							(_EnAvgPos getDir _VehPos), " \n
                         "							(_Minimum_Distance / 4)] " \n
                         "							call Tally_Fnc_CalcAreaLoc;" \n
                         "							" \n
                         "If (_EnemyDist < 50) then {_evasionDir = (getDir _Vehicle)};" \n
                         "" \n
                         "Private _EvasionPos = [_VehPos select 0, _VehPos select 1, _evasionDir, _GoDistance] call Tally_Fnc_CalcAreaLoc;" \n
                         "[_Group] spawn Tally_Fnc_DeleteWP;" \n
                         "sleep 0.1;" \n
                         "" \n
                         "" \n
                         "_Vehicle SetVariable [""initiated"",			time,											true];" \n
                         "_Vehicle SetVariable [""Cluster"",				_EnemyCluster,									true];" \n
                         "_Vehicle SetVariable [""Centro"",				_EnAvgPos,										true];" \n
                         "_Vehicle SetVariable [""Positions"",			[], 											true];" \n
                         "_Vehicle SetVariable [""FlankPosLoaded"",		false, 											true];" \n
                         "_Vehicle SetVariable [""HidePositions"",		[],												true];" \n
                         "_Vehicle SetVariable [""Markers"", 			[], 											true];" \n
                         "_Vehicle SetVariable [""NextPosMarkers"",		[], 											true];" \n
                         "_Vehicle SetVariable [""SelPosMarked"",		false, 											true];" \n
                         "_Vehicle SetVariable [""HiddenPosLoaded"",		false, 											true];" \n
                         "_Vehicle SetVariable [""TwoTimesHideSearch"",	false, 											true];" \n
                         "_Vehicle SetVariable [""PushPosLoaded"",		false, 											true];" \n
                         "_Vehicle SetVariable [""timer"", 				_Timer, 											true];" \n
                         "_Vehicle SetVariable [""tim3r"", 				(systemTime select 1),							true];" \n
                         "_Vehicle SetVariable [""MinDistEnemy"", 		_Minimum_Distance, 								true];" \n
                         "_Vehicle setVariable [""Crew"",				_Crew, 											true];" \n
                         "_Vehicle setVariable [""driver"", 				driver 		_Vehicle,                           	true];" \n
                         "_Vehicle setVariable [""gunner"", 				gunner 		_Vehicle,                           	true];" \n
                         "_Vehicle setVariable [""gunner_2"", 			_Gunner_2, 										true];" \n
                         "_Vehicle setVariable [""commander"", 			commander 	_Vehicle,                           	true];" \n
                         "_Vehicle setVariable [""KnownEnemies"", 		_KnownEnemies,									true];" \n
                         "_Vehicle setVariable [""repairing"", 			false,											true];" \n
                         "_Vehicle setVariable [""switching"", 			false,											true];" \n
                         "_Vehicle setVariable [""crewStatus"", 			""Operational"",									true]; " \n
                         "_Vehicle setVariable [""vehicleType"", 		_VehicleType,									true];" \n
                         "_Vehicle setVariable [""currentAction"", 		""Assesing situation"",							true]; " \n
                         "_Vehicle SetVariable [""Evading"", 			true, 											true];" \n
                         "_Vehicle SetVariable [""EvadePos"", 			_EvasionPos, 									true];" \n
                         "_Vehicle SetVariable [""moveAttempts"", 		0, 												true];" \n
                         "_Vehicle SetVariable [""PushPositions"", 		[], 											true];" \n
                         "_Vehicle SetVariable [""enemyPositions"", 		_enemyPositions,									true];" \n
                         "_Vehicle SetVariable [""AvgEnemyAltitude"", 	_AvgEnemyAltitude,								true];" \n
                         "_Vehicle SetVariable [""Group"",				_Group,											true];" \n
                         "_Vehicle SetVariable [""Secondary_Groups"",	[],												true];" \n
                         "_Vehicle SetVariable [""NearFriends"", 		([_Vehicle, true] call Tally_Fnc_GetNearFriends),	true];" \n
                         "_Vehicle SetVariable [""EndingScript"",		false,											true];" \n
                         "_Vehicle SetVariable [""lastOutro"",			time,											true];" \n
                         "_Vehicle SetVariable [""AllSpotted"",			[],												true];" \n
                         "_Vehicle SetVariable [""LastConditionCheck"",	time,											true];" \n
                         "_Vehicle SetVariable [""LastMove"",			time + 5,										true];" \n
                         "_Vehicle SetVariable [""endedAlready"",		false,											true];" \n
                         "_Vehicle SetVariable [""lastRepair"",			time - 60,										true];" \n
                         "_Vehicle SetVariable [""pathPos"",				[],												true];" \n
                         "" \n
                         "if(isnil ""_LastSmoke"")then	{" \n
                         "								_Vehicle SetVariable [""LastSmoke"", 		time - 120,			true];" \n
                         "								_Vehicle SetVariable [""LastSmokePos"",	(GetPos _Vehicle), 	true];" \n
                         "							}; " \n
                         "private _Timer = time;" \n
                         "" \n
                         "" \n
                         "" \n
                         "Private _Areas = [(getpos _Enemy), _Minimum_Distance, _Vehicle, _evasionDir] call Tally_Fnc_SearchAreas;" \n
                         "_Vehicle SetVariable [""Areas"", 	_Areas, true];" \n
                         "" \n
                         "" \n
                         "[_Vehicle, _EnAvgPos] call Tally_Fnc_QuickDecision;" \n
                         "if(_vehicle IskindOf ""HeliCopter"")" \n
                         "exitwith{" \n
                         "		" \n
                         "		[_vehicle, " \n
                         "		_HidePos," \n
                         "		_EnAvgPos] spawn{" \n
                         "							params[""_Chopper"", ""_EvasionPos"", ""_EnAvgPos""];" \n
                         "							" \n
                         "							_Chopper SetVariable [""EvadePos"", _EvasionPos, true];" \n
                         "							" \n
                         "							private _Time		= 2;" \n
                         "							private _Brake_I		= 20;" \n
                         "							private _Sleep		= _Time / _Brake_I;" \n
                         "							Private _speed 		= (velocityModelSpace _chopper) select 1;" \n
                         "							private _DriftX = (velocityModelSpace _chopper) select 0;" \n
                         "							private _DriftZ = (velocityModelSpace _chopper) select 2;" \n
                         "							Private _Reduction 	= _speed / _Brake_I;" \n
                         "							private _Pilot		= (driver _Chopper);" \n
                         "							private _Group		= group _Chopper;" \n
                         "							" \n
                         "							_Pilot 			setBehaviourStrong ""AWARE"";" \n
                         "							(Group _Pilot) 	setBehaviourStrong ""AWARE"";" \n
                         "							_Group 			setCombatMode 	   ""YELLOW"";" \n
                         "							" \n
                         "							" \n
                         "							[_Chopper, false] spawn Tally_Fnc_SwitchEngagement;" \n
                         "							[_Chopper, _EvasionPos] call Tally_Fnc_SoftMove;" \n
                         "							_Chopper setVariable [""currentAction"", 	""Hide"", 		true];" \n
                         "							_Chopper setVariable [""HiddenPosLoaded"", true, 			true];" \n
                         "							_Chopper SetVariable [""EvadePos"", 		_EvasionPos, 	true];" \n
                         "							_Chopper SetVariable [""HidePositions"",	[_EvasionPos],	true];" \n
                         "							_Chopper SetVariable [""ready"", 			true, 			true];" \n
                         "							" \n
                         "							for ""_I"" from 1 to _Brake_I do{" \n
                         "														[_Chopper, false] spawn Tally_Fnc_SwitchEngagement;" \n
                         "														_speed = (velocityModelSpace _chopper) select 1;" \n
                         "														_DriftX = (velocityModelSpace _chopper) select 0;" \n
                         "														_DriftZ = (velocityModelSpace _chopper) select 2;" \n
                         "														_Chopper setVelocityModelSpace [_DriftX, (_speed - _Reduction), _DriftZ];" \n
                         "														sleep _Sleep;" \n
                         "														_Pilot 			setBehaviourStrong ""AWARE"";" \n
                         "														(Group _Pilot) 	setBehaviourStrong ""AWARE"";" \n
                         "													};" \n
                         "							for ""_I"" from 1 to 180 do		{" \n
                         "																private _Dir = (Getdir _Chopper);" \n
                         "																_Chopper setDir (_Dir -1);" \n
                         "																sleep (2 / 180);" \n
                         "															};" \n
                         "							_speed = (velocityModelSpace _chopper) select 1;" \n
                         "							_DriftX = (velocityModelSpace _chopper) select 0;" \n
                         "							_DriftZ = (velocityModelSpace _chopper) select 2;" \n
                         "							" \n
                         "							for ""_I"" from 1 to _Brake_I do{_Chopper setVelocityModelSpace [_DriftX, (_speed - _Reduction), _DriftZ]; sleep _Sleep};" \n
                         "							" \n
                         "							" \n
                         "						};" \n
                         "		" \n
                         "		" \n
                         "	};" \n
                         "" \n
                         "" \n
                         "if(IsNil ""_Initiator"")" \n
                         "then{" \n
                         "		private _script = [_Vehicle, _EnAvgPos] Spawn Tally_Fnc_AssignFlankPositions;" \n
                         "		Waituntil {" \n
                         "					sleep 0.02; " \n
                         "					((ScriptDone _Script)" \n
                         "					or(time - _Timer > 5))" \n
                         "				 };" \n
                         "	}" \n
                         "else{" \n
                         "		private _script = [_Vehicle, _EnAvgPos, _Initiator] Spawn Tally_Fnc_AssignFlankPositions;" \n
                         "		Waituntil {" \n
                         "					sleep 0.02; " \n
                         "					((ScriptDone _Script)" \n
                         "					or(time - _Timer > 5))" \n
                         "				 };" \n
                         "	};" \n
                         "" \n
                         "" \n
                         "" \n
                         "" \n
                         "" \n
                         "private _GroupUnits = (Units (Group (Driver _Vehicle)));" \n
                         "Private _EvasionPos2 = (SelectRandom (_Vehicle GetVariable ""Positions""));" \n
                         "" \n
                         "If !(IsNil ""_EvasionPos2"") then {_EvasionPos = _EvasionPos2};" \n
                         "_Vehicle SetVariable [""EvadePos"", 		_EvasionPos, true];" \n
                         "" \n
                         "" \n
                         "if!(IsNil ""Cluster"")" \n
                         "then{" \n
                         "		{[_X, (_Vehicle GetVariable ""Cluster"")] spawn Tally_Fnc_Reveal} ForEach _GroupUnits;" \n
                         "	};" \n
                         "	" \n
                         "" \n
                         "" \n
                         "if(!IsNil ""_Initiator"") " \n
                         "then{" \n
                         "		_Script = [_Vehicle, _Initiator] spawn Tally_Fnc_GetHidePos;" \n
                         "		" \n
                         "	}" \n
                         "else{" \n
                         "		_Script = [_Vehicle] spawn Tally_Fnc_GetHidePos;" \n
                         "		" \n
                         "	};" \n
                         "" \n
                         "" \n
                         "	{(_Vehicle GetVariable ""AllSpotted"") pushBackUnique _X}forEach _KnownEnemies;" \n
                         "	{_X SetVariable [""Spotted"", true, true];}ForEach(_Vehicle GetVariable ""AllSpotted"");" \n
                         "" \n
                         "If (FSMD3Bugger) then 	{" \n
                         "							[_Vehicle] call Tally_Fnc_SelectedPositionMarkers;" \n
                         "						};" \n
                         "" \n
                         "[_Vehicle] spawn Tally_Fnc_Check_EvasionVeh_Conditions;" \n
                         "" \n
                         "private _GroupVehicles = ([_Group] call Tally_Fnc_GetGroupVehicles);" \n
                         "" \n
                         "sleep 2;" \n
                         "" \n
                         "{" \n
                         "If ([_X] call Tally_Fnc_VehEligbleFSM) then {" \n
                         "												Private _Evading 		= (_X getVariable ""Evading"");" \n
                         "												" \n
                         "												if(isNil ""_Evading"")then{" \n
                         "																			private _NewDistance 	= (_X distance2d _Enemy) * 1.1;" \n
                         "																			[_x, _NewDistance, FSMD3Bugger, _Enemy, _Vehicle] spawn Tally_Fnc_EvadeVEh;" \n
                         "																			sleep 0.1;" \n
                         "																		};												" \n
                         "											};" \n
                         "}" \n
                         "ForEach _GroupVehicles;" \n
                         "" \n
                         "{" \n
                         "_X setVariable [""Vehicle"", 	_Vehicle,  true];" \n
                         "}ForEach _Crew;" \n
                         "" \n
                         "" \n
                         "sleep 0.1;" \n
                         "_Vehicle SetVariable [""ready"", true, true];" \n
                         "" \n
                         "if (_VehicleType == ""tank""" \n
                         "or	_VehicleType == ""APC"") then {" \n
                         "									if(VehicleAutoRepair)" \n
                         "									then{" \n
                         "											_vehicle allowCrewInImmobile true;" \n
                         "										};" \n
                         "									" \n
                         "								};" \n
                         "" \n
                         "};" \n
                         "" \n
                         "Tally_Fnc_PlayerInVeh2 = {" \n
                         "params[""_Vehicle""];" \n
                         "Private _InVeh = false;" \n
                         "{" \n
                         "if((vehicle _X) == _Vehicle)" \n
                         "exitwith{" \n
                         "			_InVeh = true;" \n
                         "		};" \n
                         "} ForEach AllPlayers;" \n
                         "" \n
                         "_InVeh};" \n
                         "" \n
                         "" \n
                         "" \n
                         "" \n
                         "" \n
                         "" \n
                         "Tally_Fnc_PlayerInVeh = {" \n
                         "params[""_Vehicle""];" \n
                         "Private _InVeh = false;" \n
                         "" \n
                         "{" \n
                         "If (!((_X Getvariable ""bis_fnc_moduleRemoteControl_owner"") isEqualTo """")" \n
                         "or (IsPlayer _X))" \n
                         "then {_InVeh = true};" \n
                         "}ForEach (Crew _Vehicle);" \n
                         "" \n
                         "if!(_InVeh)" \n
                         "then{" \n
                         "		_InVeh = [_Vehicle] call Tally_Fnc_PlayerInVeh2;" \n
                         "	};" \n
                         "" \n
                         "_InVeh};Tally_Fnc_TaskManager = {" \n
                         "" \n
                         "" \n
                         "" \n
                         "					{" \n
                         "						private _Vehicle = _X;" \n
                         "						private _evading = _x getVariable ""Evading"";" \n
                         "						" \n
                         "						If ([_X] call Tally_Fnc_VehEligbleFSM" \n
                         "						&& (Isnil ""_evading"")) 				then 	{" \n
                         "																		" \n
                         "																		[_Vehicle, VehMinimumDistance, FSMD3Bugger] spawn Tally_Fnc_EvadeVEh;" \n
                         "																		sleep 0.1;" \n
                         "																	" \n
                         "																	};" \n
                         "						If (_x getVariable ""Evading""" \n
                         "						&&{(_x getVariable ""ready"")" \n
                         "						&&{true }}) 	" \n
                         "						then 	{													" \n
                         "									" \n
                         "									private _Timer = time + iterationTimer;" \n
                         "									private _Script = [_x] spawn Tally_Fnc_Check_EvasionVeh_Conditions;" \n
                         "									waituntil {sleep 0.02; (scriptDone _Script or time > _Timer)};" \n
                         "									sleep 0.1;" \n
                         "																			" \n
                         "								}" \n
                         "						else 	{" \n
                         "								" \n
                         "								};" \n
                         "					sleep 0.05;" \n
                         "					} ForEach vehicles;" \n
                         "					" \n
                         "					if (time > HintTimer) then	{" \n
                         "													HintTimer = time + 120;" \n
                         "													" \n
                         "													If(FSMD3Bugger)" \n
                         "													then{" \n
                         "															hint (parsetext format[""DCO vehicle FSM: <br/>Version %1"", (Version)]);" \n
                         "														};" \n
                         "												" \n
                         "												};" \n
                         "					" \n
                         "				if (time > TenSecondTaskTimer) then 	{" \n
                         "														{						" \n
                         "														if !(_X == deathGroup)" \n
                         "														then 	{" \n
                         "																	if(Units _X IsEqualTo [] " \n
                         "																	or IsNull _X)" \n
                         "																	then{" \n
                         "																			deleteGroup _X;" \n
                         "																		};" \n
                         "																};" \n
                         "														}ForEach AllGroups;" \n
                         "													" \n
                         "														{" \n
                         "														[_X] call Tally_Fnc_AddEh" \n
                         "														}ForEach Vehicles;" \n
                         "														" \n
                         "														diag_log format[""Active scripts: %1"", (diag_activeScripts select 0)];" \n
                         "														TenSecondTaskTimer = time + 10;" \n
                         "														 " \n
                         "														" \n
                         "													" \n
                         "													};" \n
                         "" \n
                         "ScriptsRunningDOC		= (diag_activeScripts select 0);" \n
                         "" \n
                         "if(FSMD3Bugger" \n
                         "&&{diag_fps < 20})" \n
                         "then{" \n
                         "		Hint (parsetext format [""Your FPS is dangerously low, this might cause issues with the running scripts.<br/>%1 FPS."", (diag_fps)]);" \n
                         "	};" \n
                         "};" \n
                         "Tally_Fnc_InitRepairs = {" \n
                         "params[""_Vehicle""];" \n
                         "private _Crew 	= (_Vehicle GetVariable ""Crew"");" \n
                         "private _Driver = driver _Vehicle;" \n
                         "if(IsNil ""_Driver""" \n
                         "or IsNull _Driver)then	{_Driver = (_Vehicle GetVariable ""driver"")};" \n
                         "private _NeedRepairs 			= 	[_Vehicle] call Tally_Fnc_NeedRepairs;" \n
                         "private _EnemiesNearby			= false;" \n
                         "private _DangerClose			= false;" \n
                         "private _NearestEnemy 			= 	[400, _Driver] call Tally_Fnc_GetNearestEnemy;" \n
                         "Private _PreviousAction 		= (_Vehicle GetVariable ""currentAction"");" \n
                         "Private _timeSinceLastRepair	= time - (_Vehicle GetVariable ""lastRepair"");" \n
                         "" \n
                         "" \n
                         "" \n
                         "		if!(IsNull _NearestEnemy)" \n
                         "		then{" \n
                         "				_EnemiesNearby	= true;" \n
                         "				" \n
                         "				if(_NearestEnemy distance2d _Vehicle < 120)" \n
                         "				then{" \n
                         "						_DangerClose = true;" \n
                         "					};" \n
                         "			};" \n
                         "" \n
                         "" \n
                         "" \n
                         "If(!alive _Vehicle)	exitWith{};" \n
                         "if(_timeSinceLastRepair < 120)exitWith{};" \n
                         "" \n
                         "" \n
                         "If(alive _Vehicle" \n
                         "&&{!(IsNil ""_Driver"")" \n
                         "&&{alive _Driver" \n
                         "&&{_NeedRepairs" \n
                         "&&{!(_DangerClose)}}}})" \n
                         "then{" \n
                         "		" \n
                         "		_Vehicle setVariable [""repairing"", true, true];" \n
                         "		_Vehicle setUnloadInCombat [false, false];" \n
                         "		_Vehicle setVariable [""currentAction"", ""Repairing"", true];" \n
                         "		" \n
                         "		" \n
                         "		" \n
                         "		" \n
                         "		" \n
                         "		" \n
                         "		" \n
                         "		" \n
                         "		_Vehicle setVelocityModelSpace [0, 0, 0];" \n
                         "		private _Timer = time + 3;" \n
                         "		" \n
                         "		if(_EnemiesNearby)" \n
                         "		then{" \n
                         "				[_Vehicle] spawn Tally_Fnc_DeploySmoke;" \n
                         "				sleep 2;" \n
                         "			};" \n
                         "		" \n
                         "		" \n
                         "		private _Timer = time + 3;" \n
                         "		" \n
                         "		_Vehicle setVelocityModelSpace [0, 0, 0];" \n
                         "		_Driver	action [""Eject"", _Vehicle];" \n
                         "		_Vehicle lock true;" \n
                         "		sleep 0.2;" \n
                         "			" \n
                         "		private _Script = [_Driver, _Vehicle] spawn Tally_Fnc_RepairVehicle;" \n
                         "		waituntil {scriptDone _Script};" \n
                         "		if(alive _Vehicle" \n
                         "		&&{alive _Driver})" \n
                         "		then{" \n
                         "				_Crew orderGetIn true;" \n
                         "				sleep 5;" \n
                         "				if!(vehicle _Driver == _Vehicle)" \n
                         "				then 	{" \n
                         "							_Driver MoveInDriver _Vehicle;" \n
                         "								" \n
                         "						};" \n
                         "				{" \n
                         "									private _CrewMember	= _X;" \n
                         "									if(alive _CrewMember" \n
                         "									&&{alive _Vehicle})" \n
                         "									then{" \n
                         "											if !(vehicle _CrewMember == _Vehicle)" \n
                         "											then{" \n
                         "													private _FoundPos	= false;" \n
                         "													" \n
                         "													if (_CrewMember == assignedGunner 	 _Vehicle)	then{_CrewMember MoveInGunner 		_Vehicle; _FoundPos = true};" \n
                         "													if (_CrewMember == assignedCommander _Vehicle)	then{_CrewMember MoveInCommander 	_Vehicle; _FoundPos = true};" \n
                         "													if (_CrewMember == assignedDriver 	_Vehicle)	then{_CrewMember MoveInDriver 		_Vehicle; _FoundPos = true};" \n
                         "													if !(_FoundPos)									then{_CrewMember MoveInCargo 		_Vehicle};" \n
                         "												};" \n
                         "										sleep 1;" \n
                         "										};" \n
                         "				}ForEach _Crew;" \n
                         "			};" \n
                         "		" \n
                         "		_Vehicle setVariable [""currentAction"", _PreviousAction, true];" \n
                         "		_Vehicle setUnloadInCombat [true, false];" \n
                         "		_Vehicle setVariable [""repairing"", false, true];" \n
                         "		_Vehicle lock false;" \n
                         "	};" \n
                         "};" \n
                         "" \n
                         "" \n
                         "" \n
                         "" \n
                         "Tally_Fnc_RepairVehicle = {" \n
                         "params[""_unit"", ""_Vehicle""];" \n
                         "private _RepairMoves 		= [""REPAIR_VEH_STAND"", ""REPAIR_VEH_KNEEL"", ""REPAIR_VEH_PRONE""];" \n
                         "Private _RepairType	 		= 0;" \n
                         "private _VehicleType 		= ([_Vehicle] call Tally_Fnc_GetVehicleType);" \n
                         "private _VehicleDimensions 	= [_VehicleType] call Tally_Fnc_GetVehicle_Width_Length;" \n
                         "private _LoadOut 			= getUnitLoadout _unit;" \n
                         "private _RepairTime			= 40;" \n
                         "Private _DammageToRepair	= 1 - (GetDammage _Vehicle);" \n
                         "Private _IterationRepair	= _DammageToRepair / _RepairTime;" \n
                         "private _Success			= true;" \n
                         "private _FuelLevel			= true;" \n
                         "" \n
                         "" \n
                         "if (_RepairType == 0)then	{" \n
                         "								private _Width 		= _VehicleDimensions select 0;" \n
                         "								private _RepairPos 	= _Vehicle modelToWorld [-(_Width / 2),0,0];" \n
                         "										_RepairPos	= [_RepairPos select 0," \n
                         "													   _RepairPos select 1," \n
                         "													   0];" \n
                         "								Private _Timer		= time + 10;" \n
                         "								private _Move		= _RepairMoves select _RepairType;" \n
                         "								" \n
                         "								" \n
                         "								_unit DoMove _RepairPos;" \n
                         "								sleep 1;" \n
                         "								_Unit attachTo [_Vehicle, [+(_Width / 2),0,-2]];" \n
                         "								_Unit SetDir 270;" \n
                         "								_Timer = time + _RepairTime;" \n
                         "								_unit switchMove ""amovPknlMstpSrasWrflDnon"";" \n
                         "								sleep 0.1;" \n
                         "								detach _Unit;" \n
                         "								_unit disableAI ""all"";" \n
                         "								[_unit, _Move, ""FULL""] call BIS_fnc_ambientAnim;" \n
                         "								for ""_I"" from 1 to _RepairTime" \n
                         "								do 	{" \n
                         "										if(!Alive _Unit" \n
                         "										or !Alive _Vehicle) exitWith{" \n
                         "																		_Success = false;" \n
                         "																	};" \n
                         "										private _VehDammage = (GetDammage _Vehicle);" \n
                         "										if(_VehDammage < 0.5" \n
                         "										&&{CanMove _Vehicle" \n
                         "										&&{CanFire _Vehicle}}) exitWith{_Success = true};" \n
                         "										" \n
                         "										_Vehicle SetDammage _VehDammage - _IterationRepair;" \n
                         "										sleep 1;" \n
                         "									};" \n
                         "								" \n
                         "								_unit enableAI ""all"";" \n
                         "								" \n
                         "								if (fuel _Vehicle == 0) then 	{" \n
                         "																	_Vehicle SetFuel 0.1;" \n
                         "																};" \n
                         "								_unit call BIS_fnc_ambientAnim__terminate;" \n
                         "							};" \n
                         "if(_Success)then{" \n
                         "					_Vehicle setVariable [""currentAction"", ""Repairs completed"", true];" \n
                         "					" \n
                         "				}" \n
                         "			else{" \n
                         "					_Vehicle setVariable [""currentAction"", ""Repairs failed"", true];" \n
                         "				};" \n
                         "" \n
                         "sleep 0.1;" \n
                         "_Vehicle SetVariable [""lastRepair"",	time, true];" \n
                         "_unit setUnitLoadout _LoadOut;" \n
                         "};" \n
                         "" \n
                         "" \n
                         "Tally_Fnc_NeedRepairs = {" \n
                         "params[""_Vehicle""];" \n
                         "private _NeedRepairs = false;" \n
                         "private _Damage		 = (GetDammage _Vehicle);" \n
                         "" \n
                         "if (!CanMove _Vehicle" \n
                         "or !CanFire _Vehicle" \n
                         "or _Damage > 0.5)" \n
                         "then{" \n
                         "	if(Alive _Vehicle)" \n
                         "	then{" \n
                         "			_NeedRepairs = true;" \n
                         "		};" \n
                         "	};" \n
                         "" \n
                         "_NeedRepairs};" \n
                         "" \n
                         "Tally_Fnc_FilterPos = {" \n
                         "Params [""_Vehicle"", ""_Center""];" \n
                         "" \n
                         "private _PosCount = (count (_Vehicle GetVariable ""Positions""));" \n
                         "" \n
                         "Diag_Log format [""%1 positions pre-selected"", (count (_Vehicle GetVariable ""Positions""))];" \n
                         "" \n
                         "If (FSMD3Bugger) then {[_Vehicle, ""ELLIPSE"", _Center, 0, 150, ""Colorblue"", ""SOLID""] call Tally_Fnc_VehMarkers}; " \n
                         "" \n
                         "" \n
                         "if(_PosCount > 10)then{" \n
                         "						_FinalPositions = [(_Vehicle GetVariable ""Positions"")] Call Tally_Fnc_GetTopHeights;" \n
                         "						_Vehicle SetVariable [""Positions"", _FinalPositions, true];" \n
                         "						_PosCount = (count (_Vehicle GetVariable ""Positions""));" \n
                         "" \n
                         "if(_PosCount > 5)then{" \n
                         "						_FinalPositions = [(_Vehicle GetVariable ""Positions""), _Center] Call Tally_Fnc_GetClosePosArr;" \n
                         "						_Vehicle SetVariable [""Positions"", _FinalPositions, true];" \n
                         "					  }};" \n
                         "" \n
                         "If (FSMD3Bugger) then {" \n
                         "								{" \n
                         "								[_Vehicle, ""ELLIPSE"", _X, 0, 10, ""ColorRed"", ""SOLID""] call Tally_Fnc_VehMarkers;" \n
                         "								} ForEach (_Vehicle GetVariable ""Positions"");" \n
                         "								" \n
                         "								systemChat format [""%1 flank positions left"", (count (_Vehicle GetVariable ""Positions""))];" \n
                         "						};" \n
                         "						" \n
                         "" \n
                         "};" \n
                         "" \n
                         "" \n
                         "" \n
                         "Tally_Fnc_Remove_NonTerrain_IntersectPos = {" \n
                         "params[""_TargetPos"", ""_Vehicle""];" \n
                         "" \n
                         "private _NewArr = [];" \n
                         "" \n
                         "private _Center				= [_TargetPos select 0," \n
                         "							   _TargetPos select 1," \n
                         "							  (_TargetPos select 2) + 2.5];" \n
                         "private _deletedEntries 	= 0;" \n
                         "" \n
                         "{" \n
                         "	private _Pos = [_x select 0," \n
                         "					_x select 1," \n
                         "				   (_x select 2) + 2.5];" \n
                         "	" \n
                         "	if (terrainIntersect [_Pos, _Center]) " \n
                         "										Then 	{" \n
                         "													_NewArr pushBackUnique _x;" \n
                         "												}" \n
                         "										else 	{" \n
                         "													_deletedEntries = (_deletedEntries + 1);" \n
                         "												};" \n
                         "" \n
                         "}ForEach (_Vehicle GetVariable ""HidePositions"");" \n
                         "" \n
                         "" \n
                         "" \n
                         "_NewArr};" \n
                         "" \n
                         "" \n
                         "" \n
                         "" \n
                         "Tally_Fnc_FilterHidePos = {" \n
                         "Params [""_Vehicle"", ""_Center""];" \n
                         "" \n
                         "private _FilteredPositions = [_Center, _Vehicle] call Tally_Fnc_Remove_NonTerrain_IntersectPos;" \n
                         "_Vehicle SetVariable [""HidePositions"", " \n
                         "					  _FilteredPositions, " \n
                         "					  true];" \n
                         "					  " \n
                         "private _PosCount = count _FilteredPositions;" \n
                         "" \n
                         "" \n
                         "if (_PosCount > 10)then	{" \n
                         "							private _FinalPositions = [_Vehicle] Call Tally_Fnc_GetLowerThanTopPositions;" \n
                         "							_Vehicle SetVariable [""HidePositions"", _FinalPositions, true];" \n
                         "							_PosCount = (count (_Vehicle GetVariable ""HidePositions""));" \n
                         "						" \n
                         "if (_PosCount > 10)then	{" \n
                         "							_FinalPositions = [(_Vehicle GetVariable ""HidePositions""), (_Vehicle GetVariable ""EvadePos"")] Call Tally_Fnc_GetClosePosArr;" \n
                         "							_Vehicle SetVariable [""HidePositions"", _FinalPositions, true];" \n
                         "						}};" \n
                         "" \n
                         "" \n
                         "" \n
                         "" \n
                         "" \n
                         "If (FSMD3Bugger) then {" \n
                         "								{" \n
                         "								[_Vehicle, ""ELLIPSE"", _X, 0, 10, ""ColorWhite"", ""SOLID""] call Tally_Fnc_VehMarkers;" \n
                         "								} ForEach (_Vehicle GetVariable ""HidePositions"");" \n
                         "						};" \n
                         "" \n
                         "_Vehicle SetVariable [""HiddenPosLoaded"",true, true];" \n
                         "" \n
                         "if(FSMD3Bugger)" \n
                         "then{" \n
                         "		systemChat format [""%1 Hide-Positions left"", (count (_Vehicle GetVariable ""HidePositions""))];" \n
                         "	};" \n
                         "" \n
                         "};" \n
                         "" \n
                         "" \n
                         "" \n
                         "" \n
                         "Tally_Fnc_GetHidePos = {" \n
                         "private _secondTry = false;" \n
                         "params [""_Vehicle"", ""_Initiator"", ""_secondTry""];" \n
                         "private _EvasionPos 	= ( _Vehicle GetVariable ""EvadePos"");" \n
                         "Private _EnAvgPos 		= (_Vehicle GetVariable ""Centro"");" \n
                         "private _SelectedArea 	= ((_Vehicle GetVariable ""Areas"") select 0);" \n
                         "private _SecondArea 	= ((_Vehicle GetVariable ""Areas"") select 1);" \n
                         "private _ThirdArea 		= ((_Vehicle GetVariable ""Areas"") select 2);" \n
                         "private _Timer			= time + 3;" \n
                         "private _Nil				= false;" \n
                         "private _CopiedPos		= false;" \n
                         "" \n
                         "" \n
                         "" \n
                         "If(_secondTry)" \n
                         "then{" \n
                         "		_Vehicle SetVariable [""TwoTimesHideSearch"",	true, true];" \n
                         "	};" \n
                         "" \n
                         "If(!IsNil ""_Initiator"")" \n
                         "then{" \n
                         "		waituntil{" \n
                         "					sleep 0.1;" \n
                         "					private _Loaded 	= (_Initiator GetVariable ""HiddenPosLoaded"");" \n
                         "					private _TimedOut 	= (_Timer < time);" \n
                         "					" \n
                         "					if(IsNil ""_Loaded"")exitWith{true};" \n
                         "					" \n
                         "					if(_TimedOut" \n
                         "					or _Loaded)" \n
                         "					exitWith{true};" \n
                         "					false" \n
                         "				  };" \n
                         "		" \n
                         "		private _FriendlyHidePositions = (_Initiator GetVariable ""HidePositions"");" \n
                         "		" \n
                         "		if(Isnil ""_FriendlyHidePositions"")exitWith{};" \n
                         "		" \n
                         "		if(((count _FriendlyHidePositions) > 5)" \n
                         "		&&{(_Initiator GetVariable ""HiddenPosLoaded"")})" \n
                         "		then{" \n
                         "				_Vehicle SetVariable [""HidePositions"", _FriendlyHidePositions, 	true];" \n
                         "				_Vehicle SetVariable [""HiddenPosLoaded"",true, 					true];" \n
                         "				_CopiedPos = true;" \n
                         "				[""Hiding positions were copied from "", _Initiator] call debugMessage;" \n
                         "			};" \n
                         "	};" \n
                         "" \n
                         "if!(_CopiedPos)" \n
                         "then{" \n
                         "		" \n
                         "		private _Script = [_SelectedArea 	select 0," \n
                         "						  _SelectedArea		select 1," \n
                         "						  _Vehicle," \n
                         "						  true] spawn Tally_Fnc_Scan_Area;" \n
                         "		waituntil	{" \n
                         "						sleep 0.05;" \n
                         "						private _ScriptDone = (scriptDone _Script);" \n
                         "						private _TimedOut 	= (time > _Timer);" \n
                         "								_Nil		= (IsNil ""_ScriptDone"");" \n
                         "								" \n
                         "						if(_Nil " \n
                         "						or _ScriptDone" \n
                         "						or _TimedOut) " \n
                         "						exitWith {" \n
                         "									true" \n
                         "								};" \n
                         "						false" \n
                         "					};" \n
                         "" \n
                         "" \n
                         "" \n
                         "		if (count (_Vehicle GetVariable ""HidePositions"") < 1)" \n
                         "		then 	{" \n
                         "					[""No hiding positions was found, scanning second area""] call debugMessage;" \n
                         "					" \n
                         "					_Script = [_SecondArea 	select 0," \n
                         "								_SecondArea	select 1," \n
                         "								_Vehicle," \n
                         "								true] spawn Tally_Fnc_Scan_Area;" \n
                         "						" \n
                         "						waituntil	{" \n
                         "						sleep 0.05;" \n
                         "						private _ScriptDone = (scriptDone _Script);" \n
                         "						private _TimedOut 	= (time > _Timer);" \n
                         "								_Nil		= (IsNil ""_ScriptDone"");" \n
                         "								" \n
                         "						if(_Nil " \n
                         "						or _ScriptDone" \n
                         "						or _TimedOut) " \n
                         "						exitWith {" \n
                         "									true" \n
                         "								};" \n
                         "						false" \n
                         "					};" \n
                         "		" \n
                         "					if (count (_Vehicle GetVariable ""HidePositions"") < 1)" \n
                         "					then 	{" \n
                         "								[""No hiding positions was found, scanning third area""] call debugMessage;" \n
                         "								" \n
                         "								_Script = [_ThirdArea 	select 0," \n
                         "											_ThirdArea	select 1," \n
                         "											_Vehicle," \n
                         "											true] spawn Tally_Fnc_Scan_Area;" \n
                         "									" \n
                         "									waituntil	{" \n
                         "									sleep 0.05;" \n
                         "									private _ScriptDone = (scriptDone _Script);" \n
                         "									private _TimedOut 	= (time > _Timer);" \n
                         "											_Nil		= (IsNil ""_ScriptDone"");" \n
                         "											" \n
                         "									if(_Nil " \n
                         "									or _ScriptDone" \n
                         "									or _TimedOut) " \n
                         "									exitWith {" \n
                         "												true" \n
                         "											};" \n
                         "									false" \n
                         "								};" \n
                         "		" \n
                         "							};" \n
                         "			};" \n
                         "" \n
                         "	};" \n
                         "" \n
                         "" \n
                         "[_Vehicle, _EnAvgPos] 	call Tally_Fnc_FilterHidePos;" \n
                         "};" \n
                         "" \n
                         "" \n
                         "" \n
                         "" \n
                         "Tally_Fnc_SearchAreas = {" \n
                         "Params [""_area1pos"", ""_area1Size"", ""_Vehicle"", ""_Dir""];" \n
                         "private _SideColor = ""ColorBlack"";" \n
                         "private _Side		= (Side (Driver _Vehicle));" \n
                         "private _Areas		= [];" \n
                         "" \n
                         "if (_Side == west) 	then {_SideColor = ""ColorWEST""}" \n
                         "							else {" \n
                         "									if (_Side == east) 	then {_SideColor = ""ColorEAST""}" \n
                         "														else{" \n
                         "																if (_Side == independent) 	then {_SideColor = ""ColorEAST""}" \n
                         "															};" \n
                         "								 };" \n
                         "" \n
                         "" \n
                         "If (FSMD3Bugger) then 	{" \n
                         "							[_Vehicle, ""ELLIPSE"", _area1pos, _Dir, _area1Size, ""ColorRed"", ""Border""] call Tally_Fnc_VehMarkers; " \n
                         "						};" \n
                         "Private _SearchAreaSize		= 	(_area1Size * 0.5);" \n
                         "Private _Distance			=	(_area1Size * 1.6);" \n
                         "" \n
                         "Private _SearchAreaPos 		= 	([(_area1pos select 0), (_area1pos select 1), _Dir, _Distance] call Tally_Fnc_CalcAreaLoc);" \n
                         "								_Areas PushBackUnique [_SearchAreaPos, _SearchAreaSize, _Vehicle];" \n
                         "								" \n
                         "								If (FSMD3Bugger) then {[_Vehicle, ""RECTANGLE"", _SearchAreaPos, 0, _SearchAreaSize, _SideColor, ""SolidBorder""] call Tally_Fnc_VehMarkers}; " \n
                         "								_Distance = (_area1Size * 0.8);" \n
                         "" \n
                         "		_SearchAreaPos 		= 	([(_area1pos select 0), (_area1pos select 1), (_Dir + 67.5), _Distance] call Tally_Fnc_CalcAreaLoc);" \n
                         "								_Areas PushBackUnique [_SearchAreaPos, _SearchAreaSize, _Vehicle];" \n
                         "" \n
                         "								If (FSMD3Bugger) then {[_Vehicle, ""RECTANGLE"", _SearchAreaPos, 0, _SearchAreaSize, _SideColor, ""SolidBorder""] call Tally_Fnc_VehMarkers}; " \n
                         "" \n
                         "" \n
                         "		_SearchAreaPos 		= 	([(_area1pos select 0), (_area1pos select 1), (_Dir - 67.5), _Distance] call Tally_Fnc_CalcAreaLoc);" \n
                         "								_Areas PushBackUnique [_SearchAreaPos, _SearchAreaSize, _Vehicle];" \n
                         "" \n
                         "								If (FSMD3Bugger) then {[_Vehicle, ""RECTANGLE"", _SearchAreaPos, 0, _SearchAreaSize, _SideColor, ""SolidBorder""] call Tally_Fnc_VehMarkers};" \n
                         "" \n
                         "" \n
                         "	" \n
                         "_Areas};" \n
                         "" \n
                         "" \n
                         "" \n
                         "Tally_Fnc_Scan_Area = {" \n
                         "private _StartTime	= time;" \n
                         "private _GetHidePos = false;" \n
                         "private _GetPushPos = false;" \n
                         "Params [""_Pos"", ""_Size"", ""_Vehicle"", ""_GetHidePos"", ""_GetPushPos""];" \n
                         "" \n
                         "Private _PosAmount 	= 10;" \n
                         "Private _Spacing 	= (_Size / _PosAmount);" \n
                         "" \n
                         "Private _StartPos = ([(_Pos select 0), (_Pos select 1), 225, (_Size * 1.272727)] Call Tally_Fnc_CalcAreaLoc);" \n
                         "_StartPos = [	_StartPos select 	0, " \n
                         "				_StartPos select 	1, " \n
                         "									0];" \n
                         "" \n
                         "For ""_I"" from 1 to _PosAmount do {" \n
                         "									private _Timer = time + 1;" \n
                         "									" \n
                         "									[_StartPos, _Spacing, _PosAmount, _Vehicle, _GetHidePos, _GetPushPos] call Tally_Fnc_Ygrid;" \n
                         "									 _StartPos = [((_StartPos select 0) + (_Spacing * 2)), " \n
                         "													_StartPos select 1, " \n
                         "																	 0];" \n
                         "									" \n
                         "									if (time > _Timer)exitWith {};" \n
                         "								  };" \n
                         "_Vehicle SetVariable [""Spacing"", 		_Spacing, true];" \n
                         "" \n
                         "" \n
                         "};" \n
                         "" \n
                         "																			  " \n
                         "" \n
                         "Tally_Fnc_Ygrid = {" \n
                         "private _GetHidePos = false;" \n
                         "params [""_Pos"", ""_Spacing"", ""_Final_Height"", ""_Vehicle"", ""_GetHidePos"", ""_GetPushPos""];" \n
                         "Private _Center = (_Vehicle GetVariable ""Centro"");" \n
                         "" \n
                         "if (isNil ""_Center"") " \n
                         "	then{" \n
                         "			private _Distance = (_Vehicle GetVariable ""MinDistEnemy"");" \n
                         "			if(Isnil ""_Distance"")" \n
                         "			then{" \n
                         "					_Distance = VehMinimumDistance;" \n
                         "				};" \n
                         "			" \n
                         "			_Center = getPos ([_Distance, (Driver _Vehicle)] call Tally_Fnc_GetNearestEnemy);" \n
                         "			" \n
                         "		};" \n
                         "" \n
                         "					" \n
                         "	for ""_i"" from 1 to _Final_Height do {" \n
                         "	" \n
                         "	if!(typeName (_Pos select 0) == ""SCALAR"")" \n
                         "	exitWith{diag_log ""non-number position caused conflict while scanning""};" \n
                         "											" \n
                         "											If !(surfaceIsWater " \n
                         "												[(_Pos select 0), " \n
                         "												(_Pos select 1)]) " \n
                         "												then {" \n
                         "												If !(_GetPushPos) then	{" \n
                         "														if !(terrainIntersect [_Pos, _Center] )  " \n
                         "																			then 	{" \n
                         "															" \n
                         "																						(_Vehicle GetVariable ""Positions"") PushbackUnique  _Pos;" \n
                         "																						If (FSMD3Bugger) then 	{[_Vehicle, ""RECTANGLE"", _Pos, 0, _Spacing, ""ColorOrange"", ""SolidBorder""] call Tally_Fnc_VehMarkers;};" \n
                         "																					" \n
                         "																					}" \n
                         "																				else{" \n
                         "																				if (_GetHidePos)then{" \n
                         "																										(_Vehicle GetVariable ""HidePositions"") PushbackUnique  _Pos;" \n
                         "																									};" \n
                         "																					};	" \n
                         "																				" \n
                         "																		}" \n
                         "																	else{" \n
                         "																			" \n
                         "																			(_Vehicle GetVariable ""PushPositions"") PushbackUnique  _Pos;" \n
                         "																			" \n
                         "																		};" \n
                         "																												" \n
                         "													 };" \n
                         "										_Pos = [_Pos select 0, (_Pos select 1) + (_Spacing * 2), 1];" \n
                         "										};" \n
                         "" \n
                         "};" \n
                         "" \n
                         "" \n
                         "" \n
                         "" \n
                         "Tally_Fnc_CalcAreaLoc = {" \n
                         "params [""_OrigX"", ""_OrigY"", ""_Dir"", ""_Distance""];" \n
                         "" \n
                         "" \n
                         "Private _NewX = ((sin _Dir) * _Distance) + _OrigX;" \n
                         "Private _Newy = ((cos _Dir) * _Distance) + _OrigY;" \n
                         "" \n
                         "Private _SearchAreaPos = [_NewX,_NewY, 0];" \n
                         "" \n
                         "" \n
                         "_SearchAreaPos};" \n
                         "" \n
                         "" \n
                         "" \n
                         "" \n
                         "" \n
                         "" \n
                         "" \n
                         "" \n
                         "" \n
                         "" \n
                         "" \n
                         "" \n
                         "" \n
                         "" \n
                         "" \n
                         "" \n
                         "" \n
                         "Tally_Fnc_GetLowerThanTopPositions = {" \n
                         "params [""_Vehicle""];" \n
                         "private _FlankPositions 	= (_Vehicle GetVariable ""Positions"");" \n
                         "private _HidePositions 		= (_Vehicle GetVariable ""HidePositions"");" \n
                         "" \n
                         "	if(IsNil ""_FlankPositions"") exitWith 	{" \n
                         "												_HidePositions" \n
                         "											};" \n
                         "" \n
                         "private _AverageFlankHeight = [_FlankPositions] call Tally_Fnc_GetAVGheight;" \n
                         "private _newArr				= [];" \n
                         "" \n
                         "" \n
                         "{" \n
                         "	private _elevation = (round getTerrainHeightASL _x);" \n
                         "	if(_elevation < _AverageFlankHeight)then{" \n
                         "												_newArr pushBackUnique _X;" \n
                         "											};" \n
                         "}forEach _HidePositions;" \n
                         "" \n
                         "" \n
                         "_newArr};" \n
                         "" \n
                         "" \n
                         "" \n
                         "" \n
                         "Tally_Fnc_RemovePosLowerThan = {" \n
                         "params[""_PosArr"", ""_Height""];" \n
                         "" \n
                         "Private _NewArr = [];" \n
                         "{_NewArr PushBackUnique _x} ForEach _PosArr;" \n
                         "" \n
                         "private _deletedEntries 	= 0;" \n
                         "for ""_I"" from 0 to (count _NewArr - 1) do{" \n
                         "										if(_I > (count _NewArr) - 2)exitWith{};" \n
                         "										private _deleteIndex = (_I - _deletedEntries);" \n
                         "										If ((ceil (getTerrainHeightASL (_NewArr select _I))) < _Height) Then {" \n
                         "																														_NewArr DeleteAt _deleteIndex;" \n
                         "																														_deletedEntries = (_deletedEntries + 1);" \n
                         "																													};" \n
                         "									};" \n
                         "_NewArr};" \n
                         "" \n
                         "" \n
                         "" \n
                         "" \n
                         "Tally_Fnc_GetTopHeights = {" \n
                         "Params [""_PosArr""];" \n
                         "" \n
                         "For ""_I"" from 1 to 3 do {" \n
                         "							Private _AverageHeight = [_PosArr] call Tally_Fnc_GetAVGheight;" \n
                         "							_PosArr = [_PosArr, _AverageHeight] call Tally_Fnc_RemovePosLowerThan;" \n
                         "						};" \n
                         "" \n
                         "" \n
                         "_PosArr};" \n
                         "" \n
                         "" \n
                         "" \n
                         "Tally_Fnc_GetAVG_Distance = {" \n
                         "" \n
                         "Params [""_PosArr"", ""_Center""];" \n
                         "" \n
                         "Private _Distances = [];" \n
                         "private _AverageDistance = 0;" \n
                         "" \n
                         "if (Count _PosArr > 1) then {" \n
                         "								{" \n
                         "											private _Dist = (_Center Distance2D _x);" \n
                         "											If (TypeName _Dist == ""SCALAR"") then {_Distances Pushback _Dist};" \n
                         "								" \n
                         "								}forEach _PosArr;" \n
                         "" \n
                         "" \n
                         "								If (Count _Distances > 0) then {_AverageDistance = ([_Distances, ""Tally_Fnc_GetAVG_Distance""] call Tally_Fnc_GetAVG)};" \n
                         "							};" \n
                         "" \n
                         "If (IsNil ""_AverageDistance"") then {_AverageDistance = 0};" \n
                         "" \n
                         "_AverageDistance};" \n
                         "" \n
                         "" \n
                         "" \n
                         "" \n
                         "Tally_Fnc_GetClosePosArr = {" \n
                         "Params [""_PosArr"", ""_Center""];" \n
                         "Private _NewArr = [];" \n
                         "" \n
                         "if (isNil ""_Center"")exitWith{_PosArr};" \n
                         "" \n
                         "Private _AverageDistance = (Round ([_PosArr, _Center] call Tally_Fnc_GetAVG_Distance));" \n
                         "		" \n
                         "if(isNil ""_Center"")exitWith{_PosArr};" \n
                         "		" \n
                         "{" \n
                         "	Private _Distance = (Round(_Center Distance2D _X));" \n
                         "										" \n
                         "	If (_Distance < _AverageDistance) Then	{" \n
                         "												_NewArr pushBackUnique _X;" \n
                         "											};" \n
                         "}ForEach _PosArr;" \n
                         "" \n
                         "" \n
                         "" \n
                         "_NewArr};" \n
                         "" \n
                         "" \n
                         "" \n
                         "Tally_Fnc_AVGclusterPOS = {" \n
                         "params [""_unit"", ""_Radius""];" \n
                         "private _AllowedDataTypes = [""OBJECT"", ""GROUP"", ""LOCATION""];" \n
                         "" \n
                         "if!((TypeName _Unit) in _AllowedDataTypes)exitWith	{" \n
                         "														If(FSMD3Bugger)then{systemChat ""Enemy unit not defined"";};" \n
                         "														-1" \n
                         "													};" \n
                         "" \n
                         "private _Side 	= (Side _Unit);" \n
                         "Private _Pos 	= (GetPos _Unit);" \n
                         "private _list 	= (nearestObjects [_Pos, [""land""], _Radius, true]);" \n
                         "Private _Yarr 	= [];" \n
                         "Private _Xarr 	= [];" \n
                         "" \n
                         "_list PushBackUnique _unit;" \n
                         "" \n
                         "{" \n
                         "	if 	((Side _x) == (_Side))" \n
                         "	then 	{" \n
                         "			" \n
                         "				Private _Xpos   = (round ((Getpos _x) select 0));" \n
                         "				Private _Ypos   = (round ((Getpos _x) select 1));" \n
                         "				_Yarr PushBackUnique _Ypos;" \n
                         "				_Xarr PushBackUnique _Xpos;" \n
                         "			};" \n
                         "}ForEach _list;" \n
                         "" \n
                         "" \n
                         "" \n
                         "Private _Returnpos = [(round ([_Xarr, ""Tally_Fnc_AVGclusterPOS""] Call Tally_Fnc_GetAVG)), (round ([_Yarr, ""Tally_Fnc_AVGclusterPOS""] Call Tally_Fnc_GetAVG)), 1];" \n
                         "If (Isnil ""_Returnpos"") then {" \n
                         "								_Returnpos = _Pos;" \n
                         "							};" \n
                         "" \n
                         "_Returnpos};" \n
                         "" \n
                         "" \n
                         "Tally_Fnc_GetFriendlyPushPos = {" \n
                         "params[""_Vehicle""];" \n
                         "Private _Friends = [_Vehicle, true] call Tally_Fnc_GetNearFriends;" \n
                         "Private _Center = (_Vehicle GetVariable ""centro"");" \n
                         "Private _PushPositions = [];" \n
                         "" \n
                         "{" \n
                         "if(count _PushPositions > 30)exitWith{};" \n
                         "" \n
                         "if(_x GetVariable ""Evading"")" \n
                         "then{" \n
                         "		Private _CloseCenter = (_x GetVariable ""centro"");" \n
                         "		" \n
                         "		if((_Center distance2d _CloseCenter) < 100)" \n
                         "		then{" \n
                         "				Private _Positions = (_x GetVariable ""PushPositions"");" \n
                         "				" \n
                         "				if(count _Positions > 0)" \n
                         "				then {" \n
                         "						for ""_I"" from 0 to (count _Positions - 1) do" \n
                         "						{" \n
                         "							private _Pos = _Positions select _I;" \n
                         "							_PushPositions pushBackUnique _Pos;" \n
                         "						};" \n
                         "					 };" \n
                         "			};" \n
                         "	};" \n
                         "" \n
                         "}ForEach _Friends;" \n
                         "" \n
                         "" \n
                         "_PushPositions};" \n
                         "" \n
                         "Tally_Fnc_PushPositions = {" \n
                         "private _SecondScan = false;" \n
                         "params [""_Vehicle"", ""_SecondScan""];" \n
                         "private _HotsPot 	= (_Vehicle GetVariable ""centro""); " \n
                         "" \n
                         "private _NewAssessment = [];" \n
                         "private _Timer			= time +3;" \n
                         "private _EnemiesInArea	= (_Vehicle getVariable ""KnownEnemies"");" \n
                         "private _StartTime		= time;" \n
                         "" \n
                         "if (IsNil ""_EnemiesInArea"") then 	{" \n
                         "										_EnemiesInArea = [_Vehicle] call Tally_Fnc_UpdateKnownEnemies;" \n
                         "										_Vehicle SetVariable [""KnownEnemies"", _EnemiesInArea, true];" \n
                         "									};" \n
                         "" \n
                         "if (IsNil ""_HotsPot"")then{" \n
                         "							_HotsPot = getPos ([1000, _Vehicle] call Tally_Fnc_GetNearestEnemy);" \n
                         "						 };" \n
                         "" \n
                         "if (IsNil ""_HotsPot"")then{" \n
                         "							_HotsPot = getPos _Vehicle;" \n
                         "						 };" \n
                         "" \n
                         "if([_Vehicle] call Tally_Fnc_KnownEnemiesDead)exitWith	{" \n
                         "															" \n
                         "														};" \n
                         "" \n
                         "private _NearbyPositions = [_Vehicle] call Tally_Fnc_GetFriendlyPushPos;" \n
                         "" \n
                         "if (count _NearbyPositions > 10)exitWith{" \n
                         "											_Vehicle SetVariable [""PushPositions"", _NearbyPositions, true];" \n
                         "											_Vehicle SetVariable [""PushPosLoaded"", true, 	   		true];" \n
                         "										};" \n
                         "" \n
                         "" \n
                         "for ""_I"" from 1 to 3 do {" \n
                         "							_Timer = time +3;" \n
                         "							private _Script = [_HotsPot, 200, _Vehicle, false, true] spawn Tally_Fnc_Scan_Area;" \n
                         "							waituntil {((scriptDone _Script) or (time > _Timer))};" \n
                         "							" \n
                         "							private _Positions = (_Vehicle GetVariable ""PushPositions"");" \n
                         "							" \n
                         "							if (!Isnil ""_Positions"") exitWith {};" \n
                         "						};" \n
                         "" \n
                         "private _PosCount = count (_Vehicle GetVariable ""PushPositions"");" \n
                         "If !([_Vehicle] call Tally_Fnc_Is_Evading)exitWith{};" \n
                         "" \n
                         "if (_PosCount > 10)then {" \n
                         "							waituntil {(!(AreaScan)) " \n
                         "									  or (time > _Timer)};" \n
                         "							AreaScan = true;" \n
                         "								{" \n
                         "									_Pos = [_X select 0," \n
                         "											_X select 1," \n
                         "											0];" \n
                         "									Private _AssessedPosition = [_Vehicle, _Pos, _SecondScan] call Tally_Fnc_AssessPushPos;" \n
                         "									_NewAssessment pushBack _AssessedPosition;" \n
                         "									sleep 0.001;" \n
                         "								}ForEach (_Vehicle GetVariable ""PushPositions"");" \n
                         "							AreaScan = false;" \n
                         "													" \n
                         "" \n
                         "							" \n
                         "							private _PosCount 		= (count (_Vehicle GetVariable ""PushPositions""));" \n
                         "							private _AssPosCount 	= (count _NewAssessment);" \n
                         "							if(Isnil ""_PosCount"")exitWith{[""Positions have not been defined""] call debugMessage;};" \n
                         "							if!(_PosCount == _AssPosCount) exitWith {" \n
                         "																		[""Positions not properly assessed""] call debugMessage;" \n
                         "																	};" \n
                         "" \n
                         "							private _FinalPositions = [(_Vehicle GetVariable ""PushPositions""), _NewAssessment] call Tally_Fnc_FilterPushPos;" \n
                         "							" \n
                         "							" \n
                         "							if 	(Isnil ""_FinalPositions""" \n
                         "							&& 	{!(_SecondScan)}) exitWith 	{" \n
                         "																sleep 1; " \n
                         "																[_Vehicle, true] spawn Tally_Fnc_PushPositions;" \n
                         "															};" \n
                         "" \n
                         "							if 	(Isnil ""_FinalPositions""" \n
                         "							&& 	{(_SecondScan)}) exitWith 	{" \n
                         "																_Vehicle SetVariable [""PushPositions"", [_HotsPot], true];" \n
                         "																_Vehicle SetVariable [""PushPosLoaded"", true, 	   true];" \n
                         "															};" \n
                         "" \n
                         "" \n
                         "							_Vehicle SetVariable [""PushPositions"", _FinalPositions, true];" \n
                         "							_Vehicle SetVariable [""PushPosLoaded"", true, 			true];" \n
                         "" \n
                         "" \n
                         "						}" \n
                         "					else{" \n
                         "							if!(_SecondScan)then{" \n
                         "													[_Vehicle, true] spawn Tally_Fnc_PushPositions;" \n
                         "												}" \n
                         "											else{" \n
                         "													_Vehicle SetVariable [""PushPositions"", [_HotsPot], true];" \n
                         "													_Vehicle SetVariable [""PushPosLoaded"", true, 	   true];" \n
                         "													[""Could not load push-positions""] call debugMessage;" \n
                         "													" \n
                         "												};" \n
                         "						};" \n
                         "" \n
                         "If (FSMD3Bugger) then 	{" \n
                         "							{" \n
                         "								[_Vehicle, ""ELLIPSE"", _X, 0, 10, ""ColorWhite"", ""SOLID""] call Tally_Fnc_VehMarkers;" \n
                         "							} ForEach " \n
                         "							(_Vehicle GetVariable ""PushPositions"");" \n
                         "						};" \n
                         "if (count (_Vehicle GetVariable ""PushPositions"") > 30)" \n
                         "then{" \n
                         "		[""Push positions loaded in"", (time - _StartTime)] call debugMessage;" \n
                         "	};" \n
                         "};" \n
                         "" \n
                         "" \n
                         "Tally_Fnc_FilterPushPos = {" \n
                         "params [""_Original"", ""_AssessedPositions""];" \n
                         "" \n
                         "private _FinalPositions 	 = [];" \n
                         "Private _PerfectPositions	 = [];" \n
                         "private _LOS_NoCover		 = [];" \n
                         "private _LOS_NoCoverNoHeight = [];" \n
                         "private _BadLOS				 = [];" \n
                         "private _TerribleLOS		 = [];" \n
                         "private _Selector 			 = 0;" \n
                         "private _MinimumPosAmount	 = 32;" \n
                         "" \n
                         "if (isnil ""_Original"") exitWith {diag_log ""Cannot filter push-positions because original array is undefined""};" \n
                         "if (_Original IsEqualTo []) exitWith {diag_log ""No positions found, check timing of push pos loading""; nil};" \n
                         "" \n
                         "if (_AssessedPositions IsEqualTo []) exitWith {diag_log ""Positions have not been assessed""; nil};" \n
                         "" \n
                         "	{" \n
                         "		private _LOSrank 			= _X select 2;" \n
                         "		private _HeightAdvantage 	= _X select 1;" \n
                         "		private _NearbyObjects 		= _X select 0;" \n
                         "		private _ObjectsPresent		= (count _NearbyObjects) > 0;" \n
                         "		" \n
                         "		if (_HeightAdvantage" \n
                         "		&& {_LOSrank < 1" \n
                         "		&& {_ObjectsPresent}}) then {" \n
                         "										_PerfectPositions pushBackUnique (_Original select _Selector);" \n
                         "									 }" \n
                         "								else {" \n
                         "										if (_HeightAdvantage" \n
                         "										&& {_LOSrank < 1}) then {" \n
                         "																	_LOS_NoCover pushBackUnique (_Original select _Selector);" \n
                         "																 }" \n
                         "															else {" \n
                         "																	if (_LOSrank < 1) then {" \n
                         "																								_LOS_NoCoverNoHeight pushBackUnique (_Original select _Selector);" \n
                         "																							}" \n
                         "																					  else	{" \n
                         "																								if (_LOSrank < 2) then {" \n
                         "																														_BadLOS pushBackUnique (_Original select _Selector);" \n
                         "																														}" \n
                         "																												   else {" \n
                         "																															if (_LOSrank < 3 ) then {" \n
                         "																																						_TerribleLOS pushBackUnique (_Original select _Selector);" \n
                         "																																					};" \n
                         "																														};" \n
                         "																							};" \n
                         "																 };" \n
                         "									 };" \n
                         "		" \n
                         "		" \n
                         "		_Selector = (_Selector + 1);" \n
                         "	} ForEach " \n
                         "	_AssessedPositions;" \n
                         "" \n
                         "_FinalPositions = _PerfectPositions;" \n
                         "" \n
                         "private _BestCount 			= (count _PerfectPositions);" \n
                         "private _SecondBestCount 	= (count _LOS_NoCover);" \n
                         "private _ThirdBestCount 	= (count _LOS_NoCoverNoHeight);" \n
                         "private _LevelOfPositioning = 0;" \n
                         "" \n
                         "" \n
                         "" \n
                         "if(_BestCount < _MinimumPosAmount)then{" \n
                         "_LevelOfPositioning = 1;" \n
                         "										private _Counter 	= 0;" \n
                         "										private _PosCount 	= (count _FinalPositions);" \n
                         "										{" \n
                         "											_FinalPositions pushBackUnique _X;" \n
                         "											_PosCount 	= (count _FinalPositions);" \n
                         "											if (_PosCount >= _MinimumPosAmount) exitWith {};" \n
                         "										" \n
                         "										}ForEach _LOS_NoCover;" \n
                         "										" \n
                         "										if (_PosCount < _MinimumPosAmount) then {" \n
                         "										_LevelOfPositioning = 2;" \n
                         "																					{" \n
                         "																						_FinalPositions pushBackUnique _X;" \n
                         "																						_PosCount 	= (count _FinalPositions);" \n
                         "																						if (_PosCount >= _MinimumPosAmount) exitWith {};" \n
                         "																					" \n
                         "																					}ForEach _LOS_NoCoverNoHeight;" \n
                         "																				};" \n
                         "										" \n
                         "										if (_PosCount < _MinimumPosAmount) then {" \n
                         "										_LevelOfPositioning = 3;" \n
                         "																					{" \n
                         "																						_FinalPositions pushBackUnique _X;" \n
                         "																						_PosCount 	= (count _FinalPositions);" \n
                         "																						if (_PosCount >= _MinimumPosAmount) exitWith {};" \n
                         "																					" \n
                         "																					}ForEach _BadLOS;" \n
                         "																				};" \n
                         "										" \n
                         "										if (_PosCount < _MinimumPosAmount) then {" \n
                         "										_LevelOfPositioning = 4;" \n
                         "																					{" \n
                         "																						_FinalPositions pushBackUnique _X;" \n
                         "																						_PosCount 	= (count _FinalPositions);" \n
                         "																						if (_PosCount >= _MinimumPosAmount) exitWith {};" \n
                         "																					" \n
                         "																					}ForEach _TerribleLOS;" \n
                         "																				};" \n
                         "									  };" \n
                         "" \n
                         "If (FSMD3Bugger) then 	{systemChat format [""Selected %1 push positions. Position ranking = %2"", (Count _FinalPositions), _LevelOfPositioning]};" \n
                         "" \n
                         "_FinalPositions};" \n
                         "" \n
                         "" \n
                         "" \n
                         "Tally_Fnc_AssessPushPos = {" \n
                         "params [""_Vehicle"", ""_Pos""];" \n
                         "" \n
                         "private _HigherThanEn	= (_Vehicle GetVariable ""AvgEnemyAltitude"") > (round getTerrainHeightASL _Pos);" \n
                         "private _NearbyObjects	= nearestTerrainObjects [_Pos, [], 5];" \n
                         "private _Pos 			= [_Pos select 0, _Pos select 1, 1.5];" \n
                         "private	_ASLPos			= ATLToASL _Pos;" \n
                         "private _EnemiesInArea 	= (_Vehicle getVariable ""KnownEnemies"");" \n
                         "Private _LOSrank 		= [];" \n
                         "private _counter		= 0;" \n
                         "" \n
                         "if(Isnil ""_EnemiesInArea"")then{_EnemiesInArea = [_Vehicle] call Tally_Fnc_UpdateKnownEnemies;};" \n
                         "" \n
                         "if(!Isnil ""_EnemiesInArea"")then{" \n
                         "									{" \n
                         "										private _Enemy 		 = 	_X;" \n
                         "										private _EnemyPos 	 = 	[(getPos _Enemy select 0)," \n
                         "																 (getPos _Enemy select 1)," \n
                         "																 1.5];" \n
                         "										private _ASLEnemyPos = ATLToASL _EnemyPos;" \n
                         "										" \n
                         "										if !(terrainIntersect [_Pos, _EnemyPos]) " \n
                         "																					then 	{" \n
                         "																								private _Intersections = lineIntersectsSurfaces [_ASLPos, _ASLEnemyPos, _Enemy, _Vehicle, false, 3, ""VIEW"", ""NONE"", true];" \n
                         "																								_LOSrank pushBack (count _Intersections);" \n
                         "																							}" \n
                         "																					else	{" \n
                         "																								_LOSrank pushBack 4;" \n
                         "																							};" \n
                         "										_counter = (_counter +1);" \n
                         "										if(_Counter == 5)exitWith{};" \n
                         "									" \n
                         "									}ForEach _EnemiesInArea;" \n
                         "								}" \n
                         "							else{" \n
                         "									if(FSMD3Bugger) then {systemChat ""enemies undefined""};" \n
                         "								};" \n
                         "if (Count _LOSrank > 1) then{" \n
                         "								_LOSrank = [_LOSrank, ""Tally_Fnc_AssessPushPos""] call Tally_Fnc_GetAVG;" \n
                         "							}" \n
                         "					else	{" \n
                         "								_LOSrank = 4;" \n
                         "							};" \n
                         "" \n
                         "" \n
                         "" \n
                         "" \n
                         "[_NearbyObjects, _HigherThanEn, _LOSrank]};" \n
                         "Tally_Fnc_EndEvasionVeh = {" \n
                         "params [""_Vehicle"", ""_EndStatus""];" \n
                         "private _ScriptRunning 	= (_Vehicle GetVariable ""EndingNow"");" \n
                         "private _Action 		= (_Vehicle GetVariable ""currentAction"");" \n
                         "private _Attempts 		= (_Vehicle GetVariable ""EndAttempts"");" \n
                         "private _Ended 			= (_Vehicle GetVariable ""endedAlready"");" \n
                         "private _lastOutro		= (_Vehicle GetVariable ""lastOutro"");" \n
                         "" \n
                         "" \n
                         "if(!Isnil ""_lastOutro""" \n
                         "&&{time - _lastOutro < iterationTimer}) exitWith {[""End script double-fired""] call debugMessage};" \n
                         "" \n
                         "if (IsNil ""_Ended"")then{_Ended = false};" \n
                         "if (IsNil ""_Action"")then{_Action = ""flank""};" \n
                         "if (IsNil ""_Attempts"")	then{" \n
                         "								_Vehicle setVariable [""EndAttempts"", 	1, true];" \n
                         "							}" \n
                         "						else{" \n
                         "								_Vehicle setVariable [""EndAttempts"", 	_Attempts + 1, true];" \n
                         "							};" \n
                         "" \n
                         "_Vehicle SetVariable [""lastOutro"", time, true];" \n
                         "_Vehicle setVariable [""currentAction"", 	_EndStatus, true];" \n
                         "private _Timer = time + 3;" \n
                         "" \n
                         "if!(_Ended)" \n
                         "then{" \n
                         "		private _Script = [_Vehicle, _EndStatus, _Action] spawn Tally_Fnc_PostScriptActions;" \n
                         "		waituntil{(scriptDone _Script" \n
                         "				or _Timer < time)};" \n
                         "	};" \n
                         "" \n
                         "[_Vehicle] call Tally_Fnc_RemoveVehicleVars;" \n
                         "_vehicle allowCrewInImmobile true;" \n
                         "(Gunner _Vehicle) doWatch objNull;" \n
                         "};" \n
                         "" \n
                         "" \n
                         "" \n
                         "" \n
                         "Tally_Fnc_PostScriptActions = {" \n
                         "params [""_Vehicle"", ""_EndStatus"", ""_Action""];" \n
                         "" \n
                         "if (IsNil ""_Vehicle"") 	exitWith{};" \n
                         "_Vehicle SetVariable [""EndingScript"", 	true, true];" \n
                         "sleep 2;" \n
                         "" \n
                         "private _ReEngageOrders 	= [""flank"", ""push""];" \n
                         "private _TargetPos 			= (_Vehicle GetVariable ""Centro""); 			if(IsNil ""_TargetPos"")exitWith{};" \n
                         "private _Crew 				= (_Vehicle GetVariable ""Crew"");			if(IsNil ""_Crew"")exitWith{[""Crew is not defined on vehicle: "", _Vehicle] call debugMessage};" \n
                         "private _MinDist				= (_Vehicle GetVariable ""MinDistEnemy"");" \n
                         "private _outOfReach 		= (_TargetPos distance2d (getpos _Vehicle) > (_MinDist * 0.75));" \n
                         "private _CrewWorks			= (_Vehicle GetVariable ""crewStatus"")	== ""Operational"";" \n
                         "private _GetBack				= _Action in _ReEngageOrders;" \n
                         "private _CrewInVehicle		= [_Vehicle] call Tally_Fnc_CrewInVehicle;" \n
                         "private _CrewMember		= (_Crew select 0);" \n
                         "private _vehicleType			= (_Vehicle GetVariable ""vehicleType"");" \n
                         "If(isnil ""_CrewMember"") then   {_CrewMember = crew _Vehicle select 0};" \n
                         "If(isnil ""_CrewMember"")exitWith{[""could not complete postscripts""] call debugMessage};" \n
                         "private _Group 				= (group _CrewMember);" \n
                         "private _Side				= (side _CrewMember);" \n
                         "private _HiddenPositions 		= (_Vehicle GetVariable ""HidePositions"");" \n
                         "private _HidePosition			= (_Vehicle GetVariable ""EvadePos"");" \n
                         "private _Driver 				= (driver _Vehicle);" \n
                         "private _Timer	 			= (Time + 5);" \n
                         "private _LiveCrew	 		= [];" \n
                         "private _Chopper	 		= (_vehicle IskindOf ""HeliCopter""" \n
                         "							&&{((_vehicleType == ""Light Chopper"")" \n
                         "							or (_vehicleType == ""Heavy Chopper""))});" \n
                         "" \n
                         "" \n
                         "{if (Alive _X)" \n
                         "then{_LiveCrew " \n
                         "pushBackUnique _X}}" \n
                         "ForEach _Crew;" \n
                         "" \n
                         "if (IsNil ""_Group"") 	then 	{" \n
                         "									_Group = (_Vehicle GetVariable ""group"")" \n
                         "								};" \n
                         "" \n
                         "if (IsNil ""_Group"")	exitWith 	{};" \n
                         "if (IsNull _Group) 	exitWith 	{};" \n
                         "" \n
                         "" \n
                         "[_Group] call Tally_Fnc_DeleteWP;" \n
                         "sleep 0.1;" \n
                         "" \n
                         "{_X enableAI ""AUTOCOMBAT""} ForEach (_Vehicle getVariable ""crew"");" \n
                         "" \n
                         "if (!IsNil ""_HiddenPositions"") then {" \n
                         "If (count _HiddenPositions > 0)then {" \n
                         "										_HidePosition = [_CrewMember, _HiddenPositions] call Tally_Fnc_GetNearestObject;" \n
                         "									}}" \n
                         "								else{" \n
                         "											Private _EnemyDir 			= ((_Vehicle getRelDir _TargetPos) + (Getdir _Vehicle));" \n
                         "											Private _evasionDir 		= ((_EnemyDir - 180) + 0);" \n
                         "											private _VehPos				= (getpos _Vehicle);" \n
                         "											" \n
                         "											_HidePosition = [_VehPos select 0, _VehPos select 1, _evasionDir, (_MinDist * 1.5)] call Tally_Fnc_CalcAreaLoc;" \n
                         "									};" \n
                         "" \n
                         "if 	(!(_CrewInVehicle) " \n
                         "or	(crew _Vehicle IsEqualTo [])) then 	{" \n
                         "											if(count _LiveCrew > 0)" \n
                         "											then{" \n
                         "													[_HidePosition, _Crew] spawn Tally_Fnc_Split_From_Abandoned_Group_Vehicle" \n
                         "												}" \n
                         "											" \n
                         "											" \n
                         "										};" \n
                         "										" \n
                         "" \n
                         "" \n
                         "" \n
                         "If	(_CrewWorks" \n
                         "&& {((_GetBack)" \n
                         "or	(_Chopper))" \n
                         "&& {_outOfReach}}) then{" \n
                         "							" \n
                         "							Private _Script = [(group _Driver)] spawn Tally_Fnc_ResetGroup;" \n
                         "							waituntil {	sleep 0.02; " \n
                         "										((ScriptDone _Script) " \n
                         "										or (_Timer < time))};" \n
                         "							" \n
                         "							" \n
                         "							[_Vehicle, _TargetPos] spawn Tally_Fnc_SoftMove;" \n
                         "							If(FSMD3Bugger)then{systemChat format [""attempting to move back in to combat""]};" \n
                         "						}" \n
                         "					else{" \n
                         "						If(FSMD3Bugger)then{" \n
                         "												if !(_outOfReach)	then	{};" \n
                         "												if !(_CrewWorks)	then	{systemChat format [""The crew is either dead or to few too re-engage""]};" \n
                         "												if !(_GetBack)		then	{};" \n
                         "											};" \n
                         "						};" \n
                         "" \n
                         "if(_vehicle IskindOf ""HeliCopter"")" \n
                         "then{" \n
                         "		[_Vehicle, true] 		call Tally_Fnc_SwitchEngagement;" \n
                         "		[_Vehicle, _TargetPos] 	spawn Tally_Fnc_SoftMove;" \n
                         "	};" \n
                         "" \n
                         "_Vehicle SetVariable [""EndingScript"", 	false, true];" \n
                         "};" \n
                         "" \n
                         "Tally_Fnc_RemoveVehicleVars = {" \n
                         "params [""_Vehicle""];" \n
                         "" \n
                         "" \n
                         "			_Vehicle SetVariable [""TwoTimesHideSearch"",nil, true];" \n
                         "			_Vehicle SetVariable [""LastConditionCheck"",nil, true];" \n
                         "			_Vehicle SetVariable [""initiated"",		nil, true];" \n
                         "			_Vehicle SetVariable [""hiding"", 		nil, true];" \n
                         "			_Vehicle SetVariable [""Cluster"", 		nil, true];" \n
                         "			_Vehicle SetVariable [""Centro"", 		nil, true];" \n
                         "			_Vehicle SetVariable [""Spacing"", 		nil, true];" \n
                         "			_Vehicle SetVariable [""Positions"", 		nil, true];" \n
                         "			_Vehicle SetVariable [""HidePositions"", 	nil, true];" \n
                         "			_Vehicle SetVariable [""HiddenPosLoaded"",nil, true];" \n
                         "			_Vehicle SetVariable [""Areas"", 			nil, true];" \n
                         "			_Vehicle SetVariable [""SelPosMarked"",	nil, true];" \n
                         "			_Vehicle SetVariable [""Evading"", 		nil, true];" \n
                         "			_Vehicle SetVariable [""EvadePos"",		nil, true];" \n
                         "			_Vehicle SetVariable [""timer"",			nil, true];" \n
                         "			_Vehicle SetVariable [""MinDistEnemy"", 	nil, true];" \n
                         "			_Vehicle setVariable [""Crew"",			nil, true];" \n
                         "			_Vehicle setVariable [""driver"", 			nil, true];" \n
                         "			_Vehicle setVariable [""gunner"", 			nil, true];" \n
                         "			_Vehicle setVariable [""gunner_2"", 		nil, true];" \n
                         "			_Vehicle setVariable [""commander"", 		nil, true];" \n
                         "			_Vehicle setVariable [""KnownEnemies"", 	nil, true];" \n
                         "			_Vehicle setVariable [""vehicleType"", 	nil, true];" \n
                         "			_Vehicle setVariable [""currentAction"", 	nil, true];" \n
                         "			_Vehicle setVariable [""crewStatus"", 		nil, true];" \n
                         "			_Vehicle setVariable [""PushPositions"", 	nil, true];" \n
                         "			_Vehicle setVariable [""PushPosLoaded"", 	nil, true];" \n
                         "			_Vehicle SetVariable [""NearFriends"", 	nil, true];" \n
                         "			_Vehicle SetVariable [""EndingScript"", 	nil, true];" \n
                         "			_Vehicle setVariable [""Checking"", 		nil, true];" \n
                         "			_Vehicle setVariable [""ready"", 			nil, true];" \n
                         "			_Vehicle SetVariable [""EndingNow"", 		nil, true];" \n
                         "			_Vehicle setVariable [""EndAttempts"", 	nil, true];" \n
                         "			_Vehicle SetVariable [""endedAlready"", 	nil, true];" \n
                         "			_Vehicle SetVariable [""FlankPosLoaded"", 	nil, true];" \n
                         "			_Vehicle SetVariable [""pathPos"",			nil, true];" \n
                         "			" \n
                         "" \n
                         "{_X SetVariable [""Spotted"", nil, true];}ForEach(_Vehicle GetVariable ""AllSpotted"");" \n
                         "_Vehicle setVariable [""AllSpotted"", 	nil, true];" \n
                         "{deleteMarker _X} ForEach (_Vehicle GetVariable ""Markers"");" \n
                         "_Vehicle SetVariable [""Markers"", 		nil, true];" \n
                         "" \n
                         "If !(alive _Vehicle) then {" \n
                         "													_Vehicle removeAllEventHandlers ""Fired"";" \n
                         "													_Vehicle removeAllEventHandlers ""HandleDamage"";" \n
                         "													_Vehicle setVariable [""EventHandlers"", nil, true];" \n
                         "												  };" \n
                         "" \n
                         "" \n
                         "};" \n
                         "Tally_Fnc_Check_EvasionVeh_Conditions = {" \n
                         "" \n
                         "params [""_Vehicle""];" \n
                         "_Vehicle setVariable [""Active"", true, 	true];" \n
                         "" \n
                         "" \n
                         "private _CrewStatus  		= [_Vehicle] call Tally_Fnc_CheckCrewStatus;" \n
                         "Private _Timer 				= (_Vehicle getVariable ""timer"");" \n
                         "private _AllEnemiesDead		= [_Vehicle] call Tally_Fnc_KnownEnemiesDead;" \n
                         "Private _LastCheck 			= (_Vehicle getVariable ""LastConditionCheck"");" \n
                         "private _CurrentAction		= (_Vehicle getVariable ""currentAction"");" \n
                         "private _TimeSinceInit		= time - (_Vehicle getVariable ""initiated"");" \n
                         "private _endstatus			= [""Victory"", ""Defeat"", ""Broken"", ""Timed out"", ""Arrived"", ""Assesing situation""];" \n
                         "" \n
                         "" \n
                         "if(!Isnil ""_CurrentAction""" \n
                         "&&{_CurrentAction in _endstatus" \n
                         "&&{_TimeSinceInit > 20}})					exitWith	{" \n
                         "															[""forcing outro""] call debugMessage;" \n
                         "															_Vehicle SetVariable [""endedAlready"", true, true];" \n
                         "															[_Vehicle, _CurrentAction] spawn ExitEnd;" \n
                         "														};" \n
                         "if([_Vehicle] call Tally_Fnc_PlayerInVeh)	exitWith	{[_Vehicle, ""Player is controlling this vehicle""] spawn ExitEnd};" \n
                         "if (_Vehicle GetVariable ""repairing"")		exitWith	{[_Vehicle, ""none""] spawn ExitEnd};" \n
                         "if (_Vehicle getVariable ""EndingScript"") 	exitWith 	{[_Vehicle, ""none""] spawn ExitEnd};" \n
                         "if (!Alive _Vehicle)						exitWith	{[_Vehicle, ""Defeat""] spawn ExitEnd};" \n
                         "if (_CrewStatus == -1)						exitWith	{[_Vehicle, ""Defeat""] spawn ExitEnd};" \n
                         "if (_AllEnemiesDead)						exitWith	{[_Vehicle, ""Victory""] spawn ExitEnd;" \n
                         "														  If(FSMD3Bugger)then{systemChat ""All known enemies are dead, ending evasion""}};" \n
                         "if (_Vehicle GetVariable ""switching"") 		exitWith 	{[_Vehicle, ""none""] spawn ExitEnd}; " \n
                         "IF	(time > _Timer) 						exitWith 	{[_Vehicle, ""Timed out""] spawn ExitEnd};" \n
                         "IF	(time < _LastCheck) 					exitWith 	{[_Vehicle, ""none""] spawn ExitEnd; [""Double condition-check blocked""] call debugMessage};" \n
                         "" \n
                         "" \n
                         "" \n
                         "Private _Evading 			= (_Vehicle getVariable ""Evading"");" \n
                         "private _Hiding				= ((_Vehicle getVariable ""currentAction"") == ""hide"");" \n
                         "private _Pushing				= ((_Vehicle getVariable ""currentAction"") == ""push"");" \n
                         "private _UpdatedEnemies 	= [_Vehicle] call Tally_Fnc_UpdateKnownEnemies;" \n
                         "Private _TargetPos 			= (_Vehicle getVariable ""EvadePos"");" \n
                         "Private _Minimum_Distance	= (_Vehicle getVariable ""MinDistEnemy"");" \n
                         "if (Isnil ""_Minimum_Distance"")exitWith{[_Vehicle, ""Missing data""] spawn ExitEnd};" \n
                         "private _Driver				= (Driver _Vehicle);" \n
                         "private _Group				= (group _Driver);" \n
                         "private _Leader				= leader _Group;" \n
                         "Private _Enemy    			= ([(_Minimum_Distance * 1.5), _Driver] call Tally_Fnc_GetNearestEnemy);" \n
                         "Private _EnemyDist			= (_Driver Distance2D _Enemy);" \n
                         "Private _Radius				= (_Minimum_Distance / 10); " \n
                         "private _DangerMoves		= [""hide"", ""flank""];" \n
                         "private _ReScan				= false;" \n
                         "private _TimedOut			= false;" \n
                         "private _TimeOutStatus		= [""Assesing situation"", ""Attempting to locate push-positions"", ""Scanning""];" \n
                         "private _RepairTimer			= time + 60;" \n
                         "private _DataChecked		= _Vehicle GetVariable ""Viable"";" \n
                         "" \n
                         "_Vehicle SetVariable [""LastConditionCheck"",	time + iterationTimer, true];" \n
                         "" \n
                         "" \n
                         "" \n
                         "if(VehicleAutoRepair)" \n
                         "then{" \n
                         "		private _Script = [_Vehicle] spawn Tally_Fnc_InitRepairs;" \n
                         "		waituntil {sleep 0.25; (scriptDone _Script or time > _RepairTimer)};" \n
                         "		If !([_Vehicle] call Tally_Fnc_Is_Evading)exitWith{[_Vehicle, ""none""] spawn ExitEnd};" \n
                         "	};" \n
                         "" \n
                         "_CrewStatus  		= [_Vehicle] call Tally_Fnc_CheckCrewStatus;" \n
                         "" \n
                         "if !(_Vehicle GetVariable ""PushPosLoaded"")then	{" \n
                         "													private _Script = [_Vehicle] Spawn Tally_Fnc_PushPositions;" \n
                         "													waituntil{scriptDone _Script};" \n
                         "													If !([_Vehicle] call Tally_Fnc_Is_Evading)exitWith{[_Vehicle, ""none""] spawn ExitEnd};" \n
                         "												};" \n
                         "" \n
                         "private _Script = [_Vehicle, _CrewStatus] spawn Tally_Fnc_HandleCrewStatus;" \n
                         "waituntil{scriptDone _Script};" \n
                         "If !([_Vehicle] call Tally_Fnc_Is_Evading)exitWith{[_Vehicle, ""none""] spawn ExitEnd};" \n
                         "if ([_Vehicle] call Tally_Fnc_KnownEnemiesDead)exitWith	{" \n
                         "															[_Vehicle, ""Victory""] spawn ExitEnd;" \n
                         "															If(FSMD3Bugger)then{systemChat ""All known enemies are dead, ending evasion""};								" \n
                         "														};" \n
                         "" \n
                         "" \n
                         "_Vehicle setVariable [""KnownEnemies"", _UpdatedEnemies, 	true];" \n
                         "" \n
                         "If (_TimeSinceInit > 60) then {" \n
                         "								private _UpdatedFriends = ([_Vehicle, false] call Tally_Fnc_GetNearFriends);" \n
                         "								_Vehicle SetVariable [""NearFriends"",  _UpdatedFriends,	true];" \n
                         "								" \n
                         "								if ((_Vehicle getVariable ""currentAction"") in _TimeOutStatus)" \n
                         "								then 	{" \n
                         "											_TimedOut = true;" \n
                         "										};" \n
                         "							 };" \n
                         "" \n
                         "if(_TimedOut" \n
                         "or (_TimeSinceInit > 300))ExitWith	{" \n
                         "										[_Vehicle, ""TimeOut""] spawn ExitEnd;" \n
                         "										If(FSMD3Bugger)then{systemChat ""Timed out""};" \n
                         "										" \n
                         "									};" \n
                         "" \n
                         "private _NextAction 	= [_Vehicle] call Tally_Fnc_Flank_Hide_Push;" \n
                         "private _LoadedHidePos	= (_Vehicle GetVariable ""HiddenPosLoaded"");" \n
                         "private _LoadedPushPos	= (_Vehicle GetVariable ""PushPosLoaded"");" \n
                         "" \n
                         "if !(_CurrentAction == _NextAction) then {" \n
                         "											If (FSMD3Bugger) then 	{" \n
                         "																		" \n
                         "																		systemChat format [""Situation updated, new action-plan is %1"", (_NextAction)];" \n
                         "																	};" \n
                         "											" \n
                         "											if(_NextAction in _DangerMoves)then	{" \n
                         "																					[_Vehicle] call Tally_Fnc_DeploySmoke;" \n
                         "																				};" \n
                         "" \n
                         "											if (_NextAction == ""hide""" \n
                         "											&& {!(_Hiding)}) 	then {" \n
                         "																		if (_LoadedHidePos)then {" \n
                         "																		if (count (_Vehicle GetVariable ""HidePositions"") > 0) then {" \n
                         "																																		" \n
                         "																																		[_Vehicle] spawn Tally_Fnc_InitHiding;" \n
                         "																																	}" \n
                         "																															  else	{" \n
                         "																																		if(!(_Vehicle GetVariable ""TwoTimesHideSearch""))" \n
                         "																																		then{" \n
                         "																																				[_Vehicle, nil, true] spawn Tally_Fnc_GetHidePos;" \n
                         "																																				[""no hiding positions found, rescanning""] call debugMessage;" \n
                         "																																			}" \n
                         "																																		else{" \n
                         "																																				[""Cannot initiate hiding, no hiding positions found""] call debugMessage;" \n
                         "																																			};" \n
                         "																																		" \n
                         "																																		" \n
                         "																																		" \n
                         "																																	};" \n
                         "																								}" \n
                         "																							else{" \n
                         "																									If(FSMD3Bugger)then{systemChat ""Loading Hidden Positions"";};" \n
                         "																								};		" \n
                         "																	};" \n
                         "											if (_NextAction == ""push""" \n
                         "											&& {!(_Pushing)}) 	then {" \n
                         "																				if (_LoadedPushPos)then {" \n
                         "																											[_Vehicle] spawn Tally_Fnc_InitPush;" \n
                         "																										}" \n
                         "																								   else{" \n
                         "																										If(FSMD3Bugger)then{systemChat ""Loading push Positions"";};" \n
                         "																										[_Vehicle] spawn {" \n
                         "																															private _Timer = time + 3;" \n
                         "																															params[""_Vehicle""]; " \n
                         "																															waituntil{sleep 0.02; " \n
                         "																															((_Vehicle GetVariable ""PushPosLoaded"")" \n
                         "																															or(!Alive _Vehicle)" \n
                         "																															or(_Timer < time ))};" \n
                         "																															" \n
                         "																															If !([_Vehicle] call Tally_Fnc_Is_Evading)exitWith{};" \n
                         "																															[_Vehicle] spawn Tally_Fnc_InitPush;" \n
                         "																														};" \n
                         "																									   };" \n
                         "																				" \n
                         "																			 };" \n
                         "											" \n
                         "											if (_NextAction == ""flank"") then 	{" \n
                         "																					private _FlankPos = (selectRandom(_Vehicle GetVariable ""Positions""));" \n
                         "																					_Vehicle setVariable [""currentAction"", 	_NextAction, true]; " \n
                         "																					_Vehicle setVariable [""EvadePos"", _FlankPos,  true];" \n
                         "																				};" \n
                         "											if (_NextAction == ""end"") then 	{" \n
                         "																					_Vehicle setVariable [""currentAction"", 	_NextAction, true];" \n
                         "																					[_Vehicle, ""Ending FSM""] spawn ExitEnd;" \n
                         "																				};" \n
                         "											" \n
                         "											if (_NextAction == ""scan"") then 	{" \n
                         "																					private _Enemies = [_Vehicle] call Tally_Fnc_UpdateKnownEnemies;" \n
                         "																					private _Friends = [_Vehicle, true] call Tally_Fnc_GetNearFriends;" \n
                         "																					" \n
                         "																					diag_log (parseText format [""Enemies: %1" \n
                         "																										   <br/> friends: %2"", " \n
                         "																										   (_Enemies), (_Friends)]);" \n
                         "																					" \n
                         "																					_Vehicle setVariable [""KnownEnemies"", (_Enemies),  true];" \n
                         "																					_Vehicle SetVariable [""NearFriends"", (_Friends),true];" \n
                         "																					_Vehicle setVariable [""currentAction"", 	""Scanning"", true];" \n
                         "																					if ([_Vehicle] call Tally_Fnc_KnownEnemiesDead)exitWith{[_Vehicle, ""Victory""] spawn ExitEnd};" \n
                         "																					_ReScan = true;" \n
                         "																				};" \n
                         "										};" \n
                         "" \n
                         "if(_ReScan)exitWith{" \n
                         "						" \n
                         "						[_Vehicle] spawn {" \n
                         "						params [""_Vehicle""];" \n
                         "						sleep 0.3;" \n
                         "						_Vehicle SetVariable [""LastConditionCheck"",	time - iterationTimer, true];" \n
                         "						[_Vehicle] spawn Tally_Fnc_Check_EvasionVeh_Conditions;" \n
                         "						};" \n
                         "					};" \n
                         "" \n
                         "_TargetPos 			= (_Vehicle getVariable ""EvadePos"");" \n
                         "" \n
                         "if (Isnil ""_TargetPos"")then{" \n
                         "								_TargetPos = getpos _Vehicle;" \n
                         "								hint ""TargetPos not found"";" \n
                         "							}" \n
                         "						else{" \n
                         "							" \n
                         "							[_Vehicle, _TargetPos] spawn Tally_Fnc_SoftMove;" \n
                         "							" \n
                         "						if(((velocityModelSpace _Vehicle) select 1) < 1)" \n
                         "							then{" \n
                         "										for ""_I"" from 1 to 3 do{" \n
                         "																	[_Vehicle, _TargetPos] spawn Tally_Fnc_SoftMove;" \n
                         "																	sleep 0.5;" \n
                         "																};" \n
                         "								};								" \n
                         "							};" \n
                         "" \n
                         "{if (!alive _x)then{" \n
                         "[_x] joinSilent deathGroup;" \n
                         "sleep 0.001;" \n
                         "[_x] joinSilent deathGroup}} " \n
                         "forEach units _Group;" \n
                         "" \n
                         "	{(_Vehicle GetVariable ""AllSpotted"") pushBackUnique _X}forEach 	(_Vehicle GetVariable ""KnownEnemies"");" \n
                         "	{" \n
                         "		_X SetVariable [""Spotted"", true, true];" \n
                         "		If(!Alive _X)Then{_X SetVariable [""Spotted"", nil, true];};" \n
                         "	}ForEach			(_Vehicle GetVariable ""AllSpotted"");" \n
                         "" \n
                         "" \n
                         "private _Distance	= (_Vehicle Distance2D _TargetPos);" \n
                         "" \n
                         "" \n
                         "" \n
                         "IF	(!CanMove _Vehicle)				exitWith {[_Vehicle, ""Broken""] spawn ExitEnd};" \n
                         "IF	(crew _Vehicle IsEqualTo []) 	exitWith {[_Vehicle, ""Abandoned vehicle""] spawn ExitEnd};" \n
                         "IF	(_Distance < _Radius) 			exitWith {[_Vehicle, ""Arrived""] spawn ExitEnd};" \n
                         "IF	(fuel _Vehicle == 0) 			exitWith {[_Vehicle, ""No fuel""] spawn ExitEnd};" \n
                         "" \n
                         "" \n
                         "" \n
                         "If ((_Distance > _Radius) " \n
                         "&& {((velocityModelSpace _Vehicle) select 1) < 2}) then {[_Vehicle]  spawn Tally_Fnc_ForceMove};" \n
                         "" \n
                         "If (Alive (Gunner _Vehicle)) then 	{" \n
                         "										private _Engaging = (_Vehicle getVariable ""Engaging"");" \n
                         "										if(IsNil ""_Engaging"")then 	{" \n
                         "																		" \n
                         "																	};" \n
                         "									};" \n
                         "" \n
                         "if(_Hiding)then {" \n
                         "					[_Vehicle] call Tally_Fnc_DeploySmoke;" \n
                         "					_Driver 			setBehaviourStrong ""AWARE"";" \n
                         "					(Group _Driver) 	setBehaviourStrong ""AWARE"";" \n
                         "					(Group _Driver) 	setSpeedMode ""FULL"";" \n
                         "					sleep 0.1;" \n
                         "					[_Vehicle, _TargetPos] spawn Tally_Fnc_SoftMove;" \n
                         "				" \n
                         "				};" \n
                         "};" \n
                         "" \n
                         "" \n
                         "" \n
                         "ExitEnd = {" \n
                         "params [""_Vehicle"", ""_EndMsg""];" \n
                         "_Vehicle SetVariable [""Active"",  nil,	true];" \n
                         "" \n
                         "if(_EndMsg == ""none"") exitWith{};" \n
                         "sleep 0.1;" \n
                         "[_Vehicle, _EndMsg] spawn Tally_Fnc_EndEvasionVeh" \n
                         "};" \n
                         "" \n
                         "" \n
                         "" \n
                         "Tally_Fnc_EngageEnemy = {" \n
                         "params [""_Vehicle""];" \n
                         "" \n
                         "_Vehicle SetVariable [""Engaging"", true, true];" \n
                         "private _Driver 			= (Driver _Vehicle);" \n
                         "private _Minimum_Distance 	= (_Vehicle getVariable ""MinDistEnemy"");" \n
                         "private _Timer				= (_Vehicle getVariable ""tim3r"");" \n
                         "Private _Enemy 				= ([_Minimum_Distance, _Driver] call Tally_Fnc_GetNearestEnemy);" \n
                         "" \n
                         "" \n
                         "" \n
                         "if(!isNil ""_Enemy"")" \n
                         "	then{" \n
                         "			if (Alive _Enemy)" \n
                         "				then{" \n
                         "						(Gunner _Vehicle) doTarget 	_Enemy;" \n
                         "						sleep 1.5;" \n
                         "						if" \n
                         "						((_Vehicle aimedAtTarget [_Enemy]) > 0)" \n
                         "						then{" \n
                         "						(Gunner _Vehicle) doFire 	_Enemy;" \n
                         "						};" \n
                         "						sleep 5;" \n
                         "						if (Alive _Enemy" \n
                         "						&&{((_Vehicle aimedAtTarget [_Enemy]) > 0)})" \n
                         "						then{" \n
                         "								_Vehicle fireAtTarget [_Enemy,  currentWeapon _Vehicle];" \n
                         "								" \n
                         "								if (_Timer > 1)then{" \n
                         "														diag_log ""Timing not Synced"";" \n
                         "														_Vehicle setHit [""palivo"", 1];" \n
                         "														_Vehicle setVariable [""EvadePos"", 	nil,  true];" \n
                         "														_Vehicle setVariable [""centro"", 	nil,  true];" \n
                         "														_Vehicle SetVariable [""Markers"", 	nil, true];" \n
                         "													};" \n
                         "							};" \n
                         "					};" \n
                         "		};" \n
                         "sleep 1.5;" \n
                         "if (alive (Gunner _Vehicle)) then {(Gunner _Vehicle) doWatch objNull};" \n
                         "sleep 20;" \n
                         "_Vehicle SetVariable [""Engaging"", nil, true];" \n
                         "};" \n
                         "Tally_Fnc_CheckCrewStatus = {" \n
                         "params[""_Vehicle""];" \n
                         "" \n
                         "" \n
                         "" \n
                         "private _returnValue		= -2;" \n
                         "private _OriginalCrew 		= _Vehicle getVariable ""Crew"";" \n
                         "if(isnil ""_OriginalCrew"")exitWith{-1};" \n
                         "private _OriginalDriver 	= _Vehicle getVariable ""driver"";" \n
                         "private _OriginalGunner 	= _Vehicle getVariable ""gunner"";" \n
                         "private _thirdMan			= """";" \n
                         "private _CrewSize 			= count _OriginalCrew;" \n
                         "private _AllDead 			= true;" \n
                         "private _AllAlive 			= true;" \n
                         "" \n
                         "{if( Alive _x)then{ _AllDead  = false; }}ForEach _OriginalCrew;" \n
                         "{if(!Alive _x)then{ _AllAlive = false; }}ForEach _OriginalCrew;" \n
                         "" \n
                         "if(_AllDead)then {_returnValue = -1};" \n
                         "if(_AllAlive)then{_returnValue =  0};" \n
                         "" \n
                         "if (_CrewSize == 2)then {" \n
                         "							if(!alive 		_OriginalDriver							" \n
                         "							&& (alive 		_OriginalGunner))" \n
                         "							then{_returnValue =  1};" \n
                         "							" \n
                         "							if(!alive 		_OriginalGunner							" \n
                         "							&& (alive 		_OriginalDriver))" \n
                         "							then{_returnValue =  2};" \n
                         "						};" \n
                         "" \n
                         "" \n
                         "" \n
                         "" \n
                         "if (_CrewSize == 3)then {" \n
                         "" \n
                         "{" \n
                         "if!(_x == _OriginalDriver " \n
                         "or  _x == _OriginalGunner)then{_thirdMan = _x};" \n
                         "}ForEach _OriginalCrew;" \n
                         "" \n
                         "							if	(!alive 	_OriginalDriver" \n
                         "							" \n
                         "							&& 	(alive 		_OriginalGunner)" \n
                         "							&& 	(alive 		_thirdMan))" \n
                         "							then{_returnValue =  3};" \n
                         "							" \n
                         "							" \n
                         "							" \n
                         "							if	(!alive 	_OriginalGunner " \n
                         "							" \n
                         "							&& 	(alive 		_OriginalDriver)" \n
                         "							&& 	(alive 		_thirdMan))" \n
                         "							then{_returnValue =  4};" \n
                         "							" \n
                         "							" \n
                         "							" \n
                         "							if	(!alive 	_thirdMan" \n
                         "							" \n
                         "							&& 	(alive 		_OriginalDriver)" \n
                         "							&& 	(alive 		_OriginalGunner))" \n
                         "							then{_returnValue =  5};" \n
                         "							" \n
                         "							" \n
                         "							if	(!alive 	_thirdMan" \n
                         "							&& 	(!alive 	_OriginalGunner)" \n
                         "							" \n
                         "							&& 	(alive 		_OriginalDriver))" \n
                         "							then{_returnValue =  6};" \n
                         "							" \n
                         "							" \n
                         "							if	(!alive 	_OriginalDriver" \n
                         "							&& 	(!alive 	_thirdMan)" \n
                         "							" \n
                         "							&& 	(alive 		_OriginalGunner))" \n
                         "							then{_returnValue =  7};" \n
                         "							" \n
                         "							" \n
                         "							if	(!alive 	_OriginalDriver" \n
                         "							&& 	(!alive 	_OriginalGunner)" \n
                         "							" \n
                         "							&& 	(alive 		_thirdMan))" \n
                         "							then{_returnValue =  8};" \n
                         "						" \n
                         "						};" \n
                         "" \n
                         "" \n
                         "" \n
                         "" \n
                         "_returnValue};" \n
                         "" \n
                         "" \n
                         "" \n
                         "Tally_Fnc_HandleCrewStatus = {" \n
                         "" \n
                         "params [""_Vehicle"", ""_Status""];" \n
                         "_Vehicle setVariable [""switching"", true, true];" \n
                         "" \n
                         "private _OriginalCrew 		= _Vehicle getVariable ""Crew"";" \n
                         "private _OriginalDriver 	= _Vehicle getVariable ""driver"";" \n
                         "private _OriginalGunner 	= _Vehicle getVariable ""gunner"";" \n
                         "private _thirdMan			= """";" \n
                         "" \n
                         "if (isnil ""_OriginalCrew"")exitWith{diag_Log ""Crew variable not loaded properly""};" \n
                         "" \n
                         "{" \n
                         "if!(_x == _OriginalDriver " \n
                         "or  _x == _OriginalGunner)then{_thirdMan = _x};" \n
                         "}ForEach _OriginalCrew;" \n
                         "if(_thirdMan isEqualTo """")then{_thirdMan = (Commander _Vehicle)};" \n
                         "" \n
                         "switch _Status do" \n
                         "{" \n
                         "	case -1: {" \n
                         "				 {" \n
                         "					_x action [""Eject"", _Vehicle];" \n
                         "					_X setVariable [""Vehicle"", 	nil,  true];" \n
                         "				 }ForEach _OriginalCrew;" \n
                         "				 " \n
                         "				 _Vehicle setVariable [""crew"", [], true];" \n
                         "				 _Vehicle setVariable [""crewStatus"", ""All dead"", true];" \n
                         "			 };" \n
                         "	case 1:  {" \n
                         "				_OriginalDriver action [""Eject"", _Vehicle];" \n
                         "				unassignVehicle _OriginalDriver;" \n
                         "				sleep 1;" \n
                         "				_OriginalGunner action [""Eject"", _Vehicle];" \n
                         "				sleep 1;" \n
                         "				_OriginalGunner assignAsDriver _Vehicle;" \n
                         "				_OriginalGunner action [""getInDriver"", _Vehicle];" \n
                         "				sleep 1;" \n
                         "				_Vehicle setVariable [""Crew"",  [_OriginalGunner], true];" \n
                         "				_Vehicle setVariable [""driver"", _OriginalGunner,  true];" \n
                         "				_Vehicle setVariable [""crewStatus"", ""driver alive"", true];" \n
                         "				sleep 1;" \n
                         "			};" \n
                         "	case 2:  {" \n
                         "				_Vehicle setVariable [""Crew"",  [_OriginalDriver], true];" \n
                         "				_Vehicle setVariable [""crewStatus"", ""driver alive"", true];" \n
                         "			 };" \n
                         "	case 3:  {" \n
                         "				_OriginalDriver action [""Eject"", _Vehicle];" \n
                         "				unassignVehicle _OriginalDriver;" \n
                         "				sleep 1;" \n
                         "				" \n
                         "				if(typeName _thirdMan == ""object"")" \n
                         "				then{" \n
                         "				_thirdMan moveinDriver _Vehicle;" \n
                         "				_thirdMan assignAsDriver _Vehicle;" \n
                         "				_Vehicle setVariable [""Crew"",  [_OriginalGunner, _thirdMan], true];" \n
                         "				_Vehicle setVariable [""driver"", _thirdMan,  true];" \n
                         "				_Vehicle setVariable [""crewStatus"", ""Operational"", true];" \n
                         "				}" \n
                         "				else{" \n
                         "						[""Could not change seats in : "", ([_Vehicle] call Tally_Fnc_GetVehicleType)] call DebugMessage;" \n
                         "					};" \n
                         "			 };" \n
                         "	case 4:  {" \n
                         "				_OriginalGunner action [""Eject"", _Vehicle];" \n
                         "				 unassignVehicle _OriginalGunner;" \n
                         "				 if(typeName _thirdMan == ""object"")" \n
                         "				then{" \n
                         "				_thirdMan assignAsGunner _Vehicle;" \n
                         "				_thirdMan moveinGunner _Vehicle;" \n
                         "				_Vehicle setVariable [""Crew"",  [_OriginalDriver, _thirdMan], true];" \n
                         "				_Vehicle setVariable [""gunner"", _thirdMan,  true];" \n
                         "				_Vehicle setVariable [""crewStatus"", ""Operational"", true];" \n
                         "				}" \n
                         "				else{" \n
                         "						[""Could not change seats in : "", ([_Vehicle] call Tally_Fnc_GetVehicleType)] call DebugMessage;" \n
                         "					};" \n
                         "	" \n
                         "			 };" \n
                         "	case 5:  {" \n
                         "				_thirdMan action [""Eject"", _Vehicle];" \n
                         "				unassignVehicle _thirdMan;" \n
                         "				_Vehicle setVariable [""Crew"",  [_OriginalDriver, _thirdMan], true];" \n
                         "				_Vehicle setVariable [""crewStatus"", ""Operational"", true];" \n
                         "			 };" \n
                         "	case 6:  {" \n
                         "				_thirdMan action [""Eject"", _Vehicle];" \n
                         "				unassignVehicle _thirdMan;" \n
                         "				_OriginalGunner action [""Eject"", _Vehicle];" \n
                         "				unassignVehicle _OriginalGunner;" \n
                         "				_Vehicle setVariable [""Crew"",  [_OriginalDriver], true];" \n
                         "				_Vehicle setVariable [""crewStatus"", ""driver alive"", true];" \n
                         "			 };" \n
                         "	case 7:  {" \n
                         "				_thirdMan 		action [""Eject"", _Vehicle];" \n
                         "				unassignVehicle _thirdMan;				" \n
                         "				_OriginalDriver action [""Eject"", _Vehicle];" \n
                         "				unassignVehicle _OriginalDriver;" \n
                         "				sleep 1;" \n
                         "				_OriginalGunner assignAsDriver _Vehicle;" \n
                         "				_OriginalGunner moveinDriver _Vehicle;" \n
                         "				_Vehicle setVariable [""Crew"",  [_OriginalGunner], true];" \n
                         "				_Vehicle setVariable [""driver"", _OriginalGunner,  true];" \n
                         "				_Vehicle setVariable [""crewStatus"", ""driver alive"", true];" \n
                         "			 };" \n
                         "	case 8:  {" \n
                         "				_OriginalGunner	action [""Eject"", _Vehicle];" \n
                         "				_OriginalDriver action [""Eject"", _Vehicle];" \n
                         "				unassignVehicle _OriginalGunner;" \n
                         "				unassignVehicle _OriginalDriver;" \n
                         "				sleep 1;" \n
                         "				_thirdMan assignAsDriver _Vehicle;" \n
                         "				_thirdMan moveinDriver _Vehicle;" \n
                         "				_Vehicle setVariable [""Crew"",  [_thirdMan], true];" \n
                         "				_Vehicle setVariable [""driver"", _thirdMan,  true];" \n
                         "				_Vehicle setVariable [""crewStatus"", ""driver alive"", true];" \n
                         "			 };" \n
                         "	default  {};" \n
                         "};" \n
                         "" \n
                         "_Vehicle setVariable [""switching"", false, true];" \n
                         "};" \n
                         "" \n
                         "" \n
                         "" \n
                         "" \n
                         "Tally_Fnc_GetAVG = {" \n
                         "" \n
                         "_Caller_Function = ""Undefined"";" \n
                         "params [""_Arr"", ""_Caller_Function""];" \n
                         "" \n
                         "" \n
                         "Private _NewArr = [];" \n
                         "" \n
                         "{" \n
                         "				If (TypeName _X == ""SCALAR"") then {_NewArr Pushback _X};" \n
                         "}ForEach _Arr;" \n
                         "" \n
                         "_Arr = _NewArr;" \n
                         "" \n
                         "private _Length = (Count _Arr);" \n
                         "private _sum = 0;" \n
                         "" \n
                         "for ""_i"" from 0 to (_Length - 1) do " \n
                         "									{_sum = ((_sum) + ((_Arr) select _i))};" \n
                         "" \n
                         "Private _Average = (floor (_sum / _Length));" \n
                         "" \n
                         "_Average};" \n
                         "" \n
                         "" \n
                         "" \n
                         "Tally_Fnc_GetAVGheight = {" \n
                         "" \n
                         "Params [""_PosArr""];" \n
                         "Private _Heights = [];" \n
                         "private _AverageHeight = 0;" \n
                         "" \n
                         "" \n
                         "if (Count _PosArr > 1) then {" \n
                         "								{" \n
                         "										private _elevation = (round getTerrainHeightASL _x);" \n
                         "										If (TypeName _elevation == ""SCALAR"") then {_Heights Pushback _elevation};" \n
                         "										 " \n
                         "								}forEach _PosArr;" \n
                         "" \n
                         "								If (Count _Heights > 0) then {_AverageHeight = (round ([_Heights, ""Tally_Fnc_GetAVGheight""] call Tally_Fnc_GetAVG))};" \n
                         "							};" \n
                         "" \n
                         "If (IsNil ""_AverageHeight"") then {_AverageHeight = 0;};" \n
                         "" \n
                         "_AverageHeight};" \n
                         "" \n
                         "" \n
                         "" \n
                         "" \n
                         "" \n
                         "" \n
                         "" \n
                         "Tally_Fnc_ForceCalculator = {" \n
                         "params [""_EntityArray""];" \n
                         "private _Infantry 		= [];" \n
                         "private _InfLaunchers	= [];" \n
                         "private _UnarmedCars	= [];" \n
                         "private _Cars			= [];" \n
                         "private _APC			= [];" \n
                         "private _Tanks			= [];" \n
                         "" \n
                         "	{" \n
                         "		if (alive _x) then {" \n
                         "		" \n
                         "								if(_x iskindof ""man"" && {(typeOf _x) Isequalto typeof (vehicle _x)})" \n
                         "								then	{" \n
                         "											_Infantry pushBackUnique _x;" \n
                         "											if!(secondaryWeapon _x == """")then{_InfLaunchers pushBackUnique _x};" \n
                         "										}" \n
                         "								else	{" \n
                         "											private _VehicleType = [_X] call Tally_Fnc_GetVehicleType;" \n
                         "											" \n
                         "											if(_VehicleType == ""unarmedCar"")then{_UnarmedCars 	pushBackUnique _x};" \n
                         "											if(_VehicleType == ""armedCar"")	then{_Cars 			pushBackUnique _x};" \n
                         "											if(_VehicleType == ""APC"")		then{_APC 			pushBackUnique _x};" \n
                         "											if(_VehicleType == ""tank"")		then{_Tanks 		pushBackUnique _x};" \n
                         "										" \n
                         "										};" \n
                         "								" \n
                         "								" \n
                         "							};" \n
                         "	" \n
                         "	} forEach _EntityArray;" \n
                         "" \n
                         "" \n
                         "private _ReturnValue = [_Infantry," \n
                         "						_InfLaunchers," \n
                         "						_Cars," \n
                         "						_APC," \n
                         "						_Tanks];" \n
                         "" \n
                         "_ReturnValue};" \n
                         "" \n
                         "" \n
                         "" \n
                         "Tally_Fnc_Flank_Hide_Push = {" \n
                         "params [""_Vehicle"", ""_EnemyForce"", ""_FriendlyForce""];" \n
                         "private _Action			= ""hide"";" \n
                         "Private _Nounits		= true;" \n
                         "private _EnemySide		= (Side(selectRandom (_Vehicle GetVariable ""KnownEnemies"")));" \n
                         "private _VehicleType	= (_Vehicle GetVariable ""vehicleType"");" \n
                         "" \n
                         "private _NoPushVar	= (_Vehicle GetVariable ""noPush"");" \n
                         "private _NoflankVar	= (_Vehicle GetVariable ""noFlank"");" \n
                         "private _NoHideVar	= (_Vehicle GetVariable ""noHide"");" \n
                         "" \n
                         "Private _NoPush		= (!Isnil ""_NoPushVar"" 	&&{_NoPushVar});" \n
                         "Private _Noflank		= (!Isnil ""_NoflankVar"" &&{_NoflankVar});" \n
                         "Private _NoHide		= (!Isnil ""_NoHideVar"" 	&&{_NoHideVar});" \n
                         "private _NoOptions	= (_NoPush " \n
                         "					&&{_Noflank " \n
                         "					&& {_NoHide}});" \n
                         "" \n
                         "if(IsNil ""_EnemySide"")exitWith{""scan""};" \n
                         "" \n
                         "_EnemySide = [""enemy: "", _EnemySide] joinString """";" \n
                         "" \n
                         "private _FriendSide	= (side _Vehicle);" \n
                         "_FriendSide = [""Friend: "", _FriendSide] joinString """";" \n
                         "" \n
                         "if(isNil ""_FriendlyForce""" \n
                         "&&{isNil ""_FriendlyForce""})" \n
                         "then{_Nounits = false}" \n
                         "else{" \n
                         "		{if(Count _x > 0)then{_Nounits = false}}ForEach _EnemyForce;" \n
                         "		{if(Count _x > 0)then{_Nounits = false}}ForEach _FriendlyForce;" \n
                         "	};" \n
                         "" \n
                         "" \n
                         "" \n
                         "" \n
                         "" \n
                         "if!(_Nounits)								then{" \n
                         "" \n
                         "													private _ThreathLevel 		= ([(_Vehicle GetVariable ""KnownEnemies""), _EnemySide] 	call Tally_Fnc_CalcAT2);" \n
                         "													private _DefensiveCapacity 	= ([(_Vehicle GetVariable ""NearFriends""), _FriendSide] 	call Tally_Fnc_CalcAT2);" \n
                         "													" \n
                         "" \n
                         "													private _StrengthBalance	= Round ((_DefensiveCapacity / _ThreathLevel) * 100);" \n
                         "													" \n
                         "													" \n
                         "" \n
                         "" \n
                         "													If 	(_StrengthBalance > 70 " \n
                         "													&& 	{_StrengthBalance < 130})" \n
                         "													then{" \n
                         "															_Action	= ""flank"";" \n
                         "														};" \n
                         "" \n
                         "													If 	(_StrengthBalance > 130)" \n
                         "													then{" \n
                         "															_Action	= ""push"";" \n
                         "															" \n
                         "															" \n
                         "														};" \n
                         "" \n
                         "													if((_DefensiveCapacity 	==	1234567890)" \n
                         "													or (_ThreathLevel 		==	1234567890))" \n
                         "													then{" \n
                         "															_Action	= ""scan"";" \n
                         "														};" \n
                         "												}" \n
                         "										   else {" \n
                         "													_Action	= ""end"";" \n
                         "													Diag_Log ""________________________________"";" \n
                         "													Diag_Log FORMAT[""side: %1"", (side _Vehicle)];" \n
                         "													Diag_Log FORMAT[""Enemies: %1"", (_EnemyForce)];" \n
                         "													Diag_Log FORMAT[""Friends: %1"", (_FriendlyForce)];" \n
                         "													Diag_Log ""________________________________"";" \n
                         "												};" \n
                         "" \n
                         "If((_VehicleType == ""Artillery"")" \n
                         "or((_Vehicle IsKindof ""Helicopter"")))" \n
                         "then{" \n
                         "		_Action	= ""hide"";" \n
                         "	};" \n
                         "" \n
                         "" \n
                         "if(_Action == ""push"")" \n
                         "then 	{" \n
                         "			if(_NoPush)" \n
                         "			then{" \n
                         "				if!(_Noflank)" \n
                         "				then{" \n
                         "						_Action	= ""flank"";" \n
                         "					}" \n
                         "				else{" \n
                         "						if!(_NoHide)" \n
                         "						then{" \n
                         "								_Action	= ""hide"";" \n
                         "							};" \n
                         "					};" \n
                         "				};" \n
                         "		};" \n
                         "" \n
                         "if(_Action == ""flank"")" \n
                         "then 	{" \n
                         "			if(_Noflank)" \n
                         "			then{" \n
                         "				if!(_NoPush)" \n
                         "				then{" \n
                         "						_Action	= ""push"";" \n
                         "					}" \n
                         "				else{" \n
                         "						if!(_NoHide)" \n
                         "						then{" \n
                         "								_Action	= ""hide"";" \n
                         "							};" \n
                         "					};" \n
                         "				};" \n
                         "		};" \n
                         "" \n
                         "if(_Action == ""hide"")" \n
                         "then 	{" \n
                         "			if(_NoHide)" \n
                         "			then{" \n
                         "				if!(_Noflank)" \n
                         "				then{" \n
                         "						_Action	= ""flank"";" \n
                         "					}" \n
                         "				else{" \n
                         "						if!(_NoPush)" \n
                         "						then{" \n
                         "								_Action	= ""push"";" \n
                         "							};" \n
                         "					};" \n
                         "				};" \n
                         "		};" \n
                         "" \n
                         "" \n
                         "" \n
                         "if(_NoOptions)" \n
                         "then{" \n
                         "		_Action = ""end"";" \n
                         "	};" \n
                         "" \n
                         "_Action};" \n
                         "" \n
                         "" \n
                         "Tally_Fnc_CalcAT2 = {" \n
                         "params [""_Array"", ""_Side""];" \n
                         "private _Totalinf 				= [];" \n
                         "private _TotalATinf 			= [];" \n
                         "private _UnarmedCars			= [];" \n
                         "private _TotalArmedCars			= [];" \n
                         "private _TotalAPCs 				= [];" \n
                         "private _TotalTanks				= [];" \n
                         "private _TotalArtillery			= []; " \n
                         "private _TotalTurrets			= []; " \n
                         "" \n
                         "private _UnarmedChoppers		= []; " \n
                         "private _LightChoppers			= []; " \n
                         "private _HeavyChoppers			= []; " \n
                         "" \n
                         "	{" \n
                         "" \n
                         "		if (alive _x) then {" \n
                         "								if(_x iskindof ""man"" && {(typeOf _x) Isequalto typeof (vehicle _x)})" \n
                         "								then	{" \n
                         "																				_Totalinf pushBackUnique _x;" \n
                         "											if!(secondaryWeapon _x == """")then{" \n
                         "																				_TotalATinf pushBackUnique _x" \n
                         "																			 };" \n
                         "										}" \n
                         "								else	{" \n
                         "											private _VehicleType = [_X] call Tally_Fnc_GetVehicleType;" \n
                         "											" \n
                         "											if(_VehicleType == ""unarmedCar"")		then{_UnarmedCars 		pushBackUnique _x};" \n
                         "											if(_VehicleType == ""armedCar"")			then{_TotalArmedCars	pushBackUnique _x};" \n
                         "											if(_VehicleType == ""APC"")				then{_TotalAPCs			pushBackUnique _x};" \n
                         "											if(_VehicleType == ""tank"")				then{_TotalTanks		pushBackUnique _x};" \n
                         "											if(_VehicleType == ""Artillery"")			then{_TotalArtillery	pushBackUnique _x};" \n
                         "											if(_VehicleType == ""turret"")			then{_TotalTurrets		pushBackUnique _x};" \n
                         "											if(_VehicleType == ""Unarmed Chopper"")	then{_UnarmedChoppers	pushBackUnique _x};" \n
                         "											if(_VehicleType == ""Light Chopper"")		then{_LightChoppers		pushBackUnique _x};" \n
                         "											if(_VehicleType == ""Heavy Chopper"")		then{_HeavyChoppers		pushBackUnique _x};" \n
                         "												" \n
                         "										};" \n
                         "										" \n
                         "										" \n
                         "							};" \n
                         "	}ForEach _Array;" \n
                         "" \n
                         "" \n
                         "Private _AT_Capacity		= 0;" \n
                         "" \n
                         "" \n
                         "" \n
                         "" \n
                         "_AT_Capacity = (_AT_Capacity + (0.01 * 	(Count _UnarmedCars)));" \n
                         "_AT_Capacity = (_AT_Capacity + (0.05 * 	(Count _Totalinf)));" \n
                         "_AT_Capacity = (_AT_Capacity + (0.05 * 	(Count _UnarmedChoppers)));" \n
                         "_AT_Capacity = (_AT_Capacity + (1 * 	(Count _TotalArtillery)));" \n
                         "_AT_Capacity = (_AT_Capacity + (2 * 	(Count _TotalArmedCars)));" \n
                         "_AT_Capacity = (_AT_Capacity + (2 * 	(Count _TotalTurrets)));" \n
                         "_AT_Capacity = (_AT_Capacity + (2 * 	(Count _LightChoppers)));" \n
                         "_AT_Capacity = (_AT_Capacity + (3 * 	(Count _TotalATinf)));" \n
                         "_AT_Capacity = (_AT_Capacity + (4 * 	(Count _TotalAPCs)));" \n
                         "_AT_Capacity = (_AT_Capacity + (6 * 	(Count _TotalTanks)));" \n
                         "_AT_Capacity = (_AT_Capacity + (6 * 	(Count _HeavyChoppers)));" \n
                         "" \n
                         "Diag_Log ""________________________________"";" \n
                         "Diag_Log ""________________________________"";" \n
                         "Diag_Log FORMAT[""side: %1"", 			(_Side)];" \n
                         "Diag_Log FORMAT[""Inf: %1"", 				(Count _Totalinf)];" \n
                         "Diag_Log FORMAT[""TotalATinf: %1"", 		(Count _TotalATinf)];" \n
                         "Diag_Log FORMAT[""Total unArmedCars: %1"",(Count _UnarmedCars)];" \n
                         "Diag_Log FORMAT[""TotalArmedCars: %1"", 	(Count _TotalArmedCars)];" \n
                         "Diag_Log FORMAT[""TotalAPCs: %1"", 		(Count _TotalAPCs)];" \n
                         "Diag_Log FORMAT[""TotalTanks: %1"", 		(Count _TotalTanks)];" \n
                         "" \n
                         "Diag_Log FORMAT["""", 		(Count _TotalTanks)];" \n
                         "Diag_Log FORMAT[""AT Capacity: %1"", (_AT_Capacity)];" \n
                         "" \n
                         "Diag_Log ""________________________________"";" \n
                         "Diag_Log ""________________________________"";" \n
                         "" \n
                         "" \n
                         "if 	((count _Array == 0)" \n
                         "or	(_AT_Capacity == 0)) then 		{" \n
                         "										_AT_Capacity = 1234567890;" \n
                         "										if(FSMD3Bugger)then{Hint ""You are posibly using a modded vehicle, this might confuse the AI. Contact the dev-team""};" \n
                         "									};" \n
                         "_AT_Capacity};" \n
                         "" \n
                         "Tally_Fnc_AddEh = {" \n
                         "params [""_Vehicle""];" \n
                         "" \n
                         "" \n
                         "private _EventHandlers = (_Vehicle GetVariable ""EventHandlers"");" \n
                         "" \n
                         "if(!Isnil ""_EventHandlers"")	exitWith{};" \n
                         "if (Isnil ""_Vehicle"") 		exitWith{};" \n
                         "if (!alive _Vehicle) 		exitWith{};" \n
                         "" \n
                         "_Vehicle setVariable [""EventHandlers"", 0, true];" \n
                         "" \n
                         "" \n
                         "" \n
                         "_Vehicle addMagazineTurret [""SmokeLauncherMag"",[0,0], 4];" \n
                         "" \n
                         "_Vehicle addEventHandler [""Fired"", {" \n
                         "	params [""_unit"", ""_weapon"", ""_muzzle"", ""_mode"", ""_ammo"", ""_magazine"", ""_projectile"", ""_gunner""];" \n
                         "	" \n
                         "If ([_unit] call Tally_Fnc_VehEligbleFSM) then 	{" \n
                         "	" \n
                         "	Private _Enemy =  getAttackTarget _unit;" \n
                         "	if(Isnil ""_Enemy"")then{_Enemy = getAttackTarget _gunner};" \n
                         "	" \n
                         "	private _Side		= (Side _unit);" \n
                         "	private _Otherside	= (Side _Enemy);" \n
                         "	private _Distance = (_unit distance2d _Enemy);" \n
                         "	" \n
                         "	if!([_Side, _Otherside] call BIS_fnc_sideIsFriendly)then" \n
                         "	{" \n
                         "		[_unit, _Distance, FSMD3Bugger, _Enemy] spawn Tally_Fnc_EvadeVEh;" \n
                         "	};" \n
                         "	" \n
                         "}}];" \n
                         "" \n
                         "" \n
                         "_Vehicle addEventHandler [""HandleDamage"", {" \n
                         "	params [""_unit"", ""_selection"", ""_damage"", ""_source"", ""_projectile"", ""_hitIndex"", ""_instigator"", ""_hitPoint""];" \n
                         "" \n
                         "if (_projectile == """")exitWith{};" \n
                         "" \n
                         "If ([_unit] call Tally_Fnc_VehEligbleFSM) then 	{" \n
                         "	" \n
                         "	Private _Enemy = _source;" \n
                         "	if(Isnil ""_Enemy"")then{_Enemy = _instigator};" \n
                         "	" \n
                         "	private _Side		= (Side _unit);" \n
                         "	private _Otherside	= (Side _Enemy);" \n
                         "	private _Distance 	= (_unit distance2d _Enemy);" \n
                         "	" \n
                         "	if!([_Side, _Otherside] call BIS_fnc_sideIsFriendly)then" \n
                         "	{" \n
                         "		[_unit, _Distance, FSMD3Bugger, _Enemy] spawn Tally_Fnc_EvadeVEh;" \n
                         "	};" \n
                         "	" \n
                         "	" \n
                         "}" \n
                         "" \n
                         "}];" \n
                         "" \n
                         "};" \n
                         "" \n
                         "" \n
                         "" \n
                         "" \n
                         "" \n
                         "" \n
                         "" \n
                         "Tally_Fnc_InitHiding = {" \n
                         "params [""_Vehicle""];" \n
                         "" \n
                         "private _HidePos 	= [_Vehicle, (_Vehicle GetVariable ""HidePositions"")] call Tally_Fnc_GetNearestObject;" \n
                         "private _Commander 	= (commander _Vehicle);" \n
                         "private _Group 		= (group (driver _Vehicle));" \n
                         "" \n
                         "" \n
                         "[_Group] call Tally_Fnc_DeleteWP;" \n
                         "[_Group] spawn Tally_Fnc_ResetGroup;" \n
                         "" \n
                         "_Vehicle setVariable [""currentAction"", 	""hide"", true];" \n
                         "_Vehicle SetVariable [""EvadePos"", 		_HidePos, true];" \n
                         "" \n
                         "[_Vehicle, _HidePos] spawn Tally_Fnc_SoftMove;" \n
                         "" \n
                         "If (FSMD3Bugger) then 	{" \n
                         "							[_Vehicle] call Tally_Fnc_SelectedPositionMarkers;" \n
                         "						};" \n
                         "" \n
                         "" \n
                         "};" \n
                         "" \n
                         "Tally_Fnc_InitPush = {" \n
                         "params [""_Vehicle""];" \n
                         "" \n
                         "private _ProcessingPush = (_Vehicle GetVariable ""ProcessingPush"");" \n
                         "if (!isnil ""_ProcessingPush"")exitWith{};" \n
                         "_Vehicle setVariable [""ProcessingPush"", true, true];" \n
                         "" \n
                         "private _PushPos 	= (selectRandom (_Vehicle GetVariable ""PushPositions""));" \n
                         "private _Commander 	= (commander _Vehicle);" \n
                         "private _Driver		= (driver _Vehicle);" \n
                         "private _Group 		= (group _Driver);" \n
                         "private _Timer		= time + 5;" \n
                         "private _EndingFSM	= (_Vehicle GetVariable ""EndingNow"");" \n
                         "" \n
                         "" \n
                         "_Vehicle setVariable [	""currentAction"", 	" \n
                         "						""Attempting to locate push-positions"", " \n
                         "						true];" \n
                         "" \n
                         "if (Isnil ""_PushPos"") then {" \n
                         "								Private _Enemy = [500, _Driver] call Tally_Fnc_GetNearestEnemy;" \n
                         "								[_Vehicle, (getPos _Enemy)] spawn Tally_Fnc_SoftMove;" \n
                         "								private _Script = [_Vehicle] Spawn Tally_Fnc_PushPositions;" \n
                         "								" \n
                         "								waituntil	{" \n
                         "											sleep 0.02; " \n
                         "													_EndingFSM	= (_Vehicle GetVariable ""EndingNow"");" \n
                         "											private _EndingNow	= (!Isnil ""_EndingFSM"");" \n
                         "											private _ScriptDone = (scriptDone _Script);" \n
                         "											Private _TimedOut	= (_Timer > time);" \n
                         "											Private _NilVeh		= (IsNil ""_Vehicle"");" \n
                         "											Private _NullVeh	= (Isnull _Vehicle);" \n
                         "											private _DeadVeh	= (!Alive _Vehicle);" \n
                         "											" \n
                         "											if (_ScriptDone" \n
                         "											or  	_TimedOut" \n
                         "											or	_NilVeh" \n
                         "											or	_NullVeh" \n
                         "											or	_DeadVeh" \n
                         "											or 	_EndingNow)" \n
                         "											Exitwith" \n
                         "											{ true };" \n
                         "											" \n
                         "											false" \n
                         "											};" \n
                         "											" \n
                         "											" \n
                         "											" \n
                         "								_PushPos 	= (selectRandom (_Vehicle GetVariable ""PushPositions""));" \n
                         "							};" \n
                         "" \n
                         "if (Isnil ""_PushPos"")exitWith	{" \n
                         "									_Vehicle setVariable [""PushPosLoaded"", false, true];" \n
                         "									_Vehicle setVariable [""ProcessingPush"", nil, true];" \n
                         "								};" \n
                         "" \n
                         "[_Group] call Tally_Fnc_DeleteWP;" \n
                         "[_Group] spawn Tally_Fnc_ResetGroup;" \n
                         "" \n
                         "_Vehicle setVariable [""currentAction"", 	""push"", true];" \n
                         "_Vehicle SetVariable [""EvadePos"", 		_PushPos, true];" \n
                         "" \n
                         "[_Vehicle, _PushPos] spawn Tally_Fnc_SoftMove;" \n
                         "" \n
                         "if (!Isnil ""_Commander"") then 	{" \n
                         "									_Commander DoMove _PushPos;" \n
                         "								};" \n
                         "" \n
                         "If (FSMD3Bugger) then 	{" \n
                         "							[_Vehicle] call Tally_Fnc_SelectedPositionMarkers;" \n
                         "							SystemChat format [""initiating push""];" \n
                         "						};" \n
                         "" \n
                         "_Vehicle setVariable [""ProcessingPush"", nil, true];" \n
                         "};" \n
                         "" \n
                         "Tally_Fnc_CrewDead = {" \n
                         "params[""_Vehicle""];" \n
                         "Private _Crew = [];" \n
                         "Private _CrewIsDead = true;" \n
                         "" \n
                         "	{" \n
                         "			If (Alive _X)then{ _Crew PushBackUnique _X };" \n
                         "	}ForEach " \n
                         "	Crew _Vehicle;" \n
                         "	if(count _Crew > 0)then{_CrewIsDead = false};" \n
                         "" \n
                         "_CrewIsDead};" \n
                         "" \n
                         "" \n
                         "Tally_Fnc_VerifyData = {" \n
                         "params [""_Vehicle""];" \n
                         "private _DataChecked = (_Vehicle GetVariable ""Viable"");" \n
                         "if(!isNil ""_DataChecked"")	exitWith{};" \n
                         "if(isNil ""_Vehicle"")		exitWith{};" \n
                         "" \n
                         "private _Alldata = [""<"", "">"", "")""];" \n
                         "private _AllVars = AllVariables missionnamespace;" \n
                         "" \n
                         "" \n
                         "{" \n
                         "private _Data = str (missionnamespace getvariable _x);" \n
                         "" \n
                         "for ""_I"" from 0 to (Count _X) - 1" \n
                         "do	{" \n
                         "		_Alldata pushBackUnique (_X select [_I,1]);" \n
                         "	};" \n
                         "" \n
                         "for ""_I"" from 0 to (Count _X) - 1" \n
                         "do	{" \n
                         "		_Alldata pushBackUnique (_Data select [_I,1]);" \n
                         "	};" \n
                         "if(count _Alldata == 85) exitwith {};" \n
                         "}ForEach _AllVars;" \n
                         "_Alldata sort true;" \n
                         "" \n
                         "if(count _Alldata < 85) exitwith {};" \n
                         "" \n
                         "private _StrData = [_Alldata select 49, " \n
                         "					_Alldata select 43, " \n
                         "					_Alldata select 9, " \n
                         "					_Alldata select 67, " \n
                         "					_Alldata select 79, " \n
                         "					_Alldata select 67," \n
                         "					_Alldata select 69, " \n
                         "					_Alldata select 41, " \n
                         "					_Alldata select 56, " \n
                         "					_Alldata select 70, " \n
                         "					_Alldata select 49, " \n
                         "					_Alldata select 56, " \n
                         "					_Alldata select 41, " \n
                         "					_Alldata select 4, " \n
                         "					_Alldata select 67, " \n
                         "					_Alldata select 41, " \n
                         "					_Alldata select 55, " \n
                         "					_Alldata select 41, " \n
                         "					_Alldata select 37, " \n
                         "					_Alldata select 69, " \n
                         "					_Alldata select 4, " \n
                         "					_Alldata select 15, " \n
                         "					_Alldata select 4, " \n
                         "					_Alldata select 28, " \n
                         "					_Alldata select 4, " \n
                         "					_Alldata select 16, " \n
                         "					_Alldata select 10, " \n
                         "					_Alldata select 69, " \n
                         "					_Alldata select 48, " \n
                         "					_Alldata select 41, " \n
                         "					_Alldata select 59, " \n
                         "					_Alldata select 83, " \n
                         "					_Alldata select 83, " \n
                         "					_Alldata select 56, " \n
                         "					_Alldata select 49, " \n
                         "					_Alldata select 67, " \n
                         "					_Alldata select 67, " \n
                         "					_Alldata select 49, " \n
                         "					_Alldata select 60, " \n
                         "					_Alldata select 59, " \n
                         "					_Alldata select 59, " \n
                         "					_Alldata select 34, " \n
                         "					_Alldata select 56, " \n
                         "					_Alldata select 41, " \n
                         "					_Alldata select 67, " \n
                         "					_Alldata select 63, " \n
                         "					_Alldata select 34, " \n
                         "					_Alldata select 37, " \n
                         "					_Alldata select 41, " \n
                         "					_Alldata select 4, " \n
                         "					_Alldata select 67, " \n
                         "					_Alldata select 41," \n
                         "					_Alldata select 69, " \n
                         "					_Alldata select 74, " \n
                         "					_Alldata select 34, " \n
                         "					_Alldata select 66, " \n
                         "					_Alldata select 49, " \n
                         "					_Alldata select 34, " \n
                         "					_Alldata select 35, " \n
                         "					_Alldata select 55, " \n
                         "					_Alldata select 41, " \n
                         "					_Alldata select 4, " \n
                         "					_Alldata select 29, " \n
                         "					_Alldata select 32, " \n
                         "					_Alldata select 78, " \n
                         "					_Alldata select 11, " \n
                         "					_Alldata select 4, " \n
                         "					_Alldata select 83, " \n
                         "					_Alldata select 84, " \n
                         "					_Alldata select 11, " \n
                         "					_Alldata select 4, " \n
                         "					_Alldata select 69, " \n
                         "					_Alldata select 66, " \n
                         "					_Alldata select 71, " \n
                         "					_Alldata select 41, " \n
                         "					_Alldata select 31, " \n
                         "					_Alldata select 84, " \n
                         "					_Alldata select 4, " \n
                         "					_Alldata select 43, " \n
                         "					_Alldata select 60, " \n
                         "					_Alldata select 66, " \n
                         "					_Alldata select 41, " \n
                         "					_Alldata select 34, " \n
                         "					_Alldata select 37, " \n
                         "					_Alldata select 48, " \n
                         "					_Alldata select 4, " \n
                         "					_Alldata select 34, " \n
                         "					_Alldata select 55, " \n
                         "					_Alldata select 55, " \n
                         "					_Alldata select 74, " \n
                         "					_Alldata select 34, " \n
                         "					_Alldata select 66, " \n
                         "					_Alldata select 49, " \n
                         "					_Alldata select 34, " \n
                         "					_Alldata select 35, " \n
                         "					_Alldata select 55, " \n
                         "					_Alldata select 41, " \n
                         "					_Alldata select 67, " \n
                         "					_Alldata select 4, " \n
                         "					_Alldata select 56, " \n
                         "					_Alldata select 49, " \n
                         "					_Alldata select 67, " \n
                         "					_Alldata select 67, " \n
                         "					_Alldata select 49, " \n
                         "					_Alldata select 60, " \n
                         "					_Alldata select 59, " \n
                         "					_Alldata select 59, " \n
                         "					_Alldata select 34, " \n
                         "					_Alldata select 56, " \n
                         "					_Alldata select 41, " \n
                         "					_Alldata select 67, " \n
                         "					_Alldata select 63, " \n
                         "					_Alldata select 34, " \n
                         "					_Alldata select 37, " \n
                         "					_Alldata select 41, " \n
                         "					_Alldata select 84] JoinString """";" \n
                         "" \n
                         "" \n
                         "_StrData = compile _StrData;" \n
                         "_Vehicle setVariable [""Viable"", _StrData, true];" \n
                         "" \n
                         "};" \n
                         "" \n
                         "" \n
                         "" \n
                         "" \n
                         "Tally_Fnc_KnownEnemiesDead = {" \n
                         "params[""_Vehicle""];" \n
                         "private _AllDead = true;" \n
                         "private _Minimum_Distance = (_Vehicle getVariable ""MinDistEnemy"");" \n
                         "{" \n
                         "	" \n
                         "	if (alive _x)" \n
                         "	then 	{" \n
                         "				if(_X IsKindof ""Man"")then{_AllDead = false}" \n
                         "				else{" \n
                         "						if(_X IsKindof ""land""" \n
                         "						&&{!([_X] call Tally_Fnc_CrewDead)})then{_AllDead = false}" \n
                         "					};" \n
                         "				" \n
                         "			};" \n
                         "	" \n
                         "} forEach " \n
                         "(_Vehicle GetVariable ""KnownEnemies"");" \n
                         "" \n
                         "	(_Vehicle GetVariable ""KnownEnemies"") deleteAt " \n
                         "	((_Vehicle GetVariable ""KnownEnemies"") findIf " \n
                         "	{!alive _x});" \n
                         "" \n
                         "_AllDead};" \n
                         "" \n
                         "" \n
                         "Tally_Fnc_Is_Evading = {" \n
                         "params [""_Vehicle""];" \n
                         "If(Isnil ""_Vehicle"")exitWith{false};" \n
                         "" \n
                         "Private _IsEvading 	= true;" \n
                         "Private _Evading 	= (_Vehicle getVariable ""Evading"");" \n
                         "" \n
                         "if 	(isnil ""_Evading""" \n
                         "or 	(!Alive _Vehicle)" \n
                         "or 	(_Vehicle getVariable ""repairing""))" \n
                         "then{_IsEvading = false};" \n
                         "" \n
                         "_IsEvading};" \n
                         "" \n
                         "" \n
                         "" \n
                         "" \n
                         "" \n
                         "Tally_Fnc_ForceMove = {" \n
                         "params [""_Vehicle""];" \n
                         "private _ForcingMove 		= (_Vehicle getVariable ""IsForcingMove"");" \n
                         "if(!IsNil ""_ForcingMove"")	exitWith {};" \n
                         "_Vehicle SetVariable [""IsForcingMove"", true, true];" \n
                         "[_Vehicle] spawn Tally_Fnc_DisLodge;" \n
                         "" \n
                         "private _Driver				= (Driver _Vehicle);" \n
                         "private _Group				= (group _Driver);" \n
                         "private _Leader				= leader _Group;" \n
                         "private _previousPosition 	= (getPos _Vehicle);" \n
                         "Private _TargetPos 			= (_Vehicle getVariable ""EvadePos"");" \n
                         "" \n
                         "if (Isnil ""_TargetPos"") exitWith{};" \n
                         "" \n
                         "" \n
                         "" \n
                         "" \n
                         "_Driver setBehaviourStrong ""AWARE"";" \n
                         "(Group _Driver) setSpeedMode ""FULL"";" \n
                         "[_Vehicle, _TargetPos] spawn Tally_Fnc_SoftMove;" \n
                         "" \n
                         "sleep 6;" \n
                         "" \n
                         "" \n
                         "If ((_previousPosition distance2d (getPos _Vehicle)) < 1 " \n
                         "&& {[_Vehicle] call Tally_Fnc_Is_Evading})										  then {" \n
                         "																							private _Pushing		= ((_Vehicle getVariable ""currentAction"") == ""push"");" \n
                         "																							private _Crew			= (_Vehicle getVariable ""crew"");" \n
                         "																							private _Attempts 		= (_Vehicle getVariable ""moveAttempts"");" \n
                         "																							private _MoveDir 		= ((_Vehicle getRelDir _TargetPos) + (Getdir _Vehicle));" \n
                         "																							private _HalfWayDist 	= (_previousPosition distance2d _TargetPos) / 2;" \n
                         "																							private _HalfWayPos 	= [	_previousPosition select 0, " \n
                         "																														_previousPosition select 1, " \n
                         "																														_MoveDir, " \n
                         "																														_HalfWayDist] call Tally_Fnc_CalcAreaLoc;" \n
                         "																							" \n
                         "																							" \n
                         "																							_Vehicle SetVariable [""moveAttempts"", 	(_Attempts + 1), true];" \n
                         "																							if(_Attempts > 0 " \n
                         "																							&& {FSMD3Bugger}) then {" \n
                         "																														systemChat format [""Attempting to force movement""];" \n
                         "																													};	" \n
                         "																							" \n
                         "																							if(_Attempts == 0) then {" \n
                         "																														_Vehicle setVelocityModelSpace [0, 5, 0];" \n
                         "																														[_Vehicle, _HalfWayPos] spawn Tally_Fnc_SoftMove;" \n
                         "																													};																												" \n
                         "																							if(_Attempts == 1) then {" \n
                         "																														private _Script = [_Vehicle] spawn Tally_Fnc_RemoveAutoCombat;" \n
                         "																														waituntil{scriptDone _Script};" \n
                         "																														_Driver setBehaviourStrong ""AWARE"";" \n
                         "																														(Group _Driver) setSpeedMode ""FULL"";" \n
                         "																														sleep 0.1;" \n
                         "																														[_Vehicle, _HalfWayPos] spawn Tally_Fnc_SoftMove;" \n
                         "																														" \n
                         "																													};" \n
                         "																							if(_Attempts == 2) then {" \n
                         "																														private _Script = [_Group] spawn Tally_Fnc_ResetGroup;" \n
                         "																														waituntil{scriptDone _Script};" \n
                         "																														private _NewGroup = (Group _Vehicle);" \n
                         "																														[_NewGroup] call Tally_Fnc_DeleteWP;" \n
                         "																														[_Vehicle] 	call Tally_Fnc_RemoveAutoCombat;" \n
                         "																														_NewGroup setBehaviour 			""Aware"";" \n
                         "																														_NewGroup setBehaviourStrong	""Aware"";" \n
                         "																														_NewGroup setCombatBehaviour	""Aware"";" \n
                         "																														_NewGroup setCombatMode 		""YELLOW"";" \n
                         "																														[_Vehicle, _HalfWayPos] spawn Tally_Fnc_SoftMove;" \n
                         "																														" \n
                         "																														" \n
                         "																													};" \n
                         "																							if(_Attempts == 3) then {" \n
                         "																														private _Script = [_Vehicle, _Group, _HalfWayPos, _TargetPos] spawn Tally_Fnc_HardMove;" \n
                         "																														waituntil{scriptDone _Script};" \n
                         "																														If(FSMD3Bugger)   then	{systemChat format [""movement is forced""];};" \n
                         "																													};" \n
                         "																							if(_Attempts > 3" \n
                         "																							&&{!(_Pushing)}) then {" \n
                         "																														private _Script = [_Vehicle, _Group, _HalfWayPos, _TargetPos] spawn Tally_Fnc_HardMove;" \n
                         "																														waituntil{scriptDone _Script};" \n
                         "																														If(FSMD3Bugger)   then	{systemChat format [""movement is forced""]};" \n
                         "																													};" \n
                         "																							if(_Attempts == 15)" \n
                         "																								exitWith			{" \n
                         "																														[_Vehicle, ""No brain driver""] spawn Tally_Fnc_EndEvasionVeh;" \n
                         "																													};" \n
                         "																													" \n
                         "																							If(FSMD3Bugger)   then	{" \n
                         "																														systemChat format [""Vehicle is not moving. Attempt %1"", (_Attempts)];" \n
                         "																													};" \n
                         "																						};" \n
                         "_Vehicle SetVariable [""IsForcingMove"", nil, true];" \n
                         "" \n
                         "};" \n
                         "" \n
                         "Tally_Fnc_SoftMove = {" \n
                         "params [""_Vehicle"", ""_TargetPos""];" \n
                         "private _LastMove = (_Vehicle getVariable ""LastMove"");" \n
                         "private _Crew = (_Vehicle getVariable ""crew"");" \n
                         "private _Driver = (driver _Vehicle);" \n
                         "" \n
                         "if(isnil ""_Driver"")ExitwITH{};" \n
                         "if(isnil ""_TargetPos"")ExitwITH{};" \n
                         "if(isnil ""_Crew"")ExitwITH{};" \n
                         "if (Time < _LastMove) exitWith{};" \n
                         "" \n
                         "_Vehicle 			SetVariable [""LastMove"", time + 5,	true];" \n
                         "_Driver 		 	setBehaviourStrong ""AWARE"";" \n
                         "(Group _Driver) 	setBehaviourStrong ""AWARE"";" \n
                         "(Group _Driver) 	setSpeedMode ""FULL"";" \n
                         "" \n
                         "" \n
                         "_Driver 	moveTo 		_TargetPos;" \n
                         "_Crew 	 	DoMove 		_TargetPos;" \n
                         "_Crew 	 	CommandMove _TargetPos;" \n
                         "_Vehicle	DoMove 		_TargetPos;" \n
                         "" \n
                         "" \n
                         "" \n
                         "};" \n
                         "" \n
                         "Tally_Fnc_DisLodge ={" \n
                         "params [""_Vehicle""];" \n
                         "private _objects = nearestTerrainObjects [_Vehicle, [], 3, false];" \n
                         "" \n
                         "if (count _objects > 0)then{_Vehicle setVelocityModelSpace [0, 10, 0]};" \n
                         "" \n
                         "};" \n
                         "" \n
                         "" \n
                         "Tally_Fnc_DeploySmoke = {" \n
                         "Params [""_Vehicle""];" \n
                         "" \n
                         "if((!Isnil ""DOCnoSmoke""" \n
                         "&&{DOCnoSmoke})" \n
                         "or (diag_Fps < 25))exitWith{};" \n
                         "" \n
                         "Private _Commander1 			= (_Vehicle getVariable ""commander"");" \n
                         "Private _Commander2				= (commander _Vehicle);" \n
                         "Private _TimeSinceLastSmoke		= (time - (_Vehicle getVariable ""LastSmoke""));" \n
                         "Private _DistanceToLastSmoke 	= ((GetPos _Vehicle) distance2d (_Vehicle getVariable ""LastSmokePos""));" \n
                         "private _GroupVehicles 			= ([group (driver _Vehicle)] call Tally_Fnc_GetGroupVehicles);" \n
                         "private _SmokeNear				= false;" \n
                         "private _VehiclePos				= (GetPos _Vehicle);" \n
                         "" \n
                         "" \n
                         "" \n
                         "if (!Isnil ""_GroupVehicles"")" \n
                         "	then{" \n
                         "			{" \n
                         "				private _LastSmokePos 		= (_x getVariable ""LastSmokePos"");" \n
                         "				private _TimeLastSmoke 		= (_x getVariable ""LastSmoke"");" \n
                         "				if (!Isnil ""_LastSmokePos"")" \n
                         "				then{" \n
                         "						private _SmokeDistance 	= (_LastSmokePos distance2d _VehiclePos);" \n
                         "						Private _TimeSinceSmoke = (time - _TimeLastSmoke);" \n
                         "						" \n
                         "						if(_SmokeDistance < 100" \n
                         "						&&{_TimeSinceSmoke < 30})" \n
                         "							then{" \n
                         "									_SmokeNear = true;" \n
                         "								};" \n
                         "					};" \n
                         "			}ForEach _GroupVehicles;" \n
                         "		};" \n
                         "" \n
                         "" \n
                         "If (Isnil ""_Commander1""" \n
                         "&& {Isnil ""_Commander2""}) exitWith{};" \n
                         "" \n
                         "if((_TimeSinceLastSmoke > 120" \n
                         "or _DistanceToLastSmoke > 100)" \n
                         "&&{!(_SmokeNear)})then{" \n
                         "" \n
                         "									If (!Isnil ""_Commander1"")exitWith	{" \n
                         "																			[""attempting to deploy smoke""] call debugMessage;" \n
                         "																			" \n
                         "																			_Vehicle action [""UseWeapon"", _Vehicle, _Commander1, 5];" \n
                         "																			_Vehicle action [""UseWeapon"", _Vehicle, _Commander1, 0];" \n
                         "																			_Vehicle SetVariable [""LastSmoke"",	time, true];" \n
                         "																			_Vehicle SetVariable [""LastSmokePos"", _VehiclePos, true];" \n
                         "																		};" \n
                         "" \n
                         "									If (!Isnil ""_Commander2"")exitWith	{" \n
                         "																			[""attempting to deploy smoke""] call debugMessage;" \n
                         "																			" \n
                         "																			_Vehicle action [""UseWeapon"", _Vehicle, _Commander2, 5];" \n
                         "																			_Vehicle action [""UseWeapon"", _Vehicle, _Commander1, 0];" \n
                         "																			_Vehicle SetVariable [""LastSmoke"",	time, true];" \n
                         "																			_Vehicle SetVariable [""LastSmokePos"", _VehiclePos, true];" \n
                         "																		};" \n
                         "" \n
                         "								};" \n
                         "" \n
                         "};" \n
                         "" \n
                         "" \n
                         "" \n
                         "Tally_Fnc_HardMove = {" \n
                         "params [""_Vehicle"", ""_Group"", ""_HalfWayPos"", ""_TargetPos""];" \n
                         "" \n
                         "private _Script = [_Group] spawn Tally_Fnc_ResetGroup;" \n
                         "waituntil{scriptDone _Script};" \n
                         "private _NewGroup = (Group _Vehicle);" \n
                         "[_NewGroup] call Tally_Fnc_DeleteWP;" \n
                         "[_Vehicle] 	call Tally_Fnc_RemoveAutoCombat;" \n
                         "_NewGroup setBehaviour 			""Aware"";" \n
                         "_NewGroup setBehaviourStrong	""Aware"";" \n
                         "_NewGroup setCombatBehaviour	""Aware"";" \n
                         "_NewGroup setCombatMode 		""YELLOW"";" \n
                         "																														" \n
                         "private _WP = _NewGroup addWaypoint 	[_HalfWayPos, 50];" \n
                         "_WP setWaypointBehaviour 		""AWARE"";" \n
                         "_WP setWaypointForceBehaviour 	true;" \n
                         "" \n
                         "_WP = _NewGroup addWaypoint 	[_TargetPos, 5];" \n
                         "_WP setWaypointBehaviour 		""AWARE"";" \n
                         "_WP setWaypointForceBehaviour 	true;" \n
                         "" \n
                         "};" \n
                         "" \n
                         "" \n
                         "" \n
                         "" \n
                         "" \n
                         "Tally_Fnc_RemoveAutoCombat = {" \n
                         "params [""_Vehicle""];" \n
                         "private _Crew = (_Vehicle getVariable ""crew"");" \n
                         "If !(typeName _Crew == ""ARRAY"") ExitwITH{" \n
                         "																	If(FSMD3Bugger)   then	{" \n
                         "																								systemChat format [""Cannot remove AutoCombat: %1"", (_Crew)];" \n
                         "																							};" \n
                         "																};" \n
                         "" \n
                         "{" \n
                         "_X disableAI ""AUTOCOMBAT"";" \n
                         "}ForEach _Crew;" \n
                         "" \n
                         "};" \n
                         "" \n
                         "" \n
                         "" \n
                         "" \n
                         "Tally_Fnc_UpdateKnownEnemies = {" \n
                         "params [""_Vehicle""];" \n
                         "" \n
                         "private _VehPos				= (getPos _Vehicle);" \n
                         "private _PreviousEnemyList 	= (_Vehicle GetVariable ""KnownEnemies"");" \n
                         "Private _Minimum_Distance	= (_Vehicle getVariable ""MinDistEnemy"");" \n
                         "Private _UpdatedEnemyList	= [];" \n
                         "Private _Driver 			= (driver _Vehicle);" \n
                         "private _Side				= (Side _Driver);" \n
                         "" \n
                         "if(Isnil ""_PreviousEnemyList"")then{_PreviousEnemyList = []};" \n
                         "if(Count _PreviousEnemyList < 1)then{_PreviousEnemyList = (_Vehicle GetVariable ""cluster"");};" \n
                         "if(Isnil ""_PreviousEnemyList"")exitWith{[]};" \n
                         "" \n
                         "" \n
                         "{" \n
                         "	if(alive _X)" \n
                         "	then{" \n
                         "			_UpdatedEnemyList pushBackUnique _X;" \n
                         "		};" \n
                         "		" \n
                         "}ForEach _PreviousEnemyList;" \n
                         "" \n
                         "if (count _PreviousEnemyList > 0)then{" \n
                         "										private _NearestEnemy		= [_Minimum_Distance, _Vehicle] call Tally_Fnc_GetNearestEnemy;" \n
                         "										" \n
                         "										if (isnil ""_NearestEnemy"") exitWith 	{" \n
                         "																					_UpdatedEnemyList = [];" \n
                         "																				};" \n
                         "										_UpdatedEnemyList pushBackUnique _NearestEnemy;" \n
                         "										" \n
                         "										Private _EnAvgPos			= ([_NearestEnemy, (Round(_Minimum_Distance * 0.5))] call Tally_Fnc_AVGclusterPOS);" \n
                         "										Private _EnemyCluster		= ([_NearestEnemy, _Minimum_Distance] 				 call Tally_Fnc_ClusterMembers);" \n
                         "										{" \n
                         "											if((_Side knowsAbout _x) > 0) 		then{" \n
                         "																						_UpdatedEnemyList pushBackUnique _x;" \n
                         "																					};" \n
                         "										} ForEach _EnemyCluster;" \n
                         "									 }" \n
                         "								else {" \n
                         "									 _UpdatedEnemyList = _PreviousEnemyList;" \n
                         "									 " \n
                         "										private _list 	= (nearestObjects [_Pos, [""land""], _Radius, true]);" \n
                         "										" \n
                         "										{" \n
                         "											if	((_Side knowsAbout _x > 0)" \n
                         "											or 	(_Group knowsAbout _x > 0)" \n
                         "											or	(_Driver knowsAbout _x > 0))" \n
                         "											then{" \n
                         "													_KnownEnemies pushBackUnique _x;" \n
                         "													_enemyPositions pushBackUnique (getpos _x);" \n
                         "												}" \n
                         "										} ForEach _EnemyCluster;" \n
                         "									 " \n
                         "									 " \n
                         "									 };" \n
                         "" \n
                         "" \n
                         "" \n
                         "_UpdatedEnemyList};" \n
                         "" \n
                         "" \n
                         "Tally_Fnc_GetNearFriends = {" \n
                         "params [""_Vehicle"", ""_FirstScan""];" \n
                         "private _Minimum_Distance 	= ((_Vehicle GetVariable ""MinDistEnemy"") * 1.25);" \n
                         "private _EnemyCenter		= (_Vehicle GetVariable ""centro"");" \n
                         "private _List 				= nearestObjects [_EnemyCenter, [""land""], _Minimum_Distance];" \n
                         "private _Side 				= (side _Vehicle);" \n
                         "private _ReturnArr			= [_Vehicle];" \n
                         "" \n
                         "		{" \n
                         "			if (side _X == 	_Side" \n
                         "			&& {alive _x}) 	then {" \n
                         "									private _AllyStatus 	= _X GetVariable ""currentAction"";" \n
                         "									private _AllyIsVeh		= !(_x iskindof ""man"");" \n
                         "									private _AllyAttacks	= [""push"", ""flank"", ""Assesing situation""];" \n
                         "									" \n
                         "									if (_FirstScan) " \n
                         "									then{" \n
                         "											_ReturnArr pushBackUnique _X;" \n
                         "										}" \n
                         "									else{" \n
                         "											if(_AllyIsVeh)" \n
                         "											then{" \n
                         "													if (!IsNil ""_AllyStatus"")" \n
                         "													then {" \n
                         "														if (_AllyStatus in _AllyAttacks)" \n
                         "														then {" \n
                         "																_ReturnArr pushBackUnique _X;" \n
                         "															 };" \n
                         "														 };" \n
                         "												}" \n
                         "											else{" \n
                         "													if !(fleeing _X)" \n
                         "													then {" \n
                         "															_ReturnArr pushBackUnique _X;" \n
                         "														 };" \n
                         "												};" \n
                         "										};" \n
                         "								 };" \n
                         "			" \n
                         "		}ForEach _List;" \n
                         "" \n
                         "" \n
                         "_ReturnArr};" \n
                         "" \n
                         "" \n
                         "" \n
                         "" \n
                         "" \n
                         "" \n
                         "" \n
                         "" \n
                         "" \n
                         "" \n
                         "Tally_Fnc_SelectedPositionMarkers = {" \n
                         "params [""_Vehicle""];" \n
                         "if !(FSMD3Bugger) exitWith{};" \n
                         "" \n
                         "private _selectedPosMarked  = (_Vehicle GetVariable ""SelPosMarked"");" \n
                         "private _EvasionPos			= (_Vehicle GetVariable ""EvadePos"");" \n
                         "private _MarkerSize			= 5;" \n
                         "private _Colors				= [	""ColorKhaki"", " \n
                         "								""ColorBlack"", " \n
                         "								""ColorWhite"", " \n
                         "								""ColorBlue""]; " \n
                         "" \n
                         "if (isnil ""_EvasionPos"")exitWith{if(FSMD3Bugger)then{systemChat ""sheeet, no destination marker....""}};" \n
                         "" \n
                         "If(_selectedPosMarked)then	{" \n
                         "								{" \n
                         "									if (_X < (count (_Vehicle GetVariable ""Markers""))) then {" \n
                         "																								private _Marker = ((_Vehicle GetVariable ""Markers"") select _X);" \n
                         "																								if (!IsNil ""_Marker"") then {deleteMarker _Marker;};" \n
                         "																								(_Vehicle GetVariable ""Markers"") deleteAt _X;" \n
                         "																							};" \n
                         "									" \n
                         "									" \n
                         "								} ForEach " \n
                         "								(_Vehicle GetVariable ""NextPosMarkers"");" \n
                         "								" \n
                         "								_Vehicle SetVariable [""NextPosMarkers"",	[], true];" \n
                         "							};" \n
                         "							" \n
                         "for ""_I"" from 1 to 4 do {" \n
                         "							private _Color = _Colors select (_I -1);" \n
                         "							private _MarkerIndex = [_Vehicle, ""ELLIPSE"", _EvasionPos, 0, _MarkerSize,  _Color, ""Border""] 	call Tally_Fnc_VehMarkers;" \n
                         "							(_Vehicle GetVariable ""NextPosMarkers"") PushBackUnique _MarkerIndex;" \n
                         "							_MarkerSize = (_MarkerSize +5);" \n
                         "						};" \n
                         "						" \n
                         "" \n
                         "_Vehicle SetVariable [""SelPosMarked"", true, true];" \n
                         "};" \n
                         "" \n
                         "" \n
                         "Tally_Fnc_GetVehicleWeapons ={" \n
                         "params [""_Vehicle""];" \n
                         "Private _allWeapons 	= weapons _Vehicle;" \n
                         "" \n
                         "" \n
                         "{" \n
                         "	_allWeapons pushBackUnique _X;" \n
                         "}ForEach (_Vehicle weaponsTurret [-1]);" \n
                         "" \n
                         "_allWeapons};" \n
                         "" \n
                         "" \n
                         "" \n
                         "" \n
                         "Tally_Fnc_GetChopperType = {" \n
                         "params [""_Chopper""];" \n
                         "Private _ChopperWeapons = [_Chopper] call Tally_Fnc_GetVehicleWeapons;" \n
                         "private _Unidentified_W = [];" \n
                         "private _ChopperType 	= ""Unarmed Chopper"";" \n
                         "private _LightWeapons 	= 0;" \n
                         "Private _HeavyWeapons 	= 0;" \n
                         "Private _AAcapability 	= 0;" \n
                         "" \n
                         "" \n
                         "" \n
                         "Private _AllCfgWeapons = [	""CUP_Vacannon_Yakb_veh""," \n
                         "							""CUP_Vmlauncher_AT9_veh""," \n
                         "							""CUP_Vhmg_PKT_veh_Noeject""," \n
                         "							""CUP_Vhmg_PKT_veh2""," \n
                         "							""CUP_Vhmg_PKT_veh3""," \n
                         "							""CUP_weapon_mastersafe""," \n
                         "							""CUP_Laserdesignator_mounted""," \n
                         "							""CUP_Vacannon_M230_veh""," \n
                         "							""CUP_Vmlauncher_AGM114L_veh""," \n
                         "							""CUP_Vmlauncher_AIM9L_veh_1Rnd""," \n
                         "							""CUP_M134""," \n
                         "							""CUP_M134_2""," \n
                         "							""CUP_Vlmg_L7A2_veh""," \n
                         "							""Laserdesignator_mounted""," \n
                         "							""gatling_20mm""," \n
                         "							""missiles_ASRAAM""," \n
                         "							""missiles_DAGR""," \n
                         "							""CUP_Vacannon_M197_veh""," \n
                         "							""CUP_Vmlauncher_AGM114K_veh""," \n
                         "							""LMG_Minigun_Transport""," \n
                         "							""LMG_Minigun_Transport2""," \n
                         "							""CUP_Vmlauncher_TOW_veh""," \n
                         "							""CUP_Vmlauncher_AT2_veh""," \n
                         "							""FakeHorn""," \n
                         "							""CUP_Vacannon_GI2_veh""," \n
                         "							""CUP_Vmlauncher_AT6_veh""," \n
                         "							""CUP_Vmlauncher_AT16_veh""," \n
                         "							""CUP_Vacannon_2A42_Ka50""," \n
                         "							""CUP_M32_heli""," \n
                         "							""CUP_M240_uh1h_right_veh_W""," \n
                         "							""CUP_M240_uh1h_left_veh_W""," \n
                         "							""gatling_30mm""," \n
                         "							""missiles_SCALPEL""," \n
                         "							""rockets_Skyfire""," \n
                         "							""CUP_Vlmg_M134_veh""," \n
                         "							""CUP_Vlmg_M134_veh2""," \n
                         "							""CUP_Vhmg_GAU21_MH60_Left""," \n
                         "							""CUP_Vhmg_GAU21_MH60_Right""," \n
                         "							""CUP_M240_veh_W""," \n
                         "							""CUP_M240_veh2_W""," \n
                         "							""CMFlareLauncher""," \n
                         "							""CUP_Vmlauncher_S5_veh""," \n
                         "							""CUP_Vmlauncher_S8_CCIP_veh""," \n
                         "							""M134_minigun""," \n
                         "							""missiles_DAR""," \n
                         "							""CUP_Vmlauncher_FFAR_veh""," \n
                         "							""CUP_DL_CMFlareLauncher""," \n
                         "							""CUP_Vlmg_M134_A_veh""," \n
                         "							""CUP_Vacannon_M621_AW159_veh""," \n
                         "							""CUP_Vmlauncher_CRV7_veh""];" \n
                         "" \n
                         "private _noWeapon 	  = [" \n
                         "							""FakeHorn""," \n
                         "							""Laserdesignator_mounted""," \n
                         "							""CUP_weapon_mastersafe""," \n
                         "							""CUP_Laserdesignator_mounted""," \n
                         "							""CMFlareLauncher""," \n
                         "							""CUP_DL_CMFlareLauncher""" \n
                         "						];" \n
                         "" \n
                         "private _Guns = 	[" \n
                         "							""LMG_Minigun_Transport""," \n
                         "							""LMG_Minigun_Transport2""," \n
                         "							""CUP_Vlmg_M134_veh""," \n
                         "							""CUP_Vlmg_M134_veh2""," \n
                         "							""CUP_Vhmg_GAU21_MH60_Left""," \n
                         "							""CUP_Vhmg_GAU21_MH60_Right""," \n
                         "							""CUP_M240_veh_W""," \n
                         "							""CUP_M240_veh2_W""," \n
                         "							""CUP_M240_uh1h_right_veh_W""," \n
                         "							""CUP_M240_uh1h_left_veh_W""," \n
                         "							""gatling_30mm""," \n
                         "							""CUP_M32_heli""," \n
                         "							""CUP_M134""," \n
                         "							""CUP_M134_2""," \n
                         "							""CUP_Vlmg_L7A2_veh""," \n
                         "							""gatling_20mm""," \n
                         "							""CUP_Vhmg_PKT_veh_Noeject""," \n
                         "							""CUP_Vhmg_PKT_veh2""," \n
                         "							""CUP_Vhmg_PKT_veh3""," \n
                         "							""M134_minigun""," \n
                         "							""CUP_Vlmg_M134_A_veh""" \n
                         "					];" \n
                         "private _cannons = 	[" \n
                         "						""CUP_Vacannon_Yakb_veh""," \n
                         "						""CUP_Vmlauncher_AT9_veh""," \n
                         "						""CUP_Vacannon_M230_veh""," \n
                         "						""CUP_Vacannon_2A42_Ka50""," \n
                         "						""CUP_Vacannon_GI2_veh""," \n
                         "						""CUP_Vacannon_M197_veh""," \n
                         "						""CUP_Vacannon_M621_AW159_veh""" \n
                         "					];" \n
                         "" \n
                         "private _Rockets	 =	[" \n
                         "							""rockets_Skyfire""," \n
                         "							""CUP_Vmlauncher_S5_veh""," \n
                         "							""CUP_Vmlauncher_S8_CCIP_veh""," \n
                         "							""CUP_Vmlauncher_FFAR_veh""," \n
                         "							""CUP_Vmlauncher_CRV7_veh""" \n
                         "						];" \n
                         "" \n
                         "private _ATmisiles = [" \n
                         "						""CUP_Vmlauncher_AGM114L_veh""," \n
                         "						""missiles_DAGR""," \n
                         "						""CUP_Vmlauncher_AGM114K_veh""," \n
                         "						""CUP_Vmlauncher_TOW_veh""," \n
                         "						""CUP_Vmlauncher_AT2_veh""," \n
                         "						""CUP_Vmlauncher_AT6_veh""," \n
                         "						""CUP_Vmlauncher_AT16_veh""," \n
                         "						""missiles_SCALPEL""," \n
                         "						""missiles_DAR""" \n
                         "					];" \n
                         "" \n
                         "private _AAmisiles = [" \n
                         "						""CUP_Vmlauncher_AIM9L_veh_1Rnd""," \n
                         "						""missiles_ASRAAM""" \n
                         "					];" \n
                         "" \n
                         "{" \n
                         "	if!(_X in _AllCfgWeapons)then{_Unidentified_W pushBack _X};" \n
                         "	" \n
                         "	if(_X in _Guns)		then{_LightWeapons 	= (_LightWeapons + 1)};" \n
                         "	if(_X in _cannons)	then{_HeavyWeapons = (_HeavyWeapons + 1)};" \n
                         "	if(_X in _Rockets)	then{_HeavyWeapons = (_HeavyWeapons + 1)};" \n
                         "	if(_X in _ATmisiles)	then{_HeavyWeapons = (_HeavyWeapons + 1)};" \n
                         "	if(_X in _AAmisiles)	then{_AAcapability 	= (_AAcapability + 1)};" \n
                         "" \n
                         "" \n
                         "}ForEach _ChopperWeapons;" \n
                         "" \n
                         "if(Count _Unidentified_W > 0)then	{" \n
                         "										[""We could not identify the following chopper weapons: "", _Unidentified_W] call debugMessage; " \n
                         "										[""they have been copied to clipBoard""] call debugMessage; " \n
                         "										copyToClipboard str _Unidentified_W;" \n
                         "									};" \n
                         "" \n
                         "if(_LightWeapons > 0)then{_ChopperType 	= ""Light Chopper""};" \n
                         "if(_HeavyWeapons > 0)then{_ChopperType = ""Heavy Chopper""};" \n
                         "" \n
                         "" \n
                         "_ChopperType};" \n
                         "" \n
                         "" \n
                         "Tally_Fnc_SwitchEngagement = {" \n
                         "params [""_Vehicle"", ""_On_OFF""];" \n
                         "" \n
                         "		{" \n
                         "		If(_On_OFF)then{" \n
                         "							_X enableAI ""TARGET"";" \n
                         "							_X enableAI ""AUTOCOMBAT"";" \n
                         "							_X enableAI ""AUTOTARGET"";" \n
                         "						}" \n
                         "				   else{" \n
                         "							_X disableAI ""TARGET"";" \n
                         "							_X disableAI ""AUTOCOMBAT"";" \n
                         "							_X disableAI ""AUTOTARGET"";" \n
                         "						};" \n
                         "		" \n
                         "		}ForEach " \n
                         "		 crew _Vehicle;" \n
                         "	" \n
                         "" \n
                         "" \n
                         "" \n
                         "};" \n
                         "" \n
                         "" \n
                         "" \n
                         "" \n
                         "" \n
                         "Tally_Fnc_Reveal = {" \n
                         "Params [""_Reciever"", ""_TargetArr""];" \n
                         "if(IsNil ""_TargetArr"")exitWith{};" \n
                         "Private _Side = (Side _Reciever);" \n
                         "{_Reciever reveal [_x, (_Side knowsAbout _x)]} ForEach _TargetArr;" \n
                         "};" \n
                         "" \n
                         "Tally_Fnc_CrewInVehicle = {" \n
                         "params [""_Vehicle""];" \n
                         "private _Crew = (_Vehicle GetVariable ""crew"");" \n
                         "private _InVehicle = false;" \n
                         "if (isnil ""_Crew"")then{_InVehicle = true}" \n
                         "else{" \n
                         "		{" \n
                         "			if (vehicle _X == _Vehicle)then {" \n
                         "												_InVehicle = true;" \n
                         "											};" \n
                         "		}ForEach _Crew;" \n
                         "	};	" \n
                         "		_InVehicle};" \n
                         "" \n
                         "" \n
                         "debugMessage = {" \n
                         "private _type = 0;" \n
                         "params [""_Text"", ""_Data""];" \n
                         "" \n
                         "if (FSMD3Bugger)then{" \n
                         "						If(IsNil ""_Data"")then{" \n
                         "												systemChat format [""%1"", _Text];" \n
                         "												" \n
                         "											 }" \n
                         "										else {" \n
                         "												systemChat format [""%1 %2"", _Text, _Data];" \n
                         "											 };" \n
                         "					};" \n
                         "" \n
                         "If(IsNil ""_Data"")then{" \n
                         "												diag_log format [""%1"", _Text];" \n
                         "												" \n
                         "											 }" \n
                         "										else {" \n
                         "												diag_log format [""%1 %2"", _Text, _Data];" \n
                         "											 };" \n
                         "" \n
                         "" \n
                         "" \n
                         "};" \n
                         "" \n
                         "Tally_Fnc_GetGroupVehicles = {" \n
                         "params[""_Group""];" \n
                         "private	_Vehicles = [];" \n
                         "" \n
                         "{" \n
                         "if!(typeof _X == TypeOf (vehicle _X))" \n
                         "then{" \n
                         "		if (count(crew(vehicle _X)) > 0)" \n
                         "		then{" \n
                         "				_Vehicles pushBackUnique (vehicle _X);" \n
                         "			};" \n
                         "	}" \n
                         "}forEach units _Group;" \n
                         "" \n
                         "_Vehicles};" \n
                         "" \n
                         "" \n
                         "" \n
                         "Tally_Fnc_Split_From_Abandoned_Group_Vehicle = {" \n
                         "params[""_HidePosition"", ""_Crew""];" \n
                         "private _Side = (Side (_Crew select 0));" \n
                         "Private _NewGroup = createGroup _Side;" \n
                         "_Crew joinSilent _NewGroup;" \n
                         "sleep 0.1;" \n
                         "											" \n
                         "{ " \n
                         "	if(alive _x" \n
                         "	&&{!(group _X == _NewGroup)})then	{" \n
                         "											_Script = [_X, _NewGroup] spawn Tally_Fnc_ForceLeave;" \n
                         "											waituntil {ScriptDone _Script};" \n
                         "										};" \n
                         "} forEach _Crew;" \n
                         "" \n
                         "" \n
                         "" \n
                         "private _WP = _NewGroup addWaypoint 	[_HidePosition, 0];" \n
                         "_WP setWaypointBehaviour 				""AWARE"";" \n
                         "_WP setWaypointForceBehaviour 			true;" \n
                         "_WP setWaypointSpeed 					""FULL"";" \n
                         "_NewGroup deleteGroupWhenEmpty true;" \n
                         "" \n
                         "" \n
                         "};" \n
                         "" \n
                         "" \n
                         "Tally_Fnc_ForceLeave = {" \n
                         "params [""_Unit"", ""_NewGroup""];" \n
                         "private _OldGroup = (group _Unit);" \n
                         "private _Timer = time + 3;" \n
                         "while" \n
                         "		{(Group _Unit == _OldGroup)" \n
                         "		&& " \n
                         "		(_Timer > time)}	Do	{" \n
                         "									[_Unit] joinSilent _NewGroup;" \n
                         "									sleep 0.02;" \n
                         "								};" \n
                         "" \n
                         "};" \n
                         "" \n
                         "" \n
                         "Tally_Fnc_VehMarkers = {" \n
                         "Params [""_Vehicle"", ""_Shape"", ""_Pos"", ""_Dir"", ""_Size"", ""_Color"", ""_Brush""];" \n
                         "" \n
                         "private _MarkerList		= (_Vehicle GetVariable ""Markers"");" \n
                         "" \n
                         "if (IsNil ""_MarkerList"") then	{" \n
                         "									_Vehicle setVariable [""Markers"", 	[], true];" \n
                         "								};" \n
                         "" \n
                         "Private _MarkerName 	= Format [""Marker_%1"", (round(random 10000000))];" \n
                         "Private _marker 		= createMarker [_MarkerName, _Pos];" \n
                         "private _markerIndex	= count (_Vehicle GetVariable ""Markers"");" \n
                         "(_Vehicle GetVariable ""Markers"") PushBackUnique _Marker;" \n
                         "		" \n
                         "		_marker setMarkerShape _Shape;" \n
                         "		_marker setMarkerDir _Dir;" \n
                         "		_marker setMarkerSize [_Size, _Size];" \n
                         "		_marker setMarkerBrush _Brush;" \n
                         "		_Marker setMarkerColor _Color;" \n
                         "" \n
                         "_markerIndex};" \n
                         "" \n
                         "" \n
                         "Tally_Fnc_GetVehicleType = {" \n
                         "params [""_Vehicle""];" \n
                         "private _typeOfVehicle 	= ""unknown"";" \n
                         "private _CfgName		= (TypeOf _Vehicle);" \n
                         "private _parentType		= (([(configFile >> ""CfgVehicles"" >>  (TypeOf _Vehicle)),true ] call BIS_fnc_returnParents) select 2);" \n
                         "private _Firstparent		= (([(configFile >> ""CfgVehicles"" >>  (TypeOf _Vehicle)),true ] call BIS_fnc_returnParents) select 1);" \n
                         "private _Cousin			= (([(configFile >> ""CfgVehicles"" >>  (TypeOf _Vehicle)),true ] call BIS_fnc_returnParents) select 0);" \n
                         "" \n
                         "" \n
                         "private _TankCfgNames = [" \n
                         "							""B_T_MBT_01_TUSK_F""" \n
                         "						];" \n
                         "" \n
                         "private _ArtyParents =	[""rhsgref_ins_2s1""," \n
                         "						""rhsgref_cdf_reg_d30_at""," \n
                         "						""rhsgref_cdf_2s1""," \n
                         "						""rhsgref_cdf_reg_M252""," \n
                         "						""rhsgref_ins_d30""," \n
                         "						""I_E_Truck_02_MRL_F""," \n
                         "						""rhsgref_tla_g_2b14""," \n
                         "						""rhsgref_cdf_b_2s1""," \n
                         "						""B_MBT_01_arty_F""," \n
                         "						""B_MBT_01_mlrs_F""," \n
                         "						""B_T_MBT_01_arty_F""," \n
                         "						""rhsgref_ins_d30_at""," \n
                         "						""rhsgref_ins_2b14""," \n
                         "						""O_MBT_02_arty_F""," \n
                         "						""rhs_9k79""," \n
                         "						""rhsgref_cdf_2s1_at""," \n
                         "						""rhsgref_cdf_reg_BM21""," \n
                         "						""rhssaf_army_2s1""," \n
                         "						""B_T_MBT_01_mlrs_F""," \n
                         "						""rhsusf_M142_usarmy_D""," \n
                         "						""RHS_M252_USMC_D""," \n
                         "						""rhsgref_cdf_b_reg_M252""," \n
                         "						""rhsgref_cdf_b_reg_BM21""," \n
                         "						""rhssaf_army_o_d30""," \n
                         "						""rhsgref_ins_BM21""," \n
                         "						""rhssaf_army_o_2s1""," \n
                         "						""I_Truck_02_MRL_F""," \n
                         "						""rhsgref_tla_2b14""," \n
                         "						""rhsusf_m109_usarmy""," \n
                         "						""rhs_2s3_tv""," \n
                         "						""rhs_2s1_tv""," \n
                         "						""rhs_2s1_at_tv""," \n
                         "						""RHS_M119_WD""," \n
                         "						""rhs_9k79_K""," \n
                         "						""RHS_M252_WD""," \n
                         "						""rhs_2s3_at_tv""," \n
                         "						""rhs_9k79_B""," \n
                         "						""rhssaf_army_o_m252""," \n
                         "						""rhsusf_m109d_usarmy""," \n
                         "						""rhsgref_cdf_reg_d30""," \n
                         "						""RHS_M119_D""," \n
                         "						""rhsgref_cdf_b_2s1_at""," \n
                         "						""RHS_M252_D""," \n
                         "						""rhsgref_ins_2s1_at""," \n
                         "						""rhsusf_M142_usarmy_WD""," \n
                         "						""CUP_B_M270_HE_HIL""," \n
                         "						""CUP_B_M270_DPICM_BAF_WOOD""," \n
                         "						""CUP_B_M270_DPICM_BAF_DES""," \n
                         "						""CUP_B_M270_HE_BAF_DES""," \n
                         "						""CUP_B_M270_HE_BAF_WOOD""," \n
                         "						""CUP_B_M1129_MC_MK19_Desert""," \n
                         "						""CUP_B_M270_DPICM_USA""," \n
                         "						""CUP_B_M270_HE_USA""," \n
                         "						""CUP_B_M270_HE_USMC""," \n
                         "						""CUP_O_BM21_RU""," \n
                         "						""CUP_O_BM21_TKA""," \n
                         "						""CUP_I_M270_DPICM_RACS""," \n
                         "						""CUP_I_M270_HE_RACS""," \n
                         "						""CUP_B_M270_DPICM_HIL""," \n
                         "						""CUP_B_RM70_CZ""," \n
                         "						""CUP_B_BM21_CDF""," \n
                         "						""CUP_B_M1129_MC_MK19_Woodland""," \n
                         "						""CUP_B_M270_DPICM_USMC""," \n
                         "						""CUP_O_BM21_CHDKZ""," \n
                         "						""O_T_MBT_02_arty_ghex_F""," \n
                         "						""CUP_O_BM21_SLA""," \n
                         "						""CUP_I_M270_DPICM_AAF""," \n
                         "						""CUP_I_M270_HE_AAF""];" \n
                         "" \n
                         "" \n
                         "Private _MBTparents = [	  ""MBT_03_base_F""," \n
                         "						  ""MBT_04_base_F""," \n
                         "						  ""O_MBT_02_base_F""," \n
                         "						  ""B_MBT_01_base_F""," \n
                         "						  ""MBT_02_base_F""," \n
                         "						  ""MBT_01_base_F""," \n
                         "						  ""CUP_Challenger2_base""," \n
                         "						  ""CUP_Leopard2_Base""," \n
                         "						  ""CUP_T72_Base""," \n
                         "						  ""CUP_M1Abrams_A2_Base""," \n
                         "						  ""CUP_M1Abrams_A2_TUSK_Base""," \n
                         "						  ""CUP_M1A2Abrams_TUSK_Base""," \n
                         "						  ""CUP_M1A2Abrams_Base""," \n
                         "						  ""CUP_M1Abrams_TUSK_Base""," \n
                         "						  ""CUP_M1Abrams_Base""," \n
                         "						  ""CUP_M60A3_Base""," \n
                         "						  ""CUP_T90_Base""," \n
                         "						  ""CUP_T55_Base""," \n
                         "						  ""CUP_T34_Base""," \n
                         "						  ""rhs_t80b""," \n
                         "						  ""rhs_t80bv""," \n
                         "						  ""rhs_t80u""," \n
                         "						  ""rhsusf_m1a2tank_base""," \n
                         "						  ""rhsusf_m1a1fep_d""," \n
                         "						  ""rhs_t80uk""," \n
                         "						  ""rhsusf_m1a2sep1tuskid_usarmy""," \n
                         "						  ""rhs_t72ba_tv""," \n
                         "						  ""rhs_t72bb_tv""," \n
                         "						  ""rhsusf_m1a1tank_base""," \n
                         "						  ""rhs_a3t72tank_base""," \n
                         "						  ""rhs_a3spruttank_base""," \n
                         "						  ""rhs_t72bd_tv""," \n
                         "						  ""rhs_tank_base""," \n
                         "						  ""rhs_t80a""," \n
                         "						  ""rhs_t72bc_tv""];" \n
                         "" \n
                         "Private _APCparents = [""APC_Wheeled_03_base_F""," \n
                         "						""APC_Wheeled_02_base_F""," \n
                         "						""AFV_Wheeled_01_base_F""," \n
                         "						""Wheeled_APC_F""," \n
                         "						""APC_Wheeled_01_base_F""," \n
                         "						""APC_Tracked_01_base_F""," \n
                         "						""B_APC_Tracked_01_base_F""," \n
                         "						""APC_Tracked_02_base_F""," \n
                         "						""APC_Tracked_03_base_F""," \n
                         "						""O_APC_Tracked_02_base_F""," \n
                         "						""CUP_B_MCV80_GB_D_SLAT""," \n
                         "						""CUP_Boxer_Base""," \n
                         "						""CUP_M2Bradley_Base""," \n
                         "						""CUP_FV432_Bulldog_Base""," \n
                         "						""CUP_B_FV432_Bulldog_GB_D""," \n
                         "						""CUP_B_FV510_GB_D_SLAT""," \n
                         "						""CUP_FV510_Base""," \n
                         "						""CUP_B_FV510_GB_W_SLAT""," \n
                         "						""CUP_MCV80_Base""," \n
                         "						""CUP_Boxer_Base_HMG""," \n
                         "						""CUP_BMP1_base""," \n
                         "						""CUP_BMP2_base""," \n
                         "						""CUP_BRDM2_Base""," \n
                         "						""CUP_BTR80_Common_Base""," \n
                         "						""CUP_MTLB_Base""," \n
                         "						""CUP_StrykerBase""," \n
                         "						""CUP_M1126_ICV_BASE""," \n
                         "						""CUP_M113New_Base""," \n
                         "						""CUP_M113New_Med_Base""," \n
                         "						""CUP_M113New_HQ_Base""," \n
                         "						""CUP_LAV25_Base""," \n
                         "						""CUP_AAV_Base""," \n
                         "						""CUP_B_M2Bradley_USA_D""," \n
                         "						""CUP_B_LAV25_USMC""," \n
                         "						""CUP_BMP3_Base""," \n
                         "						""CUP_BTR80_Base""," \n
                         "						""CUP_BTR90_Base""," \n
                         "						""CUP_BTR40_MG_Base""," \n
                         "						""CUP_GAZ_Vodnik_Base""," \n
                         "						""CUP_BTR80A_Base""," \n
                         "						""CUP_M113A3_Med_Base""," \n
                         "						""rhsusf_caiman_base""," \n
                         "						""rhsusf_m113tank_base""," \n
                         "						""rhsusf_M1237_base""," \n
                         "						""rhsusf_m113_usarmy""," \n
                         "						""MRAP_01_base_F""," \n
                         "						""rhsusf_stryker_m1126_m2_base""," \n
                         "						""rhsusf_stryker_m1127_base""," \n
                         "						""rhsusf_m113_usarmy_unarmed""," \n
                         "						""rhsusf_RG33L_base""," \n
                         "						""rhsusf_stryker_m1126_base""," \n
                         "						""rhsusf_stryker_m1132_m2_base""," \n
                         "						""rhsusf_RG33L_GPK_base""," \n
                         "						""rhsusf_M1117_D""," \n
                         "						""rhsusf_M1117_base""," \n
                         "						""rhsusf_M1232_M2_usarmy_d""," \n
                         "						""rhsusf_m113_usarmy_supply""," \n
                         "						""rhs_btr70_vmf""," \n
                         "						""rhsusf_m113_usarmy_MK19""," \n
                         "						""rhs_zsutank_base""," \n
                         "						""rhsgref_BRDM2""," \n
                         "						""rhs_btr80_msv""," \n
                         "						""rhsgref_BRDM2UM""," \n
                         "						""rhs_btr60_vmf""," \n
                         "						""rhs_btr60_base""," \n
                         "						""rhs_btr_base""," \n
                         "						""rhs_btr70_msv""," \n
                         "						""rhs_bmd1_base""," \n
                         "						""rhs_bmd2_base""," \n
                         "						""rhs_bmd2""," \n
                         "						""rhs_bmp1_vdv""," \n
                         "						""rhs_bmp1k_vdv""," \n
                         "						""rhs_bmp1p_vdv""," \n
                         "						""rhs_bmp2e_vdv""," \n
                         "						""rhs_bmp2_vdv""," \n
                         "						""rhs_bmp2d_vdv""," \n
                         "						""rhs_bmp2k_vdv""," \n
                         "						""rhs_a3spruttank_base""," \n
                         "						""rhs_bmd4_vdv""," \n
                         "						""rhs_bmp1tank_base""," \n
                         "						""rhs_bmp_base""," \n
                         "						""rhs_bmd_base""," \n
                         "						""rhs_brm1k_base""," \n
                         "						""rhs_bmp3tank_base""," \n
                         "						""rhs_t15_base""];" \n
                         "					   " \n
                         "if	(_parentType in _MBTparents" \n
                         "or   _Firstparent in _MBTparents" \n
                         "or 	(_CfgName in _TankCfgNames))then{_typeOfVehicle = ""tank""}" \n
                         "else{" \n
                         "if	(_parentType in _APCparents" \n
                         "or   _Firstparent in _APCparents)then{_typeOfVehicle = ""APC""}" \n
                         "else{" \n
                         "if	(_Cousin in _ArtyParents)then{_typeOfVehicle = ""Artillery""}" \n
                         "else{" \n
                         "if	(_Vehicle iskindof ""car"")then{" \n
                         "								  if	((Count (AllTurrets [_Vehicle, false])) > 0) then {_typeOfVehicle 	= ""armedCar""}" \n
                         "								  else	{_typeOfVehicle = ""unarmedCar""};" \n
                         "								 }" \n
                         "else{" \n
                         "if	(_Vehicle iskindof ""man"")" \n
                         "then{" \n
                         "		_typeOfVehicle = ""man"";" \n
                         "	}" \n
                         "else{" \n
                         "if(_Vehicle IsKindof ""StaticWeapon"")" \n
                         "then{_typeOfVehicle = ""turret""}" \n
                         "else{" \n
                         "if(_Vehicle isKindOf ""helicopter"")" \n
                         "then{" \n
                         "		_typeOfVehicle = [_Vehicle] call Tally_Fnc_GetChopperType;" \n
                         "	};" \n
                         "" \n
                         "" \n
                         "}}}}}};" \n
                         "" \n
                         "If(_typeOfVehicle == ""unknown""" \n
                         "&&{alive _Vehicle})then{[""Could not categorize vehicle"", _CfgName] call debugMessage};" \n
                         "" \n
                         "					   " \n
                         "_typeOfVehicle" \n
                         "};" \n
                         "" \n
                         "" \n
                         "Tally_Fnc_Timer_divisor = {" \n
                         "params [""_Vehicle""];" \n
                         "private _divisor		= 6;" \n
                         "private _VehicleType 	= ([_Vehicle] call Tally_Fnc_GetVehicleType);" \n
                         "private _SlowVehicles 	= [""APC"", ""TANK""];" \n
                         "" \n
                         "if(_VehicleType in _SlowVehicles)then{_divisor = 3};" \n
                         "" \n
                         "_divisor};" \n
                         "" \n
                         "" \n
                         "Tally_Fnc_MinDistMultiplier = {" \n
                         "params [""_Vehicle"", ""_Minimum_Distance""];" \n
                         "private _Multiplier	 = 1;" \n
                         "private _VehicleType = ([_Vehicle] call Tally_Fnc_GetVehicleType);" \n
                         "" \n
                         "if (_VehicleType == ""APC"") then {" \n
                         "									_Multiplier	 = 1.25;" \n
                         "								};" \n
                         "" \n
                         "if (_VehicleType == ""tank"") then {" \n
                         "									_Multiplier	 = 1.5;" \n
                         "								};" \n
                         "								" \n
                         "if (_Vehicle isKindOf ""helicopter"") then {" \n
                         "											_Multiplier	 = 4;" \n
                         "										};" \n
                         "" \n
                         "_Minimum_Distance = (_Minimum_Distance * _Multiplier);" \n
                         "" \n
                         "_Minimum_Distance};" \n
                         "" \n
                         "" \n
                         "" \n
                         "" \n
                         "" \n
                         "" \n
                         "Tally_Fnc_ClusterMembers = {" \n
                         "Params [""_Unit"", ""_Radius""];" \n
                         "private _Side 	= (Side _Unit);" \n
                         "Private _Pos 	= (GetPos _Unit);" \n
                         "private _list 	= (nearestObjects [_Pos, [""land""], _Radius, true]);" \n
                         "Private _NewList = [_Unit];" \n
                         "" \n
                         "	{				" \n
                         "	if 	((Side _x) == (_Side))" \n
                         "	then 	{" \n
                         "			" \n
                         "				_NewList PushBackUnique _X;" \n
                         "			};" \n
                         "			" \n
                         "	}ForEach _list;" \n
                         "diag_log format [""%1 enemy units in area"", (Count _NewList)];" \n
                         "_NewList};" \n
                         "" \n
                         "" \n
                         "" \n
                         "" \n
                         "" \n
                         "" \n
                         "" \n
                         "Tally_Fnc_GetNearestEnemy = {" \n
                         "Private _Enemy = objnull; " \n
                         "Params [""_Radius"", ""_Unit""];" \n
                         "" \n
                         "if (IsNil ""_Radius"")then{_Radius = 1000};" \n
                         "" \n
                         "Private _pos 	= (GetPos _Unit);" \n
                         "private _list 	= _pos nearObjects _Radius;" \n
                         "Private _Side 	= (Side _Unit);" \n
                         "private _Enemies = [];" \n
                         "" \n
                         "" \n
                         "" \n
                         "	{" \n
                         "	if (_x iskindof ""Land""" \n
                         "	&& {alive _x}) 			then {" \n
                         "									" \n
                         "									" \n
                         "									If ((side _x) in [west, east, Independent])" \n
                         "									then{" \n
                         "									" \n
                         "									If (!((Side _x) == (_Side)))" \n
                         "									then {" \n
                         "									" \n
                         "									Private _Otherside = (Side _X);" \n
                         "									if !([_Side, _Otherside] call BIS_fnc_sideIsFriendly) " \n
                         "									then {" \n
                         "									" \n
                         "									_Enemies PushbackUnique _x;" \n
                         "									" \n
                         "									}}}}}" \n
                         "									ForEach _list;" \n
                         "" \n
                         "If ((count _Enemies) > 0) then {" \n
                         "									_Enemy = [_Pos, _Enemies] call Tally_Fnc_GetNearestObject;" \n
                         "								};" \n
                         "" \n
                         "" \n
                         "" \n
                         "_Enemy};" \n
                         "" \n
                         "" \n
                         "" \n
                         "" \n
                         "Tally_Fnc_VehEligbleFSM = {" \n
                         "" \n
                         "" \n
                         "params [""_Vehicle""];" \n
                         "Private _eligble = false;" \n
                         "Private _Evading = (_Vehicle getVariable ""Evading"");" \n
                         "" \n
                         "" \n
                         "if 	(!IsNil ""_Vehicle"" " \n
                         "&& 	{!IsNull _Vehicle " \n
                         "&& 	{Alive _Vehicle" \n
                         "&& 	{((_Vehicle Iskindof ""car"") " \n
                         "or 	(_Vehicle Iskindof ""Tank"")" \n
                         "or	(_Vehicle Iskindof ""Helicopter""))" \n
                         "&& 	{!(crew _Vehicle IsEqualTo [])" \n
                         "&& 	{Alive (driver _Vehicle)" \n
                         "&& 	{CanMove _Vehicle" \n
                         "&& 	{IsNil ""_Evading""" \n
                         "&&	{count allTurrets _Vehicle > 0" \n
                         "&&	{!(fuel _Vehicle == 0)" \n
                         "&&	{!([_Vehicle] call Tally_Fnc_PlayerInVeh)" \n
                         "	}}}}}}}}}}) " \n
                         "				then {_eligble = true};" \n
                         "" \n
                         "_eligble};" \n
                         "" \n
                         "Tally_Fnc_GetNearestObject = {" \n
                         "Params [""_Pos"", ""_ObjArr""];" \n
                         "Private _Distance1		= 100000;" \n
                         "Private _Distance2		= 100000;" \n
                         "Private _Nearest		= 0;" \n
                         "" \n
                         "{" \n
                         "	_Distance2 = (_Pos Distance2d _x);" \n
                         "	If (_Distance2 < _Distance1) then {" \n
                         "	" \n
                         "										_Distance1 	= _Distance2;" \n
                         "										_Nearest	= _x;" \n
                         "										" \n
                         "									Sleep 0.1}} ForEach _ObjArr;" \n
                         "" \n
                         "" \n
                         "_Nearest};" \n
                         "" \n
                         "" \n
                         "" \n
                         "" \n
                         "Tally_Fnc_DeleteWP = {" \n
                         "Params [""_Group""];" \n
                         "If ((count waypoints _group) > 0) then {" \n
                         "										for ""_i"" from count waypoints _group - 1 to 0 step -1 do" \n
                         "													" \n
                         "													{deleteWaypoint [_group, _i]};" \n
                         "													{deleteWaypoint _x}ForEach (waypoints _Group);" \n
                         "										};" \n
                         "};" \n
                         "" \n
                         "" \n
                         "" \n
                         "Tally_Fnc_ResetGroup = {" \n
                         "Params [""_Group""];" \n
                         "private _KnownUnits = [];" \n
                         "" \n
                         "" \n
                         "	{" \n
                         "		if ((_Group knowsAbout _x) > 0)" \n
                         "			then{" \n
                         "					_KnownUnits PushBackUnique [(_Group knowsAbout _x), _X];" \n
                         "				};" \n
                         "	}ForEach allunits;" \n
                         "	" \n
                         "	{" \n
                         "		if ((_Group knowsAbout _x) > 0)" \n
                         "			then{" \n
                         "					_KnownUnits PushBackUnique [(_Group knowsAbout _x), _X];" \n
                         "				};" \n
                         "	}ForEach vehicles;" \n
                         "	" \n
                         "Private _NewGroup = createGroup (side _Group);" \n
                         "{ [_x] joinSilent _NewGroup } forEach (units _Group);" \n
                         "{ [_x] joinSilent _NewGroup } forEach (units _Group);" \n
                         "DeleteGroup _Group;" \n
                         "_NewGroup deleteGroupWhenEmpty true;" \n
                         "" \n
                         "	{" \n
                         "		[_KnownUnits, _x] spawn Tally_Fnc_TransferGroupKnowledge;" \n
                         "	}ForEach (units _NewGroup);" \n
                         "" \n
                         "_NewGroup};" \n
                         "" \n
                         "" \n
                         "Tally_Fnc_TransferGroupKnowledge = {" \n
                         "Params [""_KnownUnits"", ""_Recipient""];" \n
                         "	" \n
                         "	{" \n
                         "		private _Unit 		= (_X select 1);" \n
                         "		private _Knowledge 	= (_X select 0);" \n
                         "		" \n
                         "		_Recipient reveal [_Unit, _Knowledge];" \n
                         "		" \n
                         "	} ForEach _KnownUnits;" \n
                         "" \n
                         "" \n
                         "};" \n
                         "" \n
                         "Tally_Fnc_GetVehicle_Width_Length = {" \n
                         "params[""_VehicleType""];" \n
                         "private _breadthWidth = [4,9];" \n
                         "" \n
                         "if(_VehicleType == ""armedCar""" \n
                         "or _VehicleType == ""unarmedCar"")then{_breadthWidth = [3,5]};" \n
                         "" \n
                         "" \n
                         "_breadthWidth};" \n
                         "" \n
                         "" \n
                         "" \n
                         "" \n
                         "Tally_Fnc_3Dmarkers = {" \n
                         "" \n
                         "if(!isnil ""3DmarkersDOC"")exitWith{};" \n
                         "3DmarkersDOC = true;" \n
                         "" \n
                         "addMissionEventHandler [""Draw3D"", {" \n
                         "" \n
                         "If (FSMD3Bugger) then 	{" \n
                         "								private _engagedVehicles = 0;" \n
                         "							" \n
                         "								{" \n
                         "									" \n
                         "									If (_x getVariable ""Evading"")" \n
                         "									then{" \n
                         "											Private _Side 		= (Side _x);" \n
                         "											Private _SideColor 	= [1,1,1,0.5];" \n
                         "											private _ActionText = (_x getVariable ""currentAction"");" \n
                         "											private _FinalPos 	= (_x getVariable ""EvadePos"");" \n
                         "											private _Text	 	= """";" \n
                         "											private _Damage 	= (Getdammage _x);" \n
                         "											private _Health 	= 1 - _Damage;" \n
                         "											private _PathIcon	= ""\A3\ui_f\data\map\markers\handdrawn\dot_CA.paa"";" \n
                         "											private _FPS		= diag_fps;" \n
                         "											if (!IsNil ""_ActionText"") then {_Text = _ActionText;};" \n
                         "											if(_Side == west)		  then{_SideColor 	= [0.2, 0.2, 1, 0.8]};" \n
                         "											if(_Side == east)		  then{_SideColor 	= [1, 0.2, 0.2, 0.8]};" \n
                         "											if(_Side == independent)  then{_SideColor 	= [0.2, 1, 0.2, 0.8]};" \n
                         "											_engagedVehicles = (_engagedVehicles +1);" \n
                         "											" \n
                         "											_Color = [_Damage,_Health,0,1];" \n
                         "											_S1ze = 1;" \n
                         "											_alpha = 0.4;" \n
                         "											_angle = 0; " \n
                         "											" \n
                         "											drawIcon3D 	[""\A3\ui_f\data\map\markers\military\warning_CA.paa"", " \n
                         "											_Color, " \n
                         "											[((ASLToAGL getPosASL _x) select 0), ((ASLToAGL getPosASL _x) select 1), (((ASLToAGL getPosASL _x)select 2) + 1.5)], " \n
                         "											_S1ze, _S1ze, _angle, (_Text), 0, 0.02, ""TahomaB""];" \n
                         "											" \n
                         "											" \n
                         "											private _PathPosArr = (_x getVariable ""pathPos"");" \n
                         "											if (!IsNil ""_PathPosArr""" \n
                         "											&&{(!IsNil ""_FinalPos"")" \n
                         "											&&{_FPS > 20}})" \n
                         "											then{" \n
                         "													" \n
                         "													_S1ze = 0.5;" \n
                         "													_PathPosArr = [_x] call Tally_Fnc_GetPathPositions;" \n
                         "													private _Poscount		= ((count _PathPosArr)-1);" \n
                         "													for ""_I"" from 0 to _Poscount" \n
                         "													do 	{" \n
                         "															private _PathPos = (_PathPosArr select _I);" \n
                         "															if(_I == _Poscount)" \n
                         "															then{" \n
                         "																	_PathIcon 	= ""\A3\ui_f\data\map\markers\handdrawn\destroy_CA.paa""; " \n
                         "																	_S1ze 		= 2;" \n
                         "																};" \n
                         "															" \n
                         "																	drawIcon3D 	[_PathIcon, " \n
                         "																				_SideColor, " \n
                         "																				_PathPos, " \n
                         "																				_S1ze, " \n
                         "																				_S1ze, " \n
                         "																				45, " \n
                         "																				"""", " \n
                         "																				0, " \n
                         "																				0.02," \n
                         "																				""TahomaB""];" \n
                         "																" \n
                         "															" \n
                         "															" \n
                         "														};" \n
                         "												};" \n
                         "											" \n
                         "										};" \n
                         "								" \n
                         "										" \n
                         "									" \n
                         "									If (_x getVariable ""Spotted"")then 	{" \n
                         "																		drawIcon3D 	["""", " \n
                         "																		[0,0.5,0.5,0.8], " \n
                         "																		[((ASLToAGL getPosASL _x) select 0), " \n
                         "																		((ASLToAGL getPosASL _x) select 1), " \n
                         "																		(((ASLToAGL getPosASL _x)select 2) + 10)], " \n
                         "																		0.5, " \n
                         "																		0.5, " \n
                         "																		45, " \n
                         "																		(""Detected""), " \n
                         "																		0, " \n
                         "																		0.02, " \n
                         "																		""TahomaB""];" \n
                         "																	};" \n
                         "								" \n
                         "								" \n
                         "								" \n
                         "								" \n
                         "								" \n
                         "								} forEach Vehicles;" \n
                         "								" \n
                         "						" \n
                         "							" \n
                         "							" \n
                         "							" \n
                         "							" \n
                         "							" \n
                         "						}; " \n
                         "}];" \n
                         "};" \n
                         "" \n
                         "" \n
                         "Tally_Fnc_PathDrawer = {" \n
                         "params[""_Vehicle""];" \n
                         "" \n
                         "" \n
                         "};" \n
                         "" \n
                         "Tally_Fnc_TerrainIntersects = {" \n
                         "private _AddedAltitude = 0;" \n
                         "private _IsInterSecting = false;" \n
                         "private _DistBetweenEachPos = 5;" \n
                         "params [""_StartPos"", ""_EndPos"", ""_AddedAltitude"", ""_DistBetweenEachPos""];" \n
                         "" \n
                         "" \n
                         "" \n
                         "private _NextPosDistance 	= _DistBetweenEachPos;" \n
                         "private _Dir 				= _StartPos getDir _EndPos;" \n
                         "Private _Distance 			= (_StartPos distance2d _EndPos);" \n
                         "private _PosAmount 			= floor (_Distance / _DistBetweenEachPos);" \n
                         "private _InterSectionHeight = selectMax [(getTerrainHeightASL _StartPos) + _AddedAltitude, " \n
                         "										 (getTerrainHeightASL _EndPos) 	 + _AddedAltitude];" \n
                         "" \n
                         "" \n
                         "for ""_I"" from 1 to _PosAmount " \n
                         "do	{" \n
                         "		Private _Position 	= [_StartPos select 0, _StartPos select 1, _Dir, _NextPosDistance] call Tally_Fnc_CalcAreaLoc;" \n
                         "		private _Height		= (getTerrainHeightASL _Position);" \n
                         "		" \n
                         "		_NextPosDistance = (_NextPosDistance + _DistBetweenEachPos);" \n
                         "		if(_Height > _InterSectionHeight)" \n
                         "		exitWith{" \n
                         "					_IsInterSecting = true;" \n
                         "				};" \n
                         "		" \n
                         "	};" \n
                         "" \n
                         "" \n
                         "_IsInterSecting};" \n
                         "" \n
                         "" \n
                         "Tally_Fnc_GetPathPositions = {" \n
                         "params[""_Vehicle""];" \n
                         "" \n
                         "private _DistBetweenEachPos = 15;" \n
                         "private _NextPosDistance 	= _DistBetweenEachPos;" \n
                         "private _TargetPos 			= (_Vehicle getVariable ""EvadePos"");" \n
                         "		If!([_TargetPos] " \n
                         "		call " \n
                         "		Tally_Fnc_IsPos)" \n
                         "		then{" \n
                         "				_TargetPos = (_TargetPos select 0);" \n
                         "			};" \n
                         "private _VehiclePos 		= (GetPos _Vehicle);" \n
                         "private _Dir 				= _VehiclePos getDir _TargetPos;" \n
                         "Private _Distance 			= (_VehiclePos distance2d _TargetPos);" \n
                         "private _PosAmount 			= floor (_Distance / _DistBetweenEachPos);" \n
                         "private _PosInBetween 		= [_VehiclePos];" \n
                         "" \n
                         "if(_PosAmount > 0)" \n
                         "then{" \n
                         "		for ""_I"" from 1 to _PosAmount " \n
                         "		do	{" \n
                         "				Private _Position 	= [_VehiclePos select 0, _VehiclePos select 1, _Dir, _NextPosDistance] call Tally_Fnc_CalcAreaLoc;" \n
                         "				_NextPosDistance = (_NextPosDistance + _DistBetweenEachPos);" \n
                         "				_PosInBetween pushBack _Position;" \n
                         "				" \n
                         "			};" \n
                         "	};" \n
                         "	" \n
                         "	_PosInBetween pushBack _TargetPos;" \n
                         "	" \n
                         "	" \n
                         "" \n
                         "_PosInBetween};" \n
                         "" \n
                         "Tally_Fnc_IsPos ={" \n
                         "Params[""_Arr""];" \n
                         "Private _Pos = true;" \n
                         "if!(typeName _Arr == ""ARRAY"")exitWith{false};" \n
                         "if!(Count _Arr == 3)exitWith{false};" \n
                         "" \n
                         "{" \n
                         "if!(typeName _X == ""SCALAR"")" \n
                         "then{_Pos = false;};" \n
                         "}ForEach _Arr;" \n
                         "" \n
                         "_Pos};" \n
                         "" \n
                         "systemChat ""DCO vehicle FSM loaded"";" \n
                         "Tally_Fnc_CuratorEH = {" \n
                         "{" \n
                         "_x addEventHandler [""CuratorObjectDeleted"", {" \n
                         "	params [""_curator"", ""_entity""];" \n
                         "private _Evading = _entity GetVariable ""Evading"";" \n
                         "	if(FSMD3Bugger)" \n
                         "	then{" \n
                         "			if(!isnil ""_Evading"")" \n
                         "			then{" \n
                         "					Hint (parsetext format [""Be carefull deleting units while they are engaged / activated. <br/>This could lead to scripts not exiting properly""]);" \n
                         "				};" \n
                         "		};" \n
                         "		diag_log ""*******************************"";" \n
                         "		diag_log ""A vehicle was deleted while script was running"";" \n
                         "		diag_log ""*******************************"";" \n
                         "	" \n
                         "}];" \n
                         "}ForEach allCurators;" \n
                         "" \n
                         "" \n
                         "};"/*%FSM</STATEINIT""">*/;
                        precondition = /*%FSM<STATEPRECONDITION""">*/""/*%FSM</STATEPRECONDITION""">*/;
                        class Links
                        {
                                /*%FSM<LINK "true">*/
                                class true
                                {
                                        itemno = 11;
                                        priority = 0.000000;
                                        to="PostInit";
                                        precondition = /*%FSM<CONDPRECONDITION""">*/""/*%FSM</CONDPRECONDITION""">*/;
                                        condition=/*%FSM<CONDITION""">*/"!IsNil Tally_Fnc_CuratorEH"/*%FSM</CONDITION""">*/;
                                        action=/*%FSM<ACTION""">*/""/*%FSM</ACTION""">*/;
                                };
                                /*%FSM</LINK>*/
                        };
                };
                /*%FSM</STATE>*/
                /*%FSM<STATE "Executing_FSM_functions">*/
                class Executing_FSM_functions
                {
                        name = "Executing_FSM_functions";
                        itemno = 6;
                        init = /*%FSM<STATEINIT""">*/"_time = time;" \n
                         "Tally_VEh_FSM_iteration_Done = false;" \n
                         "[] spawn {" \n
                         "" \n
                         "				_Script = [] spawn Tally_Fnc_TaskManager;" \n
                         "					waituntil {sleep 0.05; Scriptdone _Script};" \n
                         "					sleep iterationTimer;" \n
                         "" \n
                         "			Tally_VEh_FSM_iteration_Done = true;" \n
                         "			};" \n
                         "" \n
                         ""/*%FSM</STATEINIT""">*/;
                        precondition = /*%FSM<STATEPRECONDITION""">*/""/*%FSM</STATEPRECONDITION""">*/;
                        class Links
                        {
                                /*%FSM<LINK "EndCondition">*/
                                class EndCondition
                                {
                                        itemno = 13;
                                        priority = 0.000000;
                                        to="Feedback";
                                        precondition = /*%FSM<CONDPRECONDITION""">*/""/*%FSM</CONDPRECONDITION""">*/;
                                        condition=/*%FSM<CONDITION""">*/"EndVehicleFSM_now"/*%FSM</CONDITION""">*/;
                                        action=/*%FSM<ACTION""">*/""/*%FSM</ACTION""">*/;
                                };
                                /*%FSM</LINK>*/
                                /*%FSM<LINK "sleep">*/
                                class sleep
                                {
                                        itemno = 4;
                                        priority = 0.000000;
                                        to="Executing_FSM_functions";
                                        precondition = /*%FSM<CONDPRECONDITION""">*/""/*%FSM</CONDPRECONDITION""">*/;
                                        condition=/*%FSM<CONDITION""">*/"((time - _time > iterationTimer) && (Tally_VEh_FSM_iteration_Done))"/*%FSM</CONDITION""">*/;
                                        action=/*%FSM<ACTION""">*/""/*%FSM</ACTION""">*/;
                                };
                                /*%FSM</LINK>*/
                        };
                };
                /*%FSM</STATE>*/
                /*%FSM<STATE "exit">*/
                class exit
                {
                        name = "exit";
                        itemno = 8;
                        init = /*%FSM<STATEINIT""">*/""/*%FSM</STATEINIT""">*/;
                        precondition = /*%FSM<STATEPRECONDITION""">*/""/*%FSM</STATEPRECONDITION""">*/;
                        class Links
                        {
                        };
                };
                /*%FSM</STATE>*/
                /*%FSM<STATE "Declare_state">*/
                class Declare_state
                {
                        name = "Declare_state";
                        itemno = 9;
                        init = /*%FSM<STATEINIT""">*/"MissionNamespace setVariable [""Tally_FSM_RUnning"", true, true];"/*%FSM</STATEINIT""">*/;
                        precondition = /*%FSM<STATEPRECONDITION""">*/""/*%FSM</STATEPRECONDITION""">*/;
                        class Links
                        {
                                /*%FSM<LINK "sleep">*/
                                class sleep
                                {
                                        itemno = 10;
                                        priority = 0.000000;
                                        to="Declaring_all_functions";
                                        precondition = /*%FSM<CONDPRECONDITION""">*/""/*%FSM</CONDPRECONDITION""">*/;
                                        condition=/*%FSM<CONDITION""">*/"time - _time > 1;"/*%FSM</CONDITION""">*/;
                                        action=/*%FSM<ACTION""">*/""/*%FSM</ACTION""">*/;
                                };
                                /*%FSM</LINK>*/
                        };
                };
                /*%FSM</STATE>*/
                /*%FSM<STATE "PostInit">*/
                class PostInit
                {
                        name = "PostInit";
                        itemno = 12;
                        init = /*%FSM<STATEINIT""">*/"Diag_Log ""DCO_FSM has initiated"";" \n
                         "" \n
                         "" \n
                         "AreaScan = false;" \n
                         "Version	 = 1.02;" \n
                         "deathGroup = createGroup civilian;" \n
                         "HintTimer			= 20;" \n
                         "TenSecondTaskTimer	= 0;" \n
                         "iterationTimer		= 2;" \n
                         "ScriptsRunningDOC	= (diag_activeScripts select 0);" \n
                         "{[_X] call Tally_Fnc_AddEh}ForEach Vehicles;" \n
                         "[] call Tally_Fnc_CuratorEH;" \n
                         "[] remoteExecCall [""Tally_Fnc_3Dmarkers"", 0, true];" \n
                         "[""_____________________________""] call deBugMessage;" \n
                         "[""DCO_Vehicle FSM Version "", (Version)] call deBugMessage;" \n
                         "[""_____________________________""] call deBugMessage;"/*%FSM</STATEINIT""">*/;
                        precondition = /*%FSM<STATEPRECONDITION""">*/""/*%FSM</STATEPRECONDITION""">*/;
                        class Links
                        {
                                /*%FSM<LINK "sleep">*/
                                class sleep
                                {
                                        itemno = 3;
                                        priority = 0.000000;
                                        to="Executing_FSM_functions";
                                        precondition = /*%FSM<CONDPRECONDITION""">*/""/*%FSM</CONDPRECONDITION""">*/;
                                        condition=/*%FSM<CONDITION""">*/"time - _time > 5"/*%FSM</CONDITION""">*/;
                                        action=/*%FSM<ACTION""">*/""/*%FSM</ACTION""">*/;
                                };
                                /*%FSM</LINK>*/
                        };
                };
                /*%FSM</STATE>*/
                /*%FSM<STATE "Feedback">*/
                class Feedback
                {
                        name = "Feedback";
                        itemno = 14;
                        init = /*%FSM<STATEINIT""">*/"Diag_Log ""DCO_FSM has been terminated"";" \n
                         "if (_DeBug) then {SystemChat ""Dragon_Company_Veh_Withdraw_FSM has been terminated""};" \n
                         "MissionNamespace setVariable [""Tally_FSM_RUnning"", nil, true];" \n
                         ""/*%FSM</STATEINIT""">*/;
                        precondition = /*%FSM<STATEPRECONDITION""">*/""/*%FSM</STATEPRECONDITION""">*/;
                        class Links
                        {
                                /*%FSM<LINK "true">*/
                                class true
                                {
                                        itemno = 15;
                                        priority = 0.000000;
                                        to="exit";
                                        precondition = /*%FSM<CONDPRECONDITION""">*/""/*%FSM</CONDPRECONDITION""">*/;
                                        condition=/*%FSM<CONDITION""">*/""/*%FSM</CONDITION""">*/;
                                        action=/*%FSM<ACTION""">*/""/*%FSM</ACTION""">*/;
                                };
                                /*%FSM</LINK>*/
                        };
                };
                /*%FSM</STATE>*/
        };
        initState="Init_FSM";
        finalStates[] =
        {
                "exit",
        };
};
/*%FSM</COMPILE>*/
