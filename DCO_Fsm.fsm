/*%FSM<COMPILE "C:\Program Files (x86)\Steam\steamapps\common\Arma 3 Tools\FSMEditor\scriptedFSM.cfg, Veh_FSM">*/
/*%FSM<HEAD>*/
/*
item0[] = {"Init_FSM",0,250,-436.614563,-1259.584595,-346.614624,-1209.584473,0.000000,"Init FSM"};
item1[] = {"FSM_not_running",4,218,-450.142822,-1144.447144,-335.270630,-1073.305664,0.000000,"FSM not running"};
item2[] = {"Declaring_all_functions",2,250,-509.914093,-776.690063,-272.368530,-693.902222,0.000000,"Declaring all functions needed"};
item3[] = {"sleep",4,218,-434.686584,-456.030518,-344.686584,-406.030579,0.000000,"sleep"};
item4[] = {"sleep",4,218,-26.469467,-288.876068,63.530533,-238.875946,0.000000,"sleep"};
item5[] = {"",7,210,14.034729,-141.697815,22.034729,-133.697815,0.000000,""};
item6[] = {"Executing_FSM_functions",2,250,-575.858948,-346.724121,-197.401642,-180.637512,0.000000,"Executing FSM functions for all eligble vehicles" \n "" \n "Checkout 'Devfile.sqf' To see all functions / code used."};
item7[] = {"FSM_already_runn",4,218,-219.828339,-1169.373657,-83.845428,-1093.434448,0.000000,"FSM already running"};
item8[] = {"exit",1,250,116.966492,-1156.514160,206.966522,-1106.514282,0.000000,"exit"};
item9[] = {"Declare_state",2,250,-438.308624,-999.929077,-348.308624,-949.929077,0.000000,"Declare state"};
item10[] = {"sleep",4,218,-437.688751,-879.131104,-347.688751,-829.131104,0.000000,"sleep"};
item11[] = {"true",8,218,-434.722595,-638.593079,-344.722595,-588.593079,0.000000,"true"};
item12[] = {"feedback",2,250,-434.264252,-532.616943,-344.264282,-482.616943,0.000000,"feedback"};
item13[] = {"EndCondition",4,218,116.574257,-510.365356,206.574249,-427.530273,0.000000,"EndCondition"};
item14[] = {"Feedback_1",2,250,116.823433,-742.144836,206.823456,-692.144836,0.000000,"Feedback"};
item15[] = {"true",8,218,117.289719,-956.827026,207.289719,-906.827087,0.000000,"true"};
item16[] = {"",7,210,-391.297516,-140.677734,-383.297516,-132.677734,0.000000,""};
item17[] = {"MIght_need_Multiplayer",-1,250,-1072.988037,-314.517761,-606.910828,-189.184326,0.000000,"MIght need Multiplayer compatibility. Locality might be a issue"};
item18[] = {"Author___Leo_Hartgen",-1,250,95.052429,-265.517151,366.967041,-108.478088,0.000000,"Author:  Leo Hartgen *[P] Tally*" \n "" \n "Github:  https://github.com/Tally-1" \n "" \n "Discord Tally#8779" \n "" \n "Written on behalf of Dragon Company" \n ""};
item19[] = {"",7,210,158.355835,-614.620667,166.355835,-606.620667,0.000000,""};
item20[] = {"Produced_by_Dragon",-1,250,-589.265137,-1570.737061,-135.809814,-1285.335571,0.000000,"Produced by Dragon Company." \n "" \n "Join our discord and let us know what" \n "you would like to see next!" \n "" \n "https://discord.gg/bRTqWJzeza" \n ""};
version=1;
class LayoutItems
{
	class Item17
	{
		class ItemInfo
		{
			FontFace="Arial";
			FontHeight=10;
			lStyle=1;
		};
		BgColor=12254960;
	};
	class Item18
	{
		class ItemInfo
		{
			FontFace="Arial";
			FontHeight=12;
			lStyle=1;
			Align=0;
		};
		BgColor=15465915;
	};
	class Item20
	{
		class ItemInfo
		{
			FontFace="Arial";
			FontHeight=20;
			lStyle=1;
			Align=0;
		};
		BgColor=15465915;
	};
};
link0[] = {0,1};
link1[] = {0,7};
link2[] = {1,9};
link3[] = {2,11};
link4[] = {3,6};
link5[] = {4,5};
link6[] = {5,16};
link7[] = {6,4};
link8[] = {6,13};
link9[] = {7,8};
link10[] = {9,10};
link11[] = {10,2};
link12[] = {11,12};
link13[] = {12,3};
link14[] = {13,19};
link15[] = {14,15};
link16[] = {15,8};
link17[] = {16,6};
link18[] = {19,14};
globals[] = {0.000000,0,0,0,0,640,480,1,41,6316128,1,-1259.500244,545.090332,-330.500366,-1623.254150,1234,884,1};
window[] = {2,-1,-1,-32000,-32000,791,52,1076,52,3,1252};
*//*%FSM</HEAD>*/
class FSM
{
        fsmName = "Veh_FSM";
        class States
        {
                /*%FSM<STATE "Init_FSM">*/
                class Init_FSM
                {
                        name = "Init_FSM";
                        itemno = 0;
                        init = /*%FSM<STATEINIT""">*/"_Minimum_Distance = 350;" \n
                         "_DeBug = false;" \n
                         "_refreshRate = 3;" \n
                         "Params [""_Minimum_Distance"", ""_DeBug"", ""_refreshRate""];" \n
                         "_time = time;" \n
                         "_Running = (MissionNamespace GetVariable ""Tally_FSM_RUnning"");" \n
                         "EndVehicleFSM_now = false;"/*%FSM</STATEINIT""">*/;
                        precondition = /*%FSM<STATEPRECONDITION""">*/""/*%FSM</STATEPRECONDITION""">*/;
                        class Links
                        {
                                /*%FSM<LINK "FSM_already_runn">*/
                                class FSM_already_runn
                                {
                                        itemno = 7;
                                        priority = 0.000000;
                                        to="exit";
                                        precondition = /*%FSM<CONDPRECONDITION""">*/""/*%FSM</CONDPRECONDITION""">*/;
                                        condition=/*%FSM<CONDITION""">*/"_Running"/*%FSM</CONDITION""">*/;
                                        action=/*%FSM<ACTION""">*/""/*%FSM</ACTION""">*/;
                                };
                                /*%FSM</LINK>*/
                                /*%FSM<LINK "FSM_not_running">*/
                                class FSM_not_running
                                {
                                        itemno = 1;
                                        priority = 0.000000;
                                        to="Declare_state";
                                        precondition = /*%FSM<CONDPRECONDITION""">*/""/*%FSM</CONDPRECONDITION""">*/;
                                        condition=/*%FSM<CONDITION""">*/"IsNil ""_Running"""/*%FSM</CONDITION""">*/;
                                        action=/*%FSM<ACTION""">*/""/*%FSM</ACTION""">*/;
                                };
                                /*%FSM</LINK>*/
                        };
                };
                /*%FSM</STATE>*/
                /*%FSM<STATE "Declaring_all_functions">*/
                class Declaring_all_functions
                {
                        name = "Declaring_all_functions";
                        itemno = 2;
                        init = /*%FSM<STATEINIT""">*/"Tally_Fnc_Reveal = {" \n
                         "Params [""_Reciever"", ""_TargetArr""];" \n
                         "Private _Side = (Side _Reciever);" \n
                         "{_Reciever reveal [_x, (_Side knowsAbout _x)]} ForEach _TargetArr;" \n
                         "};" \n
                         "" \n
                         "" \n
                         "" \n
                         "Tally_Fnc_EndEvasionVeh = {" \n
                         "params [""_Vehicle""];" \n
                         "" \n
                         "diag_log ""Ending EVASION"";" \n
                         "private _Driver = (Driver _Vehicle);" \n
                         "" \n
                         "If 	((!IsNil ""_Driver"") 	&&" \n
                         "	(alive _Driver)) 	then {" \n
                         "								Private _Script = [(group _Driver)] spawn Tally_Fnc_ResetGroup;" \n
                         "								waituntil {ScriptDone _Script};" \n
                         "								{[_X, (_Vehicle GetVariable ""Cluster"")] spawn Tally_Fnc_Reveal} ForEach (Units (Group (Driver _Vehicle)));" \n
                         "" \n
                         "							};" \n
                         "(Gunner _Vehicle) doWatch objNull;" \n
                         "" \n
                         "{deleteMarker _X} ForEach (_Vehicle GetVariable ""Markers"");" \n
                         "" \n
                         "			" \n
                         "			_Vehicle SetVariable [""Cluster"", 		nil, true];" \n
                         "			_Vehicle SetVariable [""Centro"", 		nil, true];" \n
                         "			_Vehicle SetVariable [""Spacing"", 		nil, true];" \n
                         "			_Vehicle SetVariable [""Positions"", 		nil, true];" \n
                         "			_Vehicle SetVariable [""Areas"", 			nil, true];" \n
                         "			_Vehicle SetVariable [""Markers"", 		nil, true];" \n
                         "			_Vehicle SetVariable [""Evading"", 		nil, true];" \n
                         "			_Vehicle SetVariable [""EvadePos"",		nil, true];" \n
                         "			_Vehicle SetVariable [""timer"",			nil, true];" \n
                         "			_Vehicle SetVariable [""MinDistEnemy"", 	nil, true];" \n
                         "};" \n
                         "" \n
                         "Tally_Fnc_VehMarkers = {" \n
                         "Params [""_Vehicle"", ""_Shape"", ""_Pos"", ""_Dir"", ""_Size"", ""_Color"", ""_Brush""];" \n
                         "" \n
                         "Private _MarkerName = Format [""Marker_%1"", (round(random 10000000))];" \n
                         "Private _marker 	= createMarker [_MarkerName, _Pos];" \n
                         "		(_Vehicle GetVariable ""Markers"") PushBackUnique _Marker;" \n
                         "		" \n
                         "		_marker setMarkerShape _Shape;" \n
                         "		_marker setMarkerDir _Dir;" \n
                         "		_marker setMarkerSize [_Size, _Size];" \n
                         "		_marker setMarkerBrush _Brush;" \n
                         "		_Marker setMarkerColor _Color;" \n
                         "" \n
                         "};" \n
                         "" \n
                         "Tally_Fnc_CalcAreaLoc = {" \n
                         "params [""_OrigX"", ""_OrigY"", ""_Dir"", ""_Distance""];" \n
                         "" \n
                         "" \n
                         "Private _NewX = ((sin _Dir) * _Distance) + _OrigX;" \n
                         "Private _Newy = ((cos _Dir) * _Distance) + _OrigY;" \n
                         "" \n
                         "Private _SearchAreaPos = [_NewX,_NewY, 0];" \n
                         "" \n
                         "" \n
                         "_SearchAreaPos};" \n
                         "" \n
                         "" \n
                         "" \n
                         "Tally_Fnc_SearchAreas = {" \n
                         "Params [""_area1pos"", ""_area1Size"", ""_Vehicle"", ""_Dir""];" \n
                         "" \n
                         "If (FSMD3Bugger) then {" \n
                         "						[_Vehicle, ""ELLIPSE"", _area1pos, _Dir, _area1Size, ""ColorRed"", ""SolidBorder""] call Tally_Fnc_VehMarkers; " \n
                         "						};" \n
                         "Private _SearchAreaSize		= 	(_area1Size * 0.5);" \n
                         "Private _Distance			=	(_area1Size * 1.6);" \n
                         "" \n
                         "Private _SearchAreaPos 		= 	([(_area1pos select 0), (_area1pos select 1), _Dir, _Distance] call Tally_Fnc_CalcAreaLoc);" \n
                         "								(_Vehicle GetVariable ""Areas"") PushBackUnique [_SearchAreaPos, _SearchAreaSize];" \n
                         "								" \n
                         "						If (FSMD3Bugger) then {[_Vehicle, ""RECTANGLE"", _SearchAreaPos, 0, _SearchAreaSize, ""ColorBlack"", ""SolidBorder""] call Tally_Fnc_VehMarkers}; " \n
                         "						" \n
                         "" \n
                         "_SearchAreaPos 		= 	([(_area1pos select 0), (_area1pos select 1), (_Dir + 45), _Distance] call Tally_Fnc_CalcAreaLoc);" \n
                         "						(_Vehicle GetVariable ""Areas"") PushBackUnique [_SearchAreaPos, _SearchAreaSize];" \n
                         "" \n
                         "						If (FSMD3Bugger) then {[_Vehicle, ""RECTANGLE"", _SearchAreaPos, 0, _SearchAreaSize, ""ColorBlue"", ""SolidBorder""] call Tally_Fnc_VehMarkers}; " \n
                         "" \n
                         "" \n
                         "_SearchAreaPos 		= 	([(_area1pos select 0), (_area1pos select 1), (_Dir - 45), _Distance] call Tally_Fnc_CalcAreaLoc);" \n
                         "						(_Vehicle GetVariable ""Areas"") PushBackUnique [_SearchAreaPos, _SearchAreaSize];" \n
                         "" \n
                         "						If (FSMD3Bugger) then {[_Vehicle, ""RECTANGLE"", _SearchAreaPos, 0, _SearchAreaSize, ""ColorGreen"", ""SolidBorder""] call Tally_Fnc_VehMarkers};" \n
                         "		" \n
                         "};" \n
                         "" \n
                         "" \n
                         "" \n
                         "Tally_Fnc_Scan_Area = {" \n
                         "Params [""_Pos"", ""_Size"", ""_Vehicle""];" \n
                         "" \n
                         "Private _PosAmount 	= 10;" \n
                         "Private _Spacing 	= (_Size / _PosAmount);" \n
                         "" \n
                         "Private _StartPos = ([(_Pos select 0), (_Pos select 1), 225, (_Size * 1.272727)] Call Tally_Fnc_CalcAreaLoc);" \n
                         "_StartPos = [	_StartPos select 	0, " \n
                         "				_StartPos select 	1, " \n
                         "									0];" \n
                         "" \n
                         "For ""_I"" from 1 to _PosAmount do {" \n
                         "									[_StartPos, _Spacing, _PosAmount, _Vehicle] call Tally_Fnc_Ygrid;" \n
                         "									 _StartPos = [((_StartPos select 0) + (_Spacing * 2)), " \n
                         "													_StartPos select 1, " \n
                         "																	 0];" \n
                         "								  };" \n
                         "_Vehicle SetVariable [""Spacing"", 		_Spacing, true];" \n
                         "};" \n
                         "" \n
                         "Tally_Fnc_Ygrid = {" \n
                         "params [""_Pos"", ""_Spacing"", ""_Final_Height"", ""_Vehicle""];" \n
                         "Private _Center = (_Vehicle GetVariable ""Centro"");" \n
                         "" \n
                         "	for ""_i"" from 1 to _Final_Height do {" \n
                         "											" \n
                         "											If !(surfaceIsWater [(_Pos select 0), (_Pos select 1)]) then {" \n
                         "											if !(terrainIntersect [_pos, _Center]) Then 	{" \n
                         "											" \n
                         "																											(_Vehicle GetVariable ""Positions"") PushbackUnique  _Pos;" \n
                         "																											If (FSMD3Bugger) then {[_Vehicle, ""RECTANGLE"", _Pos, 0, _Spacing, ""ColorOrange"", ""SolidBorder""] call Tally_Fnc_VehMarkers};" \n
                         "																										  }};" \n
                         "											" \n
                         "											_Pos = [_Pos select 0, (_Pos select 1) + (_Spacing * 2), 1];" \n
                         "								" \n
                         "										};" \n
                         "" \n
                         "};" \n
                         "" \n
                         "Tally_Fnc_FilterPos = {" \n
                         "Params [""_Vehicle"", ""_Center""];" \n
                         "" \n
                         "Diag_Log format [""%1 positions pre-selected"", (count (_Vehicle GetVariable ""Positions""))];" \n
                         "" \n
                         "If (FSMD3Bugger) then {[_Vehicle, ""ELLIPSE"", _Center, 0, 150, ""Colorblue"", ""SOLID""] call Tally_Fnc_VehMarkers};" \n
                         "" \n
                         "_FinalPositions = [(_Vehicle GetVariable ""Positions"")] Call Tally_Fnc_GetTopHeights;" \n
                         "_Vehicle SetVariable [""Positions"", _FinalPositions, true];" \n
                         "" \n
                         "_FinalPositions = [(_Vehicle GetVariable ""Positions""), _Center] Call Tally_Fnc_GetClosePosArr;" \n
                         "{(_Vehicle GetVariable ""Positions"") PushBackUnique _X} forEach _FinalPositions;" \n
                         "" \n
                         "" \n
                         "If (FSMD3Bugger) then {" \n
                         "								{" \n
                         "								[_Vehicle, ""ELLIPSE"", _X, 0, 10, ""ColorRed"", ""SOLID""] call Tally_Fnc_VehMarkers;" \n
                         "								} ForEach (_Vehicle GetVariable ""Positions"");" \n
                         "						};" \n
                         "						" \n
                         "Diag_Log format [""%1 positions left"", (count (_Vehicle GetVariable ""Positions""))];" \n
                         "};" \n
                         "" \n
                         "" \n
                         "" \n
                         "" \n
                         "" \n
                         "Tally_Fnc_GetTopHeights = {" \n
                         "Params [""_PosArr""];" \n
                         "Private _NewArr = [];" \n
                         "{_NewArr PushBackUnique _x} ForEach _PosArr;" \n
                         "Private _PosCount = 0;" \n
                         "" \n
                         "For ""_I"" from 1 to 2 do {" \n
                         "							Private _Counter = 0;" \n
                         "							Private _AverageHeight = [_NewArr] call Tally_Fnc_GetAVGheight;" \n
                         "							" \n
                         "							{" \n
                         "								If ((ceil (getTerrainHeightASL _x)) < _AverageHeight) Then {" \n
                         "																								_NewArr DeleteAt _Counter;" \n
                         "																								_PosCount = (_PosCount + 1);" \n
                         "																							};" \n
                         "								 " \n
                         "								_Counter = (_Counter + 1);" \n
                         "							} ForEach _NewArr;" \n
                         "						 };" \n
                         "Diag_Log format [""%1 positions deleted due to height"", (_PosCount)];" \n
                         "" \n
                         "" \n
                         "" \n
                         "_NewArr};" \n
                         "" \n
                         "Tally_Fnc_GetClosePosArr = {" \n
                         "Params [""_PosArr"", ""_Center""];" \n
                         "Private _NewArr = [];" \n
                         "Private _PosCount = 0;" \n
                         "{_NewArr PushBackUnique _x} ForEach _PosArr;" \n
                         "" \n
                         "" \n
                         "							Private _Counter = 0;" \n
                         "							Private _AverageDistance = (Round ([_NewArr, _Center] call Tally_Fnc_GetAVG_Distance));" \n
                         "							Diag_Log format [""Average Distance %1"", _AverageDistance];" \n
                         "							" \n
                         "							{" \n
                         "								Private _Distance = (Round(_Center Distance2D _x));" \n
                         "								" \n
                         "								If (_Distance > _AverageDistance) Then {" \n
                         "																								_NewArr DeleteAt _Counter;" \n
                         "																						" \n
                         "																								_PosCount = (_PosCount + 1);" \n
                         "																					};" \n
                         "								 " \n
                         "								_Counter = (_Counter + 1);" \n
                         "							} ForEach _NewArr;" \n
                         "						 " \n
                         "						  " \n
                         "						  " \n
                         "Diag_Log format [""%1 positions deleted due to Distance"", (_PosCount)];" \n
                         "" \n
                         "" \n
                         "" \n
                         "_NewArr};" \n
                         "" \n
                         "" \n
                         "Tally_Fnc_GetAVG_Distance = {" \n
                         "Params [""_PosArr"", ""_Center""];" \n
                         "" \n
                         "Private _Distances = [];" \n
                         "private _AverageDistance = 1000;" \n
                         "" \n
                         "if (Count _PosArr > 1) then {" \n
                         "								{" \n
                         "											private _Dist = (_Center Distance2D _x);" \n
                         "											If (TypeName _Dist == ""SCALAR"") then {_Distances Pushback _Dist};" \n
                         "								" \n
                         "								}forEach _PosArr;" \n
                         "" \n
                         "" \n
                         "								If (Count _Distances > 0) then {_AverageDistance = ([_Distances, ""Tally_Fnc_GetAVG_Distance""] call Tally_Fnc_GetAVG)};" \n
                         "							};" \n
                         "" \n
                         "If (IsNil ""_AverageDistance"") then {_AverageDistance = 1000};" \n
                         "" \n
                         "_AverageDistance};" \n
                         "" \n
                         "" \n
                         "" \n
                         "" \n
                         "" \n
                         "" \n
                         "" \n
                         "Tally_Fnc_GetAVGheight = {" \n
                         "Params [""_PosArr""];" \n
                         "Private _Heights = [];" \n
                         "private _AverageHeight = 0;" \n
                         "" \n
                         "" \n
                         "if (Count _PosArr > 1) then {" \n
                         "								{" \n
                         "										private _elevation = (round getTerrainHeightASL _x);" \n
                         "										If (TypeName _elevation == ""SCALAR"") then {_Heights Pushback _elevation};" \n
                         "										 " \n
                         "								}forEach _PosArr;" \n
                         "" \n
                         "								If (Count _Heights > 0) then {_AverageHeight = (round ([_Heights, ""Tally_Fnc_GetAVGheight""] call Tally_Fnc_GetAVG))};" \n
                         "							};" \n
                         "" \n
                         "If (IsNil ""_AverageHeight"") then {_AverageHeight = 0;};" \n
                         "" \n
                         "_AverageHeight};" \n
                         "" \n
                         "" \n
                         "" \n
                         "" \n
                         "Tally_Fnc_GetAVG = {" \n
                         "_Caller_Function = ""Undefined"";" \n
                         "params [""_Arr"", ""_Caller_Function""];" \n
                         "Diag_Log format [""%1 called GetAVG function"", (_Caller_Function)];" \n
                         "" \n
                         "Private _NewArr = [];" \n
                         "" \n
                         "{" \n
                         "				If (TypeName _X == ""SCALAR"") then {_NewArr Pushback _X};" \n
                         "}ForEach _Arr;" \n
                         "" \n
                         "_Arr = _NewArr;" \n
                         "" \n
                         "private _Length = (Count _Arr);" \n
                         "private _sum = 0;" \n
                         "" \n
                         "for ""_i"" from 0 to (_Length - 1) do " \n
                         "									{_sum = ((_sum) + ((_Arr) select _i))};" \n
                         "" \n
                         "Private _Average = (floor (_sum / _Length));" \n
                         "" \n
                         "_Average};" \n
                         "" \n
                         "" \n
                         "" \n
                         "" \n
                         "" \n
                         "" \n
                         "" \n
                         "" \n
                         "" \n
                         "" \n
                         "" \n
                         "Tally_Fnc_EvadeVEh = {" \n
                         "Private _Minimum_Distance 	= 400; " \n
                         "Private _DeBug = false;" \n
                         "Params [""_Vehicle"", ""_Minimum_Distance"", ""_DeBug""];" \n
                         "" \n
                         "Private _Driver 				= (driver _Vehicle);" \n
                         "Private _Evading = (_Vehicle getVariable ""Evading"");" \n
                         "Private _Group				= (Group _Driver);" \n
                         "private _Side				= (Side _Driver);" \n
                         "Private _Timer				= (Time + 3);" \n
                         "Private _Enemy    			= [_Minimum_Distance, _Driver] call Tally_Fnc_GetNearestEnemy;" \n
                         "" \n
                         "FSMD3Bugger = _DeBug;" \n
                         "" \n
                         "" \n
                         "" \n
                         "If (Isnil ""_Enemy"")                                 		ExitWith {};" \n
                         "If (Isnull _Enemy)                                 		ExitWith {};" \n
                         "diag_log format [""side Vehicle %1 Has %2 TargetKnowledge"", _Vehicle, (_Side knowsAbout _Enemy)];" \n
                         "If ((!((_Side knowsAbout _Enemy) > 0)) " \n
                         "&& (!((_Group knowsAbout _Enemy) > 0)))               	ExitWith {diag_log format [""Side for Vehicle %1 does not know about near enemy"", _Vehicle];};" \n
                         "private _EnemyDist	= (_Vehicle Distance2D _Enemy);" \n
                         "If (!Alive _Enemy)                                 		ExitWith {diag_log format [""Vehicle %1 Has DEAD enemies"", _Vehicle];};" \n
                         "" \n
                         "" \n
                         "" \n
                         "Private _EnAvgPos			= ([_Enemy, (Round(_Minimum_Distance * 0.5))] call Tally_Fnc_AVGclusterPOS);" \n
                         "Private _EnemyCluster		= ([_Enemy, (Round(_Minimum_Distance * 0.5))] call Tally_Fnc_ClusterMembers);" \n
                         "" \n
                         "" \n
                         "" \n
                         "" \n
                         "Private _EnemyDir 	= ((_Vehicle getRelDir _Enemy) + (Getdir _Vehicle));" \n
                         "Private _evasionDir = ((_EnemyDir - 180) + 0);" \n
                         "Private _GoDistance = ((_Minimum_Distance - (_Vehicle Distance2D _Enemy)) + (_Minimum_Distance / 5)); " \n
                         "" \n
                         "_Vehicle SetVariable [""Evading"", true, true];" \n
                         "" \n
                         "" \n
                         "" \n
                         "" \n
                         "If (_EnemyDist < 50) then {_evasionDir = (getDir _Vehicle)};" \n
                         "" \n
                         "" \n
                         "" \n
                         "Private _dummy = ""B_Static_Designator_01_F"" createVehicleLocal [0,0,0];" \n
                         "_dummy allowdammage false;" \n
                         "hideObject _dummy;" \n
                         "" \n
                         "" \n
                         "for ""_I"" from 0 to 3 do {" \n
                         "							_dummy SetPos (GetPos _Vehicle);" \n
                         "							sleep 0.02;" \n
                         "						};" \n
                         "" \n
                         "_dummy SetDir _evasionDir;" \n
                         "Waituntil {Sleep 0.02; (((Getdir _Dummy) == (_evasionDir)) or (Time > _Timer))};" \n
                         "" \n
                         "" \n
                         "Private _EvasionPos = (_Dummy modelToWorld [0,_GoDistance ,0]);" \n
                         "sleep 0.1;" \n
                         "Deletevehicle _Dummy;" \n
                         "" \n
                         "" \n
                         "[_Group] spawn Tally_Fnc_DeleteWP;" \n
                         "" \n
                         "" \n
                         "" \n
                         "" \n
                         "" \n
                         "_Vehicle SetVariable [""Cluster"",		_EnemyCluster,									true];" \n
                         "_Vehicle SetVariable [""Centro"",			_EnAvgPos,										true];" \n
                         "_Vehicle SetVariable [""Positions"",		[], 											true];" \n
                         "_Vehicle SetVariable [""Areas"", 			[], 											true];" \n
                         "_Vehicle SetVariable [""Markers"", 		[], 											true];" \n
                         "_Vehicle SetVariable [""timer"", 			(round((time) + (_Minimum_Distance / 5))), 		true];" \n
                         "_Vehicle SetVariable [""MinDistEnemy"", 	_Minimum_Distance, 								true];" \n
                         "" \n
                         "Private _Script = [(getpos _Enemy), _Minimum_Distance, _Vehicle, _evasionDir] spawn Tally_Fnc_SearchAreas;" \n
                         "Waituntil {ScriptDone _Script};" \n
                         "{" \n
                         "Private _arr = _x;" \n
                         "_arr PushbackUnique _Vehicle;" \n
                         "_Script =  _arr spawn Tally_Fnc_Scan_Area;" \n
                         "Waituntil {ScriptDone _Script};" \n
                         "} ForEach (_Vehicle GetVariable ""Areas"");" \n
                         "_Script = [_Vehicle, _EnAvgPos] Spawn Tally_Fnc_FilterPos;" \n
                         "Waituntil {ScriptDone _Script};" \n
                         "" \n
                         "Private _EvasionPos2 = (SelectRandom (_Vehicle GetVariable ""Positions""));" \n
                         "If !(IsNil ""_EvasionPos2"") then {_EvasionPos = _EvasionPos2};" \n
                         "_Vehicle SetVariable [""EvadePos"", 		_EvasionPos, true];" \n
                         "" \n
                         "_Group setBehaviourStrong ""AWARE"";" \n
                         "" \n
                         "_Driver DoMove _EvasionPos;" \n
                         "" \n
                         "{[_X, (_Vehicle GetVariable ""Cluster"")] spawn Tally_Fnc_Reveal} ForEach (Units (Group (Driver _Vehicle)));" \n
                         "" \n
                         "If (FSMD3Bugger) then {" \n
                         "							[_Vehicle, ""ELLIPSE"", _EvasionPos, 0, 20, ""ColorKhaki"", ""Border""] call Tally_Fnc_VehMarkers;" \n
                         "							[_Vehicle, ""ELLIPSE"", _EvasionPos, 0, 15, ""ColorBlack"", ""Border""] call Tally_Fnc_VehMarkers;" \n
                         "							[_Vehicle, ""ELLIPSE"", _EvasionPos, 0, 10, ""ColorWhite"", ""Border""] call Tally_Fnc_VehMarkers;" \n
                         "							[_Vehicle, ""ELLIPSE"", _EvasionPos, 0, 5,  ""ColorBlue"", ""Border""] call Tally_Fnc_VehMarkers;" \n
                         "						};" \n
                         "};" \n
                         "" \n
                         "" \n
                         "" \n
                         "Tally_Fnc_Check_EvasionVeh_Conditions = {" \n
                         "params [""_Vehicle""];" \n
                         "" \n
                         "if 	((IsNil ""_Vehicle"") " \n
                         "or 	(IsNull _Vehicle)) exitWith {};" \n
                         "" \n
                         "Private _Evading 	= (_Vehicle getVariable ""Evading"");" \n
                         "" \n
                         "if 	(IsNil ""_Evading"")  exitWith {}; " \n
                         "" \n
                         "Private _TargetPos 			= (_Vehicle getVariable ""EvadePos"");" \n
                         "Private _Minimum_Distance	= (_Vehicle getVariable ""MinDistEnemy"");" \n
                         "Private _Timer 				= (_Vehicle getVariable ""timer"");" \n
                         "private _Distance			= (_Vehicle Distance2D _TargetPos);" \n
                         "private _Driver				= (Driver _Vehicle);" \n
                         "Private _Enemy    			= ([(_Minimum_Distance * 1.5), _Driver] call Tally_Fnc_GetNearestEnemy);" \n
                         "Private _EnemyDist			= (_Driver Distance2D _Enemy);" \n
                         "Private _Radius				= (_Minimum_Distance / 10); " \n
                         "" \n
                         "" \n
                         "If	(IsNil ""_Driver"") 			exitWith {[_Vehicle] spawn Tally_Fnc_EndEvasionVeh};" \n
                         "IF	(IsNull _Driver) 			exitWith {[_Vehicle] spawn Tally_Fnc_EndEvasionVeh};" \n
                         "IF	(!Alive _Driver) 			exitWith {[_Vehicle] spawn Tally_Fnc_EndEvasionVeh};" \n
                         "IF	(!CanMove _Vehicle)			exitWith {[_Vehicle] spawn Tally_Fnc_EndEvasionVeh};" \n
                         "IF	(crew _Vehicle IsEqualTo []) 	exitWith {[_Vehicle] spawn Tally_Fnc_EndEvasionVeh};" \n
                         "IF	(_Distance < _Radius) 		exitWith {[_Vehicle] spawn Tally_Fnc_EndEvasionVeh};" \n
                         "IF	(time > _Timer) 			exitWith {[_Vehicle] spawn Tally_Fnc_EndEvasionVeh};" \n
                         "IF	(fuel _Vehicle == 0) 		exitWith {[_Vehicle] spawn Tally_Fnc_EndEvasionVeh};" \n
                         "" \n
                         "" \n
                         "" \n
                         "If ((_Distance > _Radius) " \n
                         "&& {((velocityModelSpace _Vehicle) select 1) < 5}) then {" \n
                         "															_Driver moveTo _TargetPos;" \n
                         "															_Driver setBehaviourStrong ""AWARE"";" \n
                         "															(Group _Driver) setSpeedMode ""FULL"";" \n
                         "															sleep 3;" \n
                         "															If ((((velocityModelSpace _Vehicle) select 1) < 1) && (!IsNil ""_Evading""))" \n
                         "															then {_Driver DoMove _TargetPos};" \n
                         "														};" \n
                         "" \n
                         "If (Alive (Gunner _Vehicle)) then 	{" \n
                         "										Private _Taken = (_Vehicle GetVariable ""DaDa"");" \n
                         "										" \n
                         "										If (!Isnil ""_Taken"") exitWith {};" \n
                         "										" \n
                         "										_Vehicle SetVariable [""DaDa"", true, true];" \n
                         "										" \n
                         "										Private _Target = (SelectRandom (_Vehicle GetVariable ""Cluster""));" \n
                         "										(Gunner _Vehicle) reveal [_Target, 4];" \n
                         "										" \n
                         "										sleep 1;" \n
                         "										(Gunner _Vehicle) dofire _Target;" \n
                         "										" \n
                         "										" \n
                         "										" \n
                         "										_Vehicle SetVariable [""DaDa"", nil, true];" \n
                         "									};" \n
                         "" \n
                         "												" \n
                         "														" \n
                         "" \n
                         "" \n
                         "" \n
                         "};" \n
                         "" \n
                         "Tally_Fnc_ClusterMembers = {" \n
                         "Params [""_Unit"", ""_Radius""];" \n
                         "private _Side 	= (Side _Unit);" \n
                         "Private _Pos 	= (GetPos _Unit);" \n
                         "private _list 	= (nearestObjects [_Pos, [""land""], _Radius, true]);" \n
                         "Private _NewList = [];" \n
                         "" \n
                         "	{				" \n
                         "	if 	((Side _x) == (_Side))" \n
                         "	then 	{" \n
                         "			" \n
                         "				_NewList PushBackUnique _X;" \n
                         "			};" \n
                         "			" \n
                         "	}ForEach _list;" \n
                         "diag_log format [""%1 enemy units in area"", (Count _NewList)];" \n
                         "_NewList};" \n
                         "" \n
                         "" \n
                         "" \n
                         "" \n
                         "" \n
                         "Tally_Fnc_AVGclusterPOS = {" \n
                         "params [""_unit"", ""_Radius""];" \n
                         "private _Side 	= (Side _Unit);" \n
                         "Private _Pos 	= (GetPos _Unit);" \n
                         "private _list 	= (nearestObjects [_Pos, [""land""], _Radius, true]);" \n
                         "Private _Yarr 	= [];" \n
                         "Private _Xarr 	= [];" \n
                         "" \n
                         "" \n
                         "" \n
                         "{" \n
                         "	if 	((Side _x) == (_Side))" \n
                         "	then 	{" \n
                         "			" \n
                         "				Private _Xpos   = (round ((Getpos _x) select 0));" \n
                         "				Private _Ypos   = (round ((Getpos _x) select 1));" \n
                         "				_Yarr PushBackUnique _Ypos;" \n
                         "				_Xarr PushBackUnique _Xpos;" \n
                         "			};" \n
                         "}ForEach _list;" \n
                         "" \n
                         "" \n
                         "" \n
                         "Private _Returnpos = [(round ([_Xarr, ""Tally_Fnc_AVGclusterPOS""] Call Tally_Fnc_GetAVG)), (round ([_Yarr, ""Tally_Fnc_AVGclusterPOS""] Call Tally_Fnc_GetAVG)), 0];" \n
                         "If (Isnil ""_Returnpos"") then {" \n
                         "								_Returnpos = _Pos;" \n
                         "							};" \n
                         "" \n
                         "_Returnpos};" \n
                         "" \n
                         "" \n
                         "" \n
                         "Tally_Fnc_GetNearestEnemy = {" \n
                         "Private _Enemy = objnull; " \n
                         "Params [""_Radius"", ""_Unit""];" \n
                         "Private _pos 	= (GetPos _Unit);" \n
                         "private _list 	= _pos nearObjects _Radius;" \n
                         "Private _Side 	= (Side _Unit);" \n
                         "private _Enemies = [];" \n
                         "" \n
                         "	{" \n
                         "	if (_x iskindof ""Land"") then {" \n
                         "									" \n
                         "									" \n
                         "									If ((side _x) in [west, east, Independent])" \n
                         "									then{" \n
                         "									" \n
                         "									If (!((Side _x) == (_Side)))" \n
                         "									then {" \n
                         "									" \n
                         "									Private _Otherside = (Side _X);" \n
                         "									if !([_Side, _Otherside] call BIS_fnc_sideIsFriendly) " \n
                         "									then {" \n
                         "									" \n
                         "									_Enemies PushbackUnique _x;" \n
                         "									" \n
                         "									}}}}}" \n
                         "									ForEach _list;" \n
                         "" \n
                         "If ((count _Enemies) > 0) then {" \n
                         "									_Enemy = [_Pos, _Enemies] call Tally_Fnc_GetNearestObject;" \n
                         "								};" \n
                         "" \n
                         "" \n
                         "" \n
                         "_Enemy};" \n
                         "" \n
                         "" \n
                         "" \n
                         "" \n
                         "Tally_Fnc_VehEligbleFSM = {" \n
                         "" \n
                         "" \n
                         "params [""_Vehicle""];" \n
                         "Private _eligble = false;" \n
                         "Private _Evading = (_Vehicle getVariable ""Evading"");" \n
                         "" \n
                         "" \n
                         "if 	(!IsNil ""_Vehicle"" " \n
                         "&& 	{!IsNull _Vehicle " \n
                         "&& 	{Alive _Vehicle" \n
                         "&& 	{_Vehicle Iskindof ""Land""" \n
                         "&& 	{!(_Vehicle Iskindof ""man"")" \n
                         "&& 	{!(crew _Vehicle IsEqualTo [])" \n
                         "&& 	{Alive (driver _Vehicle)" \n
                         "&& 	{CanMove _Vehicle" \n
                         "&& 	{IsNil ""_Evading""" \n
                         "&&	{((Count (AllTurrets [_Vehicle, false])) > 0)" \n
                         "&&	{!(fuel _Vehicle == 0)" \n
                         "	}}}}}}}}}}) " \n
                         "				then {_eligble = true};" \n
                         "" \n
                         "_eligble};" \n
                         "" \n
                         "" \n
                         "" \n
                         "" \n
                         "" \n
                         "Tally_Fnc_GetNearestObject = {" \n
                         "Params [""_Pos"", ""_ObjArr""];" \n
                         "Private _Distance1		= 100000;" \n
                         "Private _Distance2		= 100000;" \n
                         "Private _Nearest		= 0;" \n
                         "" \n
                         "{" \n
                         "	_Distance2 = (_Pos Distance2d _x);" \n
                         "	If (_Distance2 < _Distance1) then {" \n
                         "	" \n
                         "										_Distance1 	= _Distance2;" \n
                         "										_Nearest	= _x;" \n
                         "										" \n
                         "									Sleep 0.1}} ForEach _ObjArr;" \n
                         "" \n
                         "" \n
                         "_Nearest};" \n
                         "" \n
                         "" \n
                         "" \n
                         "" \n
                         "Tally_Fnc_DeleteWP = {" \n
                         "Params [""_Group""];" \n
                         "If ((count waypoints _group) > 0) then {" \n
                         "										for ""_i"" from count waypoints _group - 1 to 0 step -1 do" \n
                         "													" \n
                         "													{deleteWaypoint [_group, _i]};" \n
                         "													{deleteWaypoint _x}ForEach (waypoints _Group);" \n
                         "										};" \n
                         "};" \n
                         "" \n
                         "" \n
                         "" \n
                         "Tally_Fnc_ResetGroup = {" \n
                         "Params [""_Group""];" \n
                         "" \n
                         "Private _NewGroup = createGroup (side _Group);" \n
                         " " \n
                         "" \n
                         "{ [_x] joinSilent _NewGroup } forEach (units _Group);" \n
                         "{ [_x] joinSilent _NewGroup } forEach (units _Group);" \n
                         "DeleteGroup _Group;" \n
                         "_NewGroup deleteGroupWhenEmpty true;" \n
                         "" \n
                         "_NewGroup};"/*%FSM</STATEINIT""">*/;
                        precondition = /*%FSM<STATEPRECONDITION""">*/""/*%FSM</STATEPRECONDITION""">*/;
                        class Links
                        {
                                /*%FSM<LINK "true">*/
                                class true
                                {
                                        itemno = 11;
                                        priority = 0.000000;
                                        to="feedback";
                                        precondition = /*%FSM<CONDPRECONDITION""">*/""/*%FSM</CONDPRECONDITION""">*/;
                                        condition=/*%FSM<CONDITION""">*/""/*%FSM</CONDITION""">*/;
                                        action=/*%FSM<ACTION""">*/""/*%FSM</ACTION""">*/;
                                };
                                /*%FSM</LINK>*/
                        };
                };
                /*%FSM</STATE>*/
                /*%FSM<STATE "Executing_FSM_functions">*/
                class Executing_FSM_functions
                {
                        name = "Executing_FSM_functions";
                        itemno = 6;
                        init = /*%FSM<STATEINIT""">*/"_time = time;" \n
                         "Tally_VEh_FSM_iteration_Done = false;" \n
                         "[_Minimum_Distance, _DeBug] spawn {" \n
                         "Params [""_Minimum_Distance"", ""_DeBug""];" \n
                         "				{" \n
                         "					" \n
                         "					If ([_X] call Tally_Fnc_VehEligbleFSM) then 	{" \n
                         "																	_Script = [_x, _Minimum_Distance, _DeBug] spawn Tally_Fnc_EvadeVEh;" \n
                         "																	waituntil {sleep 0.02; (Scriptdone _Script)};" \n
                         "																	sleep 0.1;" \n
                         "																};" \n
                         "					If (_x getVariable ""Evading"") 			then 	{											" \n
                         "																		_Script = [_x] spawn Tally_Fnc_Check_EvasionVeh_Conditions;" \n
                         "																		waituntil {sleep 0.02; (Scriptdone _Script)};" \n
                         "																	};" \n
                         "					sleep 0.02;" \n
                         "				} " \n
                         "				ForEach vehicles;" \n
                         "" \n
                         "" \n
                         "Tally_VEh_FSM_iteration_Done = true;" \n
                         "};"/*%FSM</STATEINIT""">*/;
                        precondition = /*%FSM<STATEPRECONDITION""">*/""/*%FSM</STATEPRECONDITION""">*/;
                        class Links
                        {
                                /*%FSM<LINK "EndCondition">*/
                                class EndCondition
                                {
                                        itemno = 13;
                                        priority = 0.000000;
                                        to="Feedback_1";
                                        precondition = /*%FSM<CONDPRECONDITION""">*/""/*%FSM</CONDPRECONDITION""">*/;
                                        condition=/*%FSM<CONDITION""">*/"EndVehicleFSM_now"/*%FSM</CONDITION""">*/;
                                        action=/*%FSM<ACTION""">*/""/*%FSM</ACTION""">*/;
                                };
                                /*%FSM</LINK>*/
                                /*%FSM<LINK "sleep">*/
                                class sleep
                                {
                                        itemno = 4;
                                        priority = 0.000000;
                                        to="Executing_FSM_functions";
                                        precondition = /*%FSM<CONDPRECONDITION""">*/""/*%FSM</CONDPRECONDITION""">*/;
                                        condition=/*%FSM<CONDITION""">*/"((time - _time > _refreshRate) && (Tally_VEh_FSM_iteration_Done))"/*%FSM</CONDITION""">*/;
                                        action=/*%FSM<ACTION""">*/""/*%FSM</ACTION""">*/;
                                };
                                /*%FSM</LINK>*/
                        };
                };
                /*%FSM</STATE>*/
                /*%FSM<STATE "exit">*/
                class exit
                {
                        name = "exit";
                        itemno = 8;
                        init = /*%FSM<STATEINIT""">*/""/*%FSM</STATEINIT""">*/;
                        precondition = /*%FSM<STATEPRECONDITION""">*/""/*%FSM</STATEPRECONDITION""">*/;
                        class Links
                        {
                        };
                };
                /*%FSM</STATE>*/
                /*%FSM<STATE "Declare_state">*/
                class Declare_state
                {
                        name = "Declare_state";
                        itemno = 9;
                        init = /*%FSM<STATEINIT""">*/"MissionNamespace setVariable [""Tally_FSM_RUnning"", true, true];"/*%FSM</STATEINIT""">*/;
                        precondition = /*%FSM<STATEPRECONDITION""">*/""/*%FSM</STATEPRECONDITION""">*/;
                        class Links
                        {
                                /*%FSM<LINK "sleep">*/
                                class sleep
                                {
                                        itemno = 10;
                                        priority = 0.000000;
                                        to="Declaring_all_functions";
                                        precondition = /*%FSM<CONDPRECONDITION""">*/""/*%FSM</CONDPRECONDITION""">*/;
                                        condition=/*%FSM<CONDITION""">*/"time - _time > 1"/*%FSM</CONDITION""">*/;
                                        action=/*%FSM<ACTION""">*/""/*%FSM</ACTION""">*/;
                                };
                                /*%FSM</LINK>*/
                        };
                };
                /*%FSM</STATE>*/
                /*%FSM<STATE "feedback">*/
                class feedback
                {
                        name = "feedback";
                        itemno = 12;
                        init = /*%FSM<STATEINIT""">*/"Diag_Log ""DCO_FSM has initiated"";" \n
                         "" \n
                         "if (_DeBug) then {SystemChat ""Dragon_Company_Veh_Withdraw_FSM has initiated""};" \n
                         ""/*%FSM</STATEINIT""">*/;
                        precondition = /*%FSM<STATEPRECONDITION""">*/""/*%FSM</STATEPRECONDITION""">*/;
                        class Links
                        {
                                /*%FSM<LINK "sleep">*/
                                class sleep
                                {
                                        itemno = 3;
                                        priority = 0.000000;
                                        to="Executing_FSM_functions";
                                        precondition = /*%FSM<CONDPRECONDITION""">*/""/*%FSM</CONDPRECONDITION""">*/;
                                        condition=/*%FSM<CONDITION""">*/"time - _time > 5"/*%FSM</CONDITION""">*/;
                                        action=/*%FSM<ACTION""">*/""/*%FSM</ACTION""">*/;
                                };
                                /*%FSM</LINK>*/
                        };
                };
                /*%FSM</STATE>*/
                /*%FSM<STATE "Feedback_1">*/
                class Feedback_1
                {
                        name = "Feedback_1";
                        itemno = 14;
                        init = /*%FSM<STATEINIT""">*/"Diag_Log ""DCO_FSM has been terminated"";" \n
                         "if (_DeBug) then {SystemChat ""Dragon_Company_Veh_Withdraw_FSM has been terminated""};" \n
                         "MissionNamespace setVariable [""Tally_FSM_RUnning"", nil, true];" \n
                         ""/*%FSM</STATEINIT""">*/;
                        precondition = /*%FSM<STATEPRECONDITION""">*/""/*%FSM</STATEPRECONDITION""">*/;
                        class Links
                        {
                                /*%FSM<LINK "true">*/
                                class true
                                {
                                        itemno = 15;
                                        priority = 0.000000;
                                        to="exit";
                                        precondition = /*%FSM<CONDPRECONDITION""">*/""/*%FSM</CONDPRECONDITION""">*/;
                                        condition=/*%FSM<CONDITION""">*/""/*%FSM</CONDITION""">*/;
                                        action=/*%FSM<ACTION""">*/""/*%FSM</ACTION""">*/;
                                };
                                /*%FSM</LINK>*/
                        };
                };
                /*%FSM</STATE>*/
        };
        initState="Init_FSM";
        finalStates[] =
        {
                "exit",
        };
};
/*%FSM</COMPILE>*/
